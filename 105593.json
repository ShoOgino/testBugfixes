{"path":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","commits":[{"id":"d1b4f9f023bf5098df34505adf1ed91daa67c239","date":1157655314,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true)) \n      return null;\n\n    NamedList res = new NamedList();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9727734a64d33a1345c9251f53eb375f04c583e","date":1158874656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new NamedList();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true)) \n      return null;\n\n    NamedList res = new NamedList();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new NamedList();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1","date":1185690521,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n\n      res.add(\"facet_fields\", getFacetFieldCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(params.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b6124b1a8da43c086b34ee5005d89e20f4f0764","date":1189219182,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see SolrParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    NamedList res = new SimpleOrderedMap();\n    try {\n\n      res.add(\"facet_queries\", getFacetQueryCounts());\n      res.add(\"facet_fields\", getFacetFieldCounts());\n      res.add(\"facet_dates\", getFacetDateCounts());\n      \n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      res.add(\"exception\", SolrException.toStr(e));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1":["4145b7b13874de95211223a6edb648da8794a688"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"4145b7b13874de95211223a6edb648da8794a688":["c9727734a64d33a1345c9251f53eb375f04c583e"],"c9727734a64d33a1345c9251f53eb375f04c583e":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4b6124b1a8da43c086b34ee5005d89e20f4f0764"],"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"d1b4f9f023bf5098df34505adf1ed91daa67c239":["c9727734a64d33a1345c9251f53eb375f04c583e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d1b4f9f023bf5098df34505adf1ed91daa67c239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4145b7b13874de95211223a6edb648da8794a688":["487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c9727734a64d33a1345c9251f53eb375f04c583e":["4145b7b13874de95211223a6edb648da8794a688"],"4b6124b1a8da43c086b34ee5005d89e20f4f0764":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}