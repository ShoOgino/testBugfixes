{"path":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfoPerCommit info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfoPerCommit info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f9c72dc0e9082b70769643013a67c27bb9f444","date":1343580107,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfoPerCommit info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfoPerCommit info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxNumSegments, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isMerged(infos, maxNumSegments, segmentsToMerge)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be merged (other segments may have been flushed\n      // since the merge started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfoPerCommit info = infos.info(--last);\n        if (segmentsToMerge.containsKey(info)) {\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must merge down to 1 segment, the\n          // choice is simple:\n          if (last > 1 || !isMerged(infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.asList().subList(0, last)));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","03f9c72dc0e9082b70769643013a67c27bb9f444"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","03f9c72dc0e9082b70769643013a67c27bb9f444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f9c72dc0e9082b70769643013a67c27bb9f444"]},"commit2Childs":{"03f9c72dc0e9082b70769643013a67c27bb9f444":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["03f9c72dc0e9082b70769643013a67c27bb9f444","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}