{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","commits":[{"id":"9129118c08e08acdaabc9d711521e7be60f7a188","date":1352476586,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, int maxLength) throws IOException {\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field) throws IOException {\n      return null; // nocommit\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71df1db89d3a713f022b58111aafd14a4b352da0","date":1352479848,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, int maxLength) throws IOException {\n      return null; // nocommit\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, int maxLength) throws IOException {\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cdd5c851b109e43c9769c127d0b67039f73b9d2","date":1352492851,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, encoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, int maxLength) throws IOException {\n      return null; // nocommit\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4eaed6f1c6b9414b862b32281f53ef421918dcf","date":1353000825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, encoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f176b7bac2a187d69335c079b1f923449fb2881f","date":1353257308,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83f7535831b82edd777d50f0276d244b3c9a4734","date":1353267152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee","date":1353299109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    // nocommit\n    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isSortedBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","sourceOld":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addSortedField(FieldInfo,int,boolean,int).mjava","sourceNew":"    @Override\n    public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isSortedBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n\n      int valueCount = 0;\n      int maxLength = -1;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n        valueCount++;\n      }\n\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      // for asserts:\n      int valuesSeen = 0;\n\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        valuesSeen++;\n        assert valuesSeen <= valueCount;\n      }\n\n      assert valuesSeen == valueCount;\n\n      for(Number ord : docToOrd) {\n        SimpleTextUtil.write(data, ordEncoder.format(ord.intValue()), scratch);\n        SimpleTextUtil.writeNewline(data);\n      }\n    }\n\n","sourceOld":"    @Override\n    public SortedDocValuesConsumer addSortedField(FieldInfo field, final int valueCount, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isSortedBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write numValues\n      SimpleTextUtil.write(data, NUMVALUES);\n      SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Integer.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      int maxOrdBytes = Integer.toString(valueCount).length();\n      sb.setLength(0);\n      for (int i = 0; i < maxOrdBytes; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern for ords\n      SimpleTextUtil.write(data, ORDPATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      return new SortedDocValuesConsumer() {\n\n        // for asserts:\n        private int valuesSeen;\n        \n        @Override\n        public void addValue(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          valuesSeen++;\n          assert valuesSeen <= valueCount;\n        }\n\n        @Override\n        public void addDoc(int ord) throws IOException {\n          SimpleTextUtil.write(data, ordEncoder.format(ord), scratch);\n          SimpleTextUtil.writeNewline(data);\n        }\n\n        @Override\n        public void finish() throws IOException {}\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["83f7535831b82edd777d50f0276d244b3c9a4734"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["e4eaed6f1c6b9414b862b32281f53ef421918dcf"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["f176b7bac2a187d69335c079b1f923449fb2881f"],"71df1db89d3a713f022b58111aafd14a4b352da0":["9129118c08e08acdaabc9d711521e7be60f7a188"],"f176b7bac2a187d69335c079b1f923449fb2881f":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"9129118c08e08acdaabc9d711521e7be60f7a188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55eeb2534cd53d2a985669829df942468ebf5314":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["55eeb2534cd53d2a985669829df942468ebf5314"],"83f7535831b82edd777d50f0276d244b3c9a4734":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"e4eaed6f1c6b9414b862b32281f53ef421918dcf":["7cdd5c851b109e43c9769c127d0b67039f73b9d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"7cdd5c851b109e43c9769c127d0b67039f73b9d2":["71df1db89d3a713f022b58111aafd14a4b352da0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["f176b7bac2a187d69335c079b1f923449fb2881f"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["55eeb2534cd53d2a985669829df942468ebf5314"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["83f7535831b82edd777d50f0276d244b3c9a4734"],"71df1db89d3a713f022b58111aafd14a4b352da0":["7cdd5c851b109e43c9769c127d0b67039f73b9d2"],"f176b7bac2a187d69335c079b1f923449fb2881f":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"9129118c08e08acdaabc9d711521e7be60f7a188":["71df1db89d3a713f022b58111aafd14a4b352da0"],"55eeb2534cd53d2a985669829df942468ebf5314":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"83f7535831b82edd777d50f0276d244b3c9a4734":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"e4eaed6f1c6b9414b862b32281f53ef421918dcf":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9129118c08e08acdaabc9d711521e7be60f7a188","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cdd5c851b109e43c9769c127d0b67039f73b9d2":["e4eaed6f1c6b9414b862b32281f53ef421918dcf"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ed9002c5afac843c7f2d04d88e74b40d627e1af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}