{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = newDirectory(random);\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3808b3bd5067a1d82f3196d6888e821674263150","date":1283593066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory(random);\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = newDirectory(random);\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory(random);\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      final File fileDir = new File(TEMP_DIR, \"testIndex\");\n      for(int i=0;i<2;i++) {\n        try {\n          final Directory dir;\n          if (0 == i)\n            dir = new MockRAMDirectory();\n          else\n            dir = getDirectory();\n          assertFalse(IndexReader.indexExists(dir));\n          IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n          writer.close();\n          assertTrue(IndexReader.indexExists(dir));\n          IndexReader reader = IndexReader.open(dir, false);\n          assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n          long version = IndexReader.lastModified(dir);\n          if (i == 1) {\n            long version2 = IndexReader.lastModified(dir);\n            assertEquals(version, version2);\n          }\n          reader.close();\n          // modify index and check version has been\n          // incremented:\n          Thread.sleep(1000);\n\n          writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n          addDocumentWithFields(writer);\n          writer.close();\n          reader = IndexReader.open(dir, false);\n          assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n          reader.close();\n          dir.close();\n        } finally {\n          if (i == 1)\n            _TestUtil.rmDir(fileDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir, false);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir, false);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(DirectoryReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(DirectoryReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = DirectoryReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = DirectoryReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + DirectoryReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(DirectoryReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(DirectoryReader.indexExists(dir));\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = DirectoryReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = DirectoryReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + DirectoryReader.lastModified(dir), version <= DirectoryReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(DirectoryReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(DirectoryReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = DirectoryReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = DirectoryReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + DirectoryReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":null,"sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":null,"sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(DirectoryReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(DirectoryReader.indexExists(dir));\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = DirectoryReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = DirectoryReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = DirectoryReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + DirectoryReader.lastModified(dir), version <= DirectoryReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testLastModified().mjava","sourceNew":null,"sourceOld":"    public void testLastModified() throws Exception {\n      for(int i=0;i<2;i++) {\n        final Directory dir = newDirectory();\n        assertFalse(IndexReader.indexExists(dir));\n        IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n        writer.close();\n        assertTrue(IndexReader.indexExists(dir));\n        IndexReader reader = IndexReader.open(dir);\n        assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n        long version = IndexReader.lastModified(dir);\n        if (i == 1) {\n          long version2 = IndexReader.lastModified(dir);\n          assertEquals(version, version2);\n        }\n        reader.close();\n        // modify index and check version has been\n        // incremented:\n        Thread.sleep(1000);\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        addDocumentWithFields(writer);\n        writer.close();\n        reader = IndexReader.open(dir);\n        assertTrue(\"old lastModified is \" + version + \"; new lastModified is \" + IndexReader.lastModified(dir), version <= IndexReader.lastModified(dir));\n        reader.close();\n        dir.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["f2c5f0cb44df114db4228c8f77861714b5cabaea","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"3808b3bd5067a1d82f3196d6888e821674263150":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3808b3bd5067a1d82f3196d6888e821674263150"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["f2c5f0cb44df114db4228c8f77861714b5cabaea","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["3615ce4a1f785ae1b779244de52c6a7d99227e60","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["3808b3bd5067a1d82f3196d6888e821674263150"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"3808b3bd5067a1d82f3196d6888e821674263150":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["817882884229bace7dc5d1b75f6b0e4aa1e47122"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","817882884229bace7dc5d1b75f6b0e4aa1e47122","a3776dccca01c11e7046323cfad46a3b4a471233","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}