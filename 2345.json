{"path":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","commits":[{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Create a {@link QParser} to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local-params in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Create a {@link QParser} to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local-params in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * using the \"lucene\" (QParserPlugin.DEFAULT_QTYPE) query parser.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if\n   * qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, SolrQueryRequest req) throws SyntaxError {\n    return getParser(qstr, QParserPlugin.DEFAULT_QTYPE, req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4aee4980038a10791618ea04e79233ce5cbf6607"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4aee4980038a10791618ea04e79233ce5cbf6607","a91f19e3f7576973404e13b7ecfb8ae94f313921","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4aee4980038a10791618ea04e79233ce5cbf6607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}