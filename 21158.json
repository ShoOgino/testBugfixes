{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n    \n    cloudClient.shutdown();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n    \n    cloudClient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b291fa953aeb2a135ed14740cb774eb76bfc64b0","date":1386184301,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n    \n    cloudClient.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines/loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#test().mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/SolrMorphlineZkAliasTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    waitForRecoveriesToFinish(false);\n    \n    createAlias(\"aliascollection\", \"collection1\");\n    \n    morphline = parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n    Record record = new Record();\n    record.put(Fields.ID, \"id0-innsbruck\");\n    record.put(\"text\", \"mytext\");\n    record.put(\"user_screen_name\", \"foo\");\n    record.put(\"first_name\", \"Nadja\"); // will be sanitized\n    startSession();\n    assertEquals(1, collector.getNumStartEvents());\n    Notifications.notifyBeginTransaction(morphline);\n    assertTrue(morphline.process(record));\n    \n    record = new Record();\n    record.put(Fields.ID, \"id1-innsbruck\");\n    record.put(\"text\", \"mytext1\");\n    record.put(\"user_screen_name\", \"foo1\");\n    record.put(\"first_name\", \"Nadja1\"); // will be sanitized\n    assertTrue(morphline.process(record));\n    \n    Record expected = new Record();\n    expected.put(Fields.ID, \"id0-innsbruck\");\n    expected.put(\"text\", \"mytext\");\n    expected.put(\"user_screen_name\", \"foo\");\n    Iterator<Record> citer = collector.getRecords().iterator();\n    assertEquals(expected, citer.next());\n    \n    Record expected2 = new Record();\n    expected2.put(Fields.ID, \"id1-innsbruck\");\n    expected2.put(\"text\", \"mytext1\");\n    expected2.put(\"user_screen_name\", \"foo1\");\n    assertEquals(expected2, citer.next());\n    \n    assertFalse(citer.hasNext());\n    \n    commit();\n    \n    QueryResponse rsp = cloudClient.query(new SolrQuery(\"*:*\").setRows(100000).addSort(Fields.ID, SolrQuery.ORDER.asc));\n    //System.out.println(rsp);\n    Iterator<SolrDocument> iter = rsp.getResults().iterator();\n    assertEquals(expected.getFields(), next(iter));\n    assertEquals(expected2.getFields(), next(iter));\n    assertFalse(iter.hasNext());\n    \n    Notifications.notifyRollbackTransaction(morphline);\n    Notifications.notifyShutdown(morphline);\n    \n    \n    createAlias(\"aliascollection\", \"collection1,collection2\");\n    \n    try {\n      parse(\"test-morphlines\" + File.separator + \"loadSolrBasic\", \"aliascollection\");\n      fail(\"Expected IAE because update alias maps to multiple collections\");\n    } catch (IllegalArgumentException e) {\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"abb23fcc2461782ab204e61213240feb77d355aa":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["c170e9d4c93c47801b611c5f124a91c5d27e0d73","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}