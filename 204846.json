{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","sourceNew":null,"sourceOld":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","sourceNew":null,"sourceOld":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/IntsRefFSTEnum#advance(IntsRef).mjava","sourceNew":null,"sourceOld":"  /** NOTE: target must be >= where we are already\n   *  positioned */\n  public InputOutput<T> advance(IntsRef target) throws IOException {\n\n    assert target.compareTo(current) >= 0;\n\n    //System.out.println(\"    advance len=\" + target.length + \" curlen=\" + current.length);\n\n    // special case empty string\n    if (current.length == 0) {\n      if (target.length == 0) {\n        final T output = fst.getEmptyOutput();      \n        if (output != null) {\n          if (!didEmpty) {\n            current.length = 0;\n            lastFinal = true;\n            result.output = output;\n            didEmpty = true;\n          }\n          return result;\n        } else {\n          return next();\n        }\n      }\n      \n      if (fst.noNodes()) {\n        return null;\n      }\n    }\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    // what prefix does target share w/ current\n    int idx = 0;\n    while (idx < current.length && idx < target.length) {\n      if (current.ints[idx] != target.ints[target.offset + idx]) {\n        break;\n      }\n      idx++;\n    }\n\n    //System.out.println(\"  shared \" + idx);\n\n    FST.Arc<T> arc;\n    if (current.length == 0) {\n      // new enum (no seek/next yet)\n      arc = fst.readFirstArc(fst.getStartNode(), getArc(0));\n      //System.out.println(\"  new enum\");\n    } else if (idx < current.length) {\n      // roll back to shared point\n      lastFinal = false;\n      current.length = idx;\n      arc = arcs[idx];\n      if (arc.isLast()) {\n        if (idx == 0) {\n          return null;\n        } else {\n          return next();\n        }\n      }\n      arc = fst.readNextArc(arc);\n    } else if (idx == target.length) {\n      // degenerate case -- seek to term we are already on\n      assert target.equals(current);\n      return result;\n    } else {\n      // current is a full prefix of target\n      if (lastFinal) {\n        arc = fst.readFirstArc(arcs[current.length-1].target, getArc(current.length));\n      } else {\n        return next();\n      }\n    }\n\n    lastFinal = false;\n\n    assert arc == arcs[current.length];\n    int targetLabel = target.ints[target.offset+current.length];\n\n    while(true) {\n      //System.out.println(\"    cycle len=\" + current.length + \" target=\" + ((char) targetLabel) + \" vs \" + ((char) arc.label));\n      if (arc.label == targetLabel) {\n        grow();\n        current.ints[current.length] = arc.label;\n        appendOutput(arc.output);\n        current.length++;\n        grow();\n        if (current.length == target.length) {\n          result.output = output[current.length-1];\n          if (arc.isFinal()) {\n            // target is exact match\n            if (fst.hasArcs(arc.target)) {\n              // target is also a proper prefix of other terms\n              lastFinal = true;\n              appendFinalOutput(arc.nextFinalOutput);\n            }\n          } else {\n            // target is not a match but is a prefix of\n            // other terms\n            current.length--;\n            push();\n          }\n          return result;\n        } else if (!fst.hasArcs(arc.target)) {\n          // we only match a prefix of the target\n          return next();\n        } else {\n          targetLabel = target.ints[target.offset+current.length];\n          arc = fst.readFirstArc(arc.target, getArc(current.length));\n        }\n      } else if (arc.label > targetLabel) {\n        // we are now past the target\n        push();\n        return result;\n      } else if (arc.isLast()) {\n        if (current.length == 0) {\n          return null;\n        }\n        return next();\n      } else {\n        arc = fst.readNextArc(getArc(current.length));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}