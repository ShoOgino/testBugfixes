{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      this.ids = new HashSet<String>();\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        ids.add(id);\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      this.ids = new HashSet<String>();\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, idSchemaFT.readableToIndexed(exclude.get(i)) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      this.ids = new HashSet<String>();\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        ids.add(id);\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<String>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          TermQuery tq = new TermQuery(new Term(idField, idSchemaFT.readableToIndexed(exclude.get(i))));\n          this.exclude[i] = new BooleanClause(tq, BooleanClause.Occur.MUST_NOT);\n        }\n      }\n    }\n\n","sourceOld":"    ElevationObj( String qstr, List<String> elevate, List<String> exclude ) throws IOException\n    {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery( this.text );\n      this.ids = new HashSet<String>();\n      \n      this.include = new BooleanQuery();\n      this.include.setBoost( 0 );\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size()+5;\n      for( String id : elevate ) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery( new Term( idField, id ) );\n        include.add( tq, BooleanClause.Occur.SHOULD );\n        this.priority.put( new BytesRef(id), max-- );\n      }\n      \n      if( exclude == null || exclude.isEmpty() ) {\n        this.exclude = null;\n      }\n      else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for( int i=0; i<exclude.size(); i++ ) {\n          TermQuery tq = new TermQuery( new Term( idField, idSchemaFT.readableToIndexed(exclude.get(i)) ) );\n          this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );\n        }\n      }\n\n      this.comparatorSource = new ElevationComparatorSource(priority);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fb0c241e2a5e80dcaf41e354c7003520fcb777d","date":1324562351,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<String>();\n      this.excludeIds = new HashSet<String>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<String>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new BooleanClause[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          TermQuery tq = new TermQuery(new Term(idField, idSchemaFT.readableToIndexed(exclude.get(i))));\n          this.exclude[i] = new BooleanClause(tq, BooleanClause.Occur.MUST_NOT);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<String>();\n      this.excludeIds = new HashSet<String>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<BytesRef, Integer>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n      this.include.setBoost(0);\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      this.include = new BooleanQuery();\n      this.include.setBoost(0);\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n      this.include.setBoost(0);\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":4,"author":"broustant","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":null,"sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":null,"sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.ElevationObj#ElevationObj(String,List[String],List[String]).mjava","sourceNew":null,"sourceOld":"    ElevationObj(String qstr, List<String> elevate, List<String> exclude) throws IOException {\n      this.text = qstr;\n      this.analyzed = getAnalyzedQuery(this.text);\n      this.ids = new HashSet<>();\n      this.excludeIds = new HashSet<>();\n\n      BooleanQuery.Builder include = new BooleanQuery.Builder();\n      this.priority = new HashMap<>();\n      int max = elevate.size() + 5;\n      for (String id : elevate) {\n        id = idSchemaFT.readableToIndexed(id);\n        ids.add(id);\n        TermQuery tq = new TermQuery(new Term(idField, id));\n        include.add(tq, BooleanClause.Occur.SHOULD);\n        this.priority.put(new BytesRef(id), max--);\n      }\n      this.include = include.build();\n\n      if (exclude == null || exclude.isEmpty()) {\n        this.exclude = null;\n      } else {\n        this.exclude = new TermQuery[exclude.size()];\n        for (int i = 0; i < exclude.size(); i++) {\n          String id = idSchemaFT.readableToIndexed(exclude.get(i));\n          excludeIds.add(id);\n          this.exclude[i] = new TermQuery(new Term(idField, id));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"1d0561cea94adff1867218e77bb763c7583be279":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c26f00b574427b55127e869b935845554afde1fa"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2dfdf766e55e943d942055d7de53c7ad6bc45283","2ad458affd82a1d762eb506003907d9363a333cb"],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["1d0561cea94adff1867218e77bb763c7583be279"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2dfdf766e55e943d942055d7de53c7ad6bc45283","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c26f00b574427b55127e869b935845554afde1fa":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["1d0561cea94adff1867218e77bb763c7583be279"],"1d0561cea94adff1867218e77bb763c7583be279":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}