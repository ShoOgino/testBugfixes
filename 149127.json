{"path":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","commits":[{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateAcls() throws Exception {\n    try {\n      System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsAllAndReadonlyDigestZkACLProvider.class.getName());\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME, \"user\");\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME, \"pass\");\n\n      String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\", \"updateacls\", \"/\"};\n      ZkCLI.main(args);\n    } finally {\n      // Need to clear these before we open the next SolrZkClient\n      System.clearProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME);\n    }\n    \n    boolean excepted = false;\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractDistribZkTestBase.DEFAULT_CONNECTION_TIMEOUT)) {\n      zkClient.getData(\"/\", null, null, true);\n    } catch (KeeperException.NoAuthException e) {\n      excepted = true;\n    }\n    assertTrue(\"Did not fail to read.\", excepted);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","sourceNew":"  @Test\n  public void testUpdateAcls() throws Exception {\n    try {\n      System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsAllAndReadonlyDigestZkACLProvider.class.getName());\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME, \"user\");\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME, \"pass\");\n\n      String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\", \"updateacls\", \"/\"};\n      ZkCLI.main(args);\n    } finally {\n      // Need to clear these before we open the next SolrZkClient\n      System.clearProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME);\n    }\n\n    boolean excepted = false;\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractDistribZkTestBase.DEFAULT_CONNECTION_TIMEOUT)) {\n      zkClient.getData(\"/\", null, null, true);\n    } catch (KeeperException.NoAuthException e) {\n      excepted = true;\n    }\n    assertTrue(\"Did not fail to read.\", excepted);\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateAcls() throws Exception {\n    try {\n      System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsAllAndReadonlyDigestZkACLProvider.class.getName());\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME, \"user\");\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME, \"pass\");\n\n      String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\", \"updateacls\", \"/\"};\n      ZkCLI.main(args);\n    } finally {\n      // Need to clear these before we open the next SolrZkClient\n      System.clearProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME);\n    }\n    \n    boolean excepted = false;\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractDistribZkTestBase.DEFAULT_CONNECTION_TIMEOUT)) {\n      zkClient.getData(\"/\", null, null, true);\n    } catch (KeeperException.NoAuthException e) {\n      excepted = true;\n    }\n    assertTrue(\"Did not fail to read.\", excepted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkCLITest#testUpdateAcls().mjava","sourceNew":"  @Test\n  public void testUpdateAcls() throws Exception {\n    try {\n      System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsAllAndReadonlyDigestZkACLProvider.class.getName());\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME, \"user\");\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME, \"pass\");\n\n      String[] args = new String[]{\"-zkhost\", zkServer.getZkAddress(), \"-cmd\", \"updateacls\", \"/\"};\n      ZkCLI.main(args);\n    } finally {\n      // Need to clear these before we open the next SolrZkClient\n      System.clearProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME);\n    }\n\n    boolean excepted = false;\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractDistribZkTestBase.DEFAULT_CONNECTION_TIMEOUT)) {\n      zkClient.getData(\"/\", null, null, true);\n    } catch (KeeperException.NoAuthException e) {\n      excepted = true;\n    }\n    assertTrue(\"Did not fail to read.\", excepted);\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateAcls() throws Exception {\n    try {\n      System.setProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME, VMParamsAllAndReadonlyDigestZkACLProvider.class.getName());\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME, \"user\");\n      System.setProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME, \"pass\");\n\n      String[] args = new String[] {\"-zkhost\", zkServer.getZkAddress(), \"-cmd\", \"updateacls\", \"/\"};\n      ZkCLI.main(args);\n    } finally {\n      // Need to clear these before we open the next SolrZkClient\n      System.clearProperty(SolrZkClient.ZK_ACL_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_USERNAME_VM_PARAM_NAME);\n      System.clearProperty(VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_DIGEST_READONLY_PASSWORD_VM_PARAM_NAME);\n    }\n\n    boolean excepted = false;\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractDistribZkTestBase.DEFAULT_CONNECTION_TIMEOUT)) {\n      zkClient.getData(\"/\", null, null, true);\n    } catch (KeeperException.NoAuthException e) {\n      excepted = true;\n    }\n    assertTrue(\"Did not fail to read.\", excepted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}