{"path":"solr/core/src/java/org/apache/solr/servlet/RateLimitManager#trySlotBorrowing(String).mjava","commits":[{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/RateLimitManager#trySlotBorrowing(String).mjava","pathOld":"/dev/null","sourceNew":"  /* For a rejected request type, do the following:\n   * For each request rate limiter whose type that is not of the type of the request which got rejected,\n   * check if slot borrowing is enabled. If enabled, try to acquire a slot.\n   * If allotted, return else try next request type.\n   *\n   * @lucene.experimental -- Can cause slots to be blocked if a request borrows a slot and is itself long lived.\n   */\n  private RequestRateLimiter.SlotMetadata trySlotBorrowing(String requestType) {\n    for (Map.Entry<String, RequestRateLimiter> currentEntry : requestRateLimiterMap.entrySet()) {\n      RequestRateLimiter.SlotMetadata result = null;\n      RequestRateLimiter requestRateLimiter = currentEntry.getValue();\n\n      // Cant borrow from ourselves\n      if (requestRateLimiter.getRateLimiterConfig().requestType.toString().equals(requestType)) {\n        continue;\n      }\n\n      if (requestRateLimiter.getRateLimiterConfig().isSlotBorrowingEnabled) {\n        if (log.isWarnEnabled()) {\n          String msg = \"WARN: Experimental feature slots borrowing is enabled for request rate limiter type \" +\n              requestRateLimiter.getRateLimiterConfig().requestType.toString();\n\n          log.warn(msg);\n        }\n\n        try {\n          result = requestRateLimiter.allowSlotBorrowing();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n\n        if (result == null) {\n          throw new IllegalStateException(\"Returned metadata object is null\");\n        }\n\n        if (result.isReleasable()) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c99002731351c8c955238845b0038682148eec53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c99002731351c8c955238845b0038682148eec53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c99002731351c8c955238845b0038682148eec53"],"c99002731351c8c955238845b0038682148eec53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}