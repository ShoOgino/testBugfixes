{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateVersionsAreValid(String).mjava","commits":[{"id":"c9d03b984af6c0085aa4985799de48f8c203844a","date":1498707843,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateVersionsAreValid(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateIsValid(String).mjava","sourceNew":"  /** Returns null if the state ({@link CloudSolrClient#STATE_VERSION}) is good; otherwise returns state problems. */\n  private Map<String, Integer> checkStateVersionsAreValid(String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if (status != null) {\n            if (result == null) result = new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private Map<String, Integer> checkStateIsValid(String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if (status != null) {\n            if (result == null) result = new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateVersionsAreValid(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null if the state ({@link CloudSolrClient#STATE_VERSION}) is good; otherwise returns state problems. */\n  private Map<String, Integer> checkStateVersionsAreValid(String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if (status != null) {\n            if (result == null) result = new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#checkStateVersionsAreValid(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns null if the state ({@link CloudSolrClient#STATE_VERSION}) is good; otherwise returns state problems. */\n  private Map<String, Integer> checkStateVersionsAreValid(String stateVer) {\n    Map<String, Integer> result = null;\n    String[] pairs;\n    if (stateVer != null && !stateVer.isEmpty() && cores.isZooKeeperAware()) {\n      // many have multiple collections separated by |\n      pairs = StringUtils.split(stateVer, '|');\n      for (String pair : pairs) {\n        String[] pcs = StringUtils.split(pair, ':');\n        if (pcs.length == 2 && !pcs[0].isEmpty() && !pcs[1].isEmpty()) {\n          Integer status = cores.getZkController().getZkStateReader().compareStateVersions(pcs[0], Integer.parseInt(pcs[1]));\n          if (status != null) {\n            if (result == null) result = new HashMap<>();\n            result.put(pcs[0], status);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c9d03b984af6c0085aa4985799de48f8c203844a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9d03b984af6c0085aa4985799de48f8c203844a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c9d03b984af6c0085aa4985799de48f8c203844a","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c9d03b984af6c0085aa4985799de48f8c203844a":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}