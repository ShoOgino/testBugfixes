{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !termArrays.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      \n      PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[termArrays.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum termsEnum = fieldTerms.iterator(null);\n\n      for (int pos=0; pos<postingsFreqs.length; pos++) {\n        Term[] terms = termArrays.get(pos);\n\n        final DocsAndPositionsEnum postingsEnum;\n        int docFreq;\n\n        if (terms.length > 1) {\n          postingsEnum = new UnionDocsAndPositionsEnum(liveDocs, context, terms, termContexts, termsEnum);\n\n          // coarse -- this overcounts since a given doc can\n          // have more than one term:\n          docFreq = 0;\n          for(int termIdx=0;termIdx<terms.length;termIdx++) {\n            final Term term = terms[termIdx];\n            TermState termState = termContexts.get(term).get(context.ord);\n            if (termState == null) {\n              // Term not in reader\n              continue;\n            }\n            termsEnum.seekExact(term.bytes(), termState);\n            docFreq += termsEnum.docFreq();\n          }\n\n          if (docFreq == 0) {\n            // None of the terms are in this reader\n            return null;\n          }\n        } else {\n          final Term term = terms[0];\n          TermState termState = termContexts.get(term).get(context.ord);\n          if (termState == null) {\n            // Term not in reader\n            return null;\n          }\n          termsEnum.seekExact(term.bytes(), termState);\n          postingsEnum = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n          if (postingsEnum == null) {\n            // term does exist, but has no positions\n            assert termsEnum.docs(liveDocs, null, DocsEnum.FLAG_NONE) != null: \"termstate found but no term exists in reader\";\n            throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n          }\n\n          docFreq = termsEnum.docFreq();\n        }\n\n        postingsFreqs[pos] = new PhraseQuery.PostingsAndFreq(postingsEnum, docFreq, positions.get(pos).intValue(), terms);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\n        return new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n      } else {\n        return new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3d4e5ccb1c589a2962235f13b65cc725050818d9":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}