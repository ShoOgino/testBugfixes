{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","commits":[{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    SimpleFacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    Map<FacetLabel,CategoryListParams> paramsMap = new HashMap<FacetLabel,CategoryListParams>();\n    paramsMap.put(new FacetLabel(\"Band\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new FacetLabel(\"Composer\"), new CategoryListParams(\"$music\"));\n    paramsMap.put(new FacetLabel(\"Author\"), new CategoryListParams(\"$literature\"));\n    PerDimensionIndexingParams iParams = new PerDimensionIndexingParams(paramsMap);\n\n    seedIndex(iw, tw, iParams);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector facetsCollector = performSearch(iParams, tr, ir, searcher);\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facetsCollector);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#testSomeSameSomeDifferent().mjava","sourceNew":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    FacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testSomeSameSomeDifferent() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // create and open an index writer\n    RandomIndexWriter iw = new RandomIndexWriter(random(), indexDir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    // create and open a taxonomy writer\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir, OpenMode.CREATE);\n\n    FacetsConfig config = getConfig(tw);\n    config.setIndexFieldName(\"Band\", \"$music\");\n    config.setIndexFieldName(\"Composer\", \"$music\");\n    config.setIndexFieldName(\"Author\", \"$literature\");\n    seedIndex(iw, config);\n\n    IndexReader ir = iw.getReader();\n    tw.commit();\n\n    // prepare index reader and taxonomy.\n    TaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // prepare searcher to search against\n    IndexSearcher searcher = newSearcher(ir);\n\n    SimpleFacetsCollector sfc = performSearch(tr, ir, searcher);\n\n    Map<String,Facets> facetsMap = new HashMap<String,Facets>();\n    Facets facets2 = getTaxonomyFacetCounts(tr, config, sfc, \"$music\");\n    facetsMap.put(\"Band\", facets2);\n    facetsMap.put(\"Composer\", facets2);\n    facetsMap.put(\"Author\", getTaxonomyFacetCounts(tr, config, sfc, \"$literature\"));\n    Facets facets = new MultiFacets(facetsMap, getTaxonomyFacetCounts(tr, config, sfc));\n\n    // Obtain facets results and hand-test them\n    assertCorrectResults(facets);\n    assertOrdinalsExist(\"$music\", ir);\n    assertOrdinalsExist(\"$literature\", ir);\n\n    IOUtils.close(tr, ir, iw, tw);\n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}