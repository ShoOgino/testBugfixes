{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","commits":[{"id":"926350ae128ddfe1eb7570ed50a036f6bd5c66a6","date":1447286925,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testHashJoinStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testHashJoinStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testHashJoinStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testHashJoinStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84bc3a0dd894d2448badac45302b79cc2e445214","date":1462494639,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n    assertOrder(tuples, 1, 1, 2, 2, 15, 15, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2233462ade0e629affa69a6f1e8d0205e4d6e596","date":1462534852,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n    assertOrder(tuples, 1, 1, 2, 2, 15, 15, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n    assertOrder(tuples, 1, 1, 2, 2, 15, 15, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  private void testHashJoinStream() throws Exception {\n\n    indexr(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\"); // 8, 9\n    indexr(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\");\n    indexr(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\"); // 10\n    indexr(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\"); // 11\n    indexr(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\"); // 12\n    indexr(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\");\n    indexr(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\"); // 14\n\n    indexr(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\"); // 1,15\n    indexr(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\"); // 3\n    indexr(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\"); // 4\n    indexr(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\"); // 5\n    indexr(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\"); \n    indexr(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\"); // 7\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n    assertOrder(tuples, 1, 1, 2, 2, 15, 15, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 1,1,15,15,3,4,5,7);\n\n    // Basic desc\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n                                                + \"on=\\\"join1_i, join2_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 8);\n    assertOrder(tuples, 7,3,4,5,1,1,15,15);\n    \n    // Results in both searches, no join matches\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n                                                + \"on=\\\"ident_s\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);    \n    assert(tuples.size() == 0);\n    \n    // Basic test with \"on\" mapping\n    expression = StreamExpressionParser.parse(\"hashJoin(\"\n                                                + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n                                                + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n                                                + \"on=\\\"join1_i=join3_i\\\")\");\n    stream = new HashJoinStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(17, tuples.size());\n\n    //Does a lexical sort\n    assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testHashJoinStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHashJoinStream().mjava","sourceNew":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHashJoinStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"hashJoin\", HashJoinStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 1, 1, 15, 15, 3, 4, 5, 7);\n\n      // Basic desc\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join2_s,ident_s\\\", sort=\\\"join1_i desc, join2_s asc\\\"),\"\n          + \"on=\\\"join1_i, join2_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 8);\n      assertOrder(tuples, 7, 3, 4, 5, 1, 1, 15, 15);\n\n      // Results in both searches, no join matches\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"ident_s asc\\\"),\"\n          + \"on=\\\"ident_s\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n      // Basic test with \"on\" mapping\n      expression = StreamExpressionParser.parse(\"hashJoin(\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc, id asc\\\"),\"\n          + \"hashed=search(collection1, q=\\\"side_s:right\\\", fl=\\\"join1_i,join3_i,ident_s\\\", sort=\\\"join1_i asc, join3_i asc\\\"),\"\n          + \"on=\\\"join1_i=join3_i\\\")\");\n      stream = new HashJoinStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(17, tuples.size());\n\n      //Does a lexical sort\n      assertOrder(tuples, 1, 1, 15, 15, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"915201312eef398482b3dffe8a297e1809f3b29a":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"b940572a59da1b42b6c20ab5278155b12816807a":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["73450c0955930295d34703e7ddbfc6973b7a121a","84bc3a0dd894d2448badac45302b79cc2e445214"],"84bc3a0dd894d2448badac45302b79cc2e445214":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","915201312eef398482b3dffe8a297e1809f3b29a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["915201312eef398482b3dffe8a297e1809f3b29a"],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["2233462ade0e629affa69a6f1e8d0205e4d6e596","84bc3a0dd894d2448badac45302b79cc2e445214"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"915201312eef398482b3dffe8a297e1809f3b29a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["915201312eef398482b3dffe8a297e1809f3b29a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"84bc3a0dd894d2448badac45302b79cc2e445214":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}