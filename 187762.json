{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","commits":[{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#fillOpenTrace(IOException,String,boolean).mjava","sourceNew":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","sourceOld":"  // sets the cause of the incoming ioe to be the stack\n  // trace when the offending file name was opened\n  private synchronized IOException fillOpenTrace(IOException ioe, String name, boolean input) {\n    for(Map.Entry<Closeable,Exception> ent : openFileHandles.entrySet()) {\n      if (input && ent.getKey() instanceof MockIndexInputWrapper && ((MockIndexInputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      } else if (!input && ent.getKey() instanceof MockIndexOutputWrapper && ((MockIndexOutputWrapper) ent.getKey()).name.equals(name)) {\n        ioe.initCause(ent.getValue());\n        break;\n      }\n    }\n    return ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a186ae8733084223c22044e935e4ef848a143d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a186ae8733084223c22044e935e4ef848a143d1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["2a186ae8733084223c22044e935e4ef848a143d1"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}