{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","commits":[{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a678060dc71c218831c2b3b18d0064573c6a968d","date":1455918109,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  private PeerSync.PeerSyncResult syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    PeerSync.PeerSyncResult result = null;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      result = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n      success = result.isSuccess();\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return result == null ? PeerSync.PeerSyncResult.failure() : result;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":["08404c494c3d7f0f23c26191b824a38ac9384877","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  private PeerSync.PeerSyncResult syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    PeerSync.PeerSyncResult result = null;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      result = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n      success = result.isSuccess();\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return result == null ? PeerSync.PeerSyncResult.failure() : result;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  private PeerSync.PeerSyncResult syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    PeerSync.PeerSyncResult result = null;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      result = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n      success = result.isSuccess();\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return result == null ? PeerSync.PeerSyncResult.failure() : result;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","sourceNew":"  private PeerSync.PeerSyncResult syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n    boolean success = false;\n    PeerSync.PeerSyncResult result = null;\n    assert core != null;\n    assert core.getCoreDescriptor() != null;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      result = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n      success = result.isSuccess();\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return result == null ? PeerSync.PeerSyncResult.failure() : result;\n  }\n\n","sourceOld":"  private PeerSync.PeerSyncResult syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    PeerSync.PeerSyncResult result = null;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return PeerSync.PeerSyncResult.failure();\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      result = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n      success = result.isSuccess();\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return PeerSync.PeerSyncResult.failure();\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor(), core.getUpdateHandler().getUpdateLog().getNumRecordsToKeep());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return result == null ? PeerSync.PeerSyncResult.failure() : result;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","a6378064655e76cd7b908b1cab4ce425b384b508","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a678060dc71c218831c2b3b18d0064573c6a968d","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["a678060dc71c218831c2b3b18d0064573c6a968d"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a678060dc71c218831c2b3b18d0064573c6a968d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a678060dc71c218831c2b3b18d0064573c6a968d":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["a678060dc71c218831c2b3b18d0064573c6a968d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a678060dc71c218831c2b3b18d0064573c6a968d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}