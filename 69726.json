{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","sourceNew":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","sourceNew":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","sourceNew":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#testDistribSearch().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDistribSearch() throws Exception {\n    if (fixShardCount) {\n      createServers(shardCount);\n      RandVal.uniqueValues = new HashSet(); //reset random values\n      doTest();\n      destroyServers();\n    } else {\n      for (int nServers = 1; nServers < shardCount; nServers++) {\n        createServers(nServers);\n        RandVal.uniqueValues = new HashSet(); //reset random values\n        doTest();\n        destroyServers();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}