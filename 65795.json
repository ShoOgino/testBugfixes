{"path":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF_POSITIONS;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    if (schema.getVersion()< 1.1f) properties |= MULTIVALUED;\n    if (schema.getVersion()> 1.1f) properties |= OMIT_TF_POSITIONS;\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55688cada84e99928d155229fc2768df65a45bdb","date":1306274128,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setArgs(IndexSchema,Map[String,String]).mjava","sourceNew":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","sourceOld":"  // Handle additional arguments...\n  void setArgs(IndexSchema schema, Map<String,String> args) {\n    // default to STORED, INDEXED, OMIT_TF_POSITIONS and MULTIVALUED depending on schema version\n    properties = (STORED | INDEXED);\n    float schemaVersion = schema.getVersion();\n    if (schemaVersion < 1.1f) properties |= MULTIVALUED;\n    if (schemaVersion > 1.1f) properties |= OMIT_TF_POSITIONS;\n    if (schemaVersion < 1.3) {\n      args.remove(\"compressThreshold\");\n    }\n\n    this.args=args;\n    Map<String,String> initArgs = new HashMap<String,String>(args);\n\n    trueProperties = FieldProperties.parseProperties(initArgs,true);\n    falseProperties = FieldProperties.parseProperties(initArgs,false);\n\n    properties &= ~falseProperties;\n    properties |= trueProperties;\n\n    for (String prop : FieldProperties.propertyNames) initArgs.remove(prop);\n\n    init(schema, initArgs);\n\n    String positionInc = initArgs.get(\"positionIncrementGap\");\n    if (positionInc != null) {\n      Analyzer analyzer = getAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      analyzer = getQueryAnalyzer();\n      if (analyzer instanceof SolrAnalyzer) {\n        ((SolrAnalyzer)analyzer).setPositionIncrementGap(Integer.parseInt(positionInc));\n      } else {\n        throw new RuntimeException(\"Can't set positionIncrementGap on custom analyzer \" + analyzer.getClass());\n      }\n      initArgs.remove(\"positionIncrementGap\");\n    }\n\n    final String codec = initArgs.get(\"codec\");\n    if (codec != null) {\n      this.codec = codec;\n      initArgs.remove(\"codec\");\n    }\n\n    if (initArgs.size() > 0) {\n      throw new RuntimeException(\"schema fieldtype \" + typeName\n              + \"(\"+ this.getClass().getName() + \")\"\n              + \" invalid arguments:\" + initArgs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["55688cada84e99928d155229fc2768df65a45bdb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","55688cada84e99928d155229fc2768df65a45bdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["55688cada84e99928d155229fc2768df65a45bdb"],"55688cada84e99928d155229fc2768df65a45bdb":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["1da8d55113b689b06716246649de6f62430f15c0","55688cada84e99928d155229fc2768df65a45bdb"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","55688cada84e99928d155229fc2768df65a45bdb","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"55688cada84e99928d155229fc2768df65a45bdb":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}