{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["84b590669deb3d3a471cec6cb13b104b2ee94418","efb7a19703a037c29e30440260d393500febc1f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"efb7a19703a037c29e30440260d393500febc1f4":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["efb7a19703a037c29e30440260d393500febc1f4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["85a883878c0af761245ab048babc63d099f835f3","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","efb7a19703a037c29e30440260d393500febc1f4","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}