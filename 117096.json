{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","commits":[{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","pathOld":"/dev/null","sourceNew":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 25;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    \n    final String putFieldName = \"newfieldPutThread\";\n    final String postFieldName = \"newfieldPostThread\";\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      int postHarness = r.nextInt(restTestHarnesses.size());\n      RestTestHarness publisher = restTestHarnesses.get(postHarness);\n      PutPostThread postThread = new PutPostThread(publisher, postFieldName + numAddFieldPosts++, false);\n      postThread.start();\n\n      int putHarness = r.nextInt(restTestHarnesses.size());\n      publisher = restTestHarnesses.get(putHarness);\n      PutPostThread putThread = new PutPostThread(publisher, putFieldName + numAddFieldPuts++, true);\n      putThread.start();\n      postThread.join();\n      putThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, putFieldName, \n                                                             numAddFieldPosts, postFieldName);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 25;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 25;\n    int numAddFieldPuts = 0;\n    int numAddFieldPosts = 0;\n    \n    final String putFieldName = \"newfieldPutThread\";\n    final String postFieldName = \"newfieldPostThread\";\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      int postHarness = r.nextInt(restTestHarnesses.size());\n      RestTestHarness publisher = restTestHarnesses.get(postHarness);\n      PutPostThread postThread = new PutPostThread(publisher, postFieldName + numAddFieldPosts++, false);\n      postThread.start();\n\n      int putHarness = r.nextInt(restTestHarnesses.size());\n      publisher = restTestHarnesses.get(putHarness);\n      PutPostThread putThread = new PutPostThread(publisher, putFieldName + numAddFieldPuts++, true);\n      putThread.start();\n      postThread.join();\n      putThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(numAddFieldPuts, putFieldName, \n                                                             numAddFieldPosts, postFieldName);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 25;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8c645ec119d18a65174f4cbb1c927792ff814","date":1500897120,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":null,"sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":null,"sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":null,"sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","pathOld":"/dev/null","sourceNew":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c717efc76ccf2ea435c52fa36a4774056fe8b4d4","date":1501575440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#schemaLockTest().mjava","sourceNew":null,"sourceOld":"  private void schemaLockTest() throws Exception {\n\n    // First, add a bunch of fields via PUT and POST, as well as copyFields,\n    // but do it fast enough and verify shards' schemas after all of them are added\n    int numFields = 5;\n    Info info = new Info(\"Thread\");\n\n    for (int i = 0; i <= numFields ; ++i) {\n      // System.err.println(\"###ITERATION: \" + i);\n      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);\n      postFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);\n      putFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);\n      postDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);\n      putDynamicFieldThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);\n      postFieldTypeThread.start();\n\n      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);\n      putFieldTypeThread.start();\n\n      postFieldThread.join();\n      putFieldThread.join();\n      postDynamicFieldThread.join();\n      putDynamicFieldThread.join();\n      postFieldTypeThread.join();\n      putFieldTypeThread.join();\n\n      String[] expectedAddFields = getExpectedFieldResponses(info);\n      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);\n      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);\n\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      long startTime = System.nanoTime();\n      String request = null;\n      String response = null;\n      String result = null;\n\n      while ( ! success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        Thread.sleep(10);\n\n        // int j = 0;\n        for (RestTestHarness client : restTestHarnesses) {\n          // System.err.println(\"###CHECKING HARNESS: \" + j++ + \" for iteration: \" + i);\n\n          // verify addFieldPuts and addFieldPosts\n          request = \"/schema/fields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFields);\n          \n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          // verify addDynamicFieldPuts and addDynamicFieldPosts\n          request = \"/schema/dynamicfields?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n          request = \"/schema/fieldtypes?wt=xml\";\n          response = client.query(request);\n          //System.err.println(\"###RESPONSE: \" + response);\n          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);\n\n          if (result != null) {\n            // System.err.println(\"###FAILURE!\");\n            break;\n          }\n\n        }\n        success = (result == null);\n      }\n      if ( ! success) {\n        String msg = \"QUERY FAILED: xpath=\" + result + \"  request=\" + request + \"  response=\" + response;\n        log.error(msg);\n        fail(msg);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a52341299179de5479672f7cf518bf4b173f34b3"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["bdf16ebe435fc9daea90a73b8683ff001c6d3523","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["344b0840364d990b29b97467bfcc766ff8325d11"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"344b0840364d990b29b97467bfcc766ff8325d11":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a52341299179de5479672f7cf518bf4b173f34b3","c3a8c645ec119d18a65174f4cbb1c927792ff814","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}