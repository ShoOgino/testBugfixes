{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","commits":[{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n    \n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n    \n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n    \n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n    \n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n    \n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n    \n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8f0529666139e562ee655d544b667bfedab70c7","date":1394717900,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      res.setResponse(createNewSolrServer(\"\", baseUrl).request(request));\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos, String collectionName, Map<String,Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer numReplicas = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n    \n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n    \n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(server.request(request));\n      server.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n\n      res.setResponse(createNewSolrServer(\"\", baseUrl).request(request));\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":["e8f0529666139e562ee655d544b667bfedab70c7","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"025fa7514432c0e36c3b3a945bd87b643d5db43b","date":1396217098,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n        server.shutdown();\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(server.request(request));\n      server.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n        server.shutdown();\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(server.request(request));\n      server.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cbf075846889e7dab27a7ad7f0b62225ba66cf","date":1397251910,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n        server.shutdown();\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (useExternalCollections()) {\n      log.info(\"Creating external collection: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (useExternalCollections()) {\n      log.info(\"Creating external collection: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(numShards==null){\n      numShards = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrClient,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,Map[String,Object],SolrServer,String).mjava","sourceNew":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrClient client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(clientIndex));\n      SolrClient adminClient = createNewSolrClient(\"\", baseUrl);\n      try {\n        res.setResponse(adminClient.request(request));\n      } finally {\n        if (adminClient != null) adminClient.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  // TODO: Use CollectionAdminRequest#createCollection() instead of a raw request\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos, String collectionName, Map<String, Object> collectionProps, SolrServer client, String confSetName)  throws SolrServerException, IOException{\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n    for (Map.Entry<String, Object> entry : collectionProps.entrySet()) {\n      if(entry.getValue() !=null) params.set(entry.getKey(), String.valueOf(entry.getValue()));\n    }\n    Integer numShards = (Integer) collectionProps.get(NUM_SLICES);\n    if(numShards==null){\n      String shardNames = (String) collectionProps.get(SHARDS_PROP);\n      numShards = StrUtils.splitSmart(shardNames,',').size();\n    }\n    Integer replicationFactor = (Integer) collectionProps.get(REPLICATION_FACTOR);\n    if(replicationFactor==null){\n      replicationFactor = (Integer) OverseerCollectionProcessor.COLL_PROPS.get(REPLICATION_FACTOR);\n    }\n\n    if (confSetName != null) {\n      params.set(\"collection.configName\", confSetName);\n    }\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(replicationFactor);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    if (getStateFormat() == 2) {\n      log.info(\"Creating collection with stateFormat=2: \" + collectionName);\n      params.set(DocCollection.STATE_FORMAT, \"2\");\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(clientIndex));\n      SolrServer server = createNewSolrServer(\"\", baseUrl);\n      try {\n        res.setResponse(server.request(request));\n      } finally {\n        if (server != null) server.shutdown();\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bafca15d8e408346a67f4282ad1143b88023893b":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"35cbf075846889e7dab27a7ad7f0b62225ba66cf":["025fa7514432c0e36c3b3a945bd87b643d5db43b"],"e8f0529666139e562ee655d544b667bfedab70c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["e8f0529666139e562ee655d544b667bfedab70c7"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["35cbf075846889e7dab27a7ad7f0b62225ba66cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e8f0529666139e562ee655d544b667bfedab70c7"],"025fa7514432c0e36c3b3a945bd87b643d5db43b":["5eb2511ababf862ea11e10761c70ee560cd84510","35cbf075846889e7dab27a7ad7f0b62225ba66cf"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9279b175e5e66258442d2123a50f052219a9cc1b":["bafca15d8e408346a67f4282ad1143b88023893b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"35cbf075846889e7dab27a7ad7f0b62225ba66cf":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"e8f0529666139e562ee655d544b667bfedab70c7":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["5eb2511ababf862ea11e10761c70ee560cd84510","025fa7514432c0e36c3b3a945bd87b643d5db43b"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}