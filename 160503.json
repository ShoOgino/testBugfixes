{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs(), r.numDeletedDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs(), r.numDeletedDocs()));\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    try {\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs(), r.numDeletedDocs()));\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c95a819869502635864dac0a788f874787e3395b","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs(), r.numDeletedDocs()));\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(new MergeState.IndexReaderAndLiveDocs(r, r.getLiveDocs(), r.numDeletedDocs()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.getTopReaderContext().leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   * @param reader\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  final void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#add(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add an IndexReader to the collection of readers that are to be merged\n   */\n  void add(IndexReader reader) {\n    for (final AtomicReaderContext ctx : reader.leaves()) {\n      final AtomicReader r = ctx.reader();\n      mergeState.readers.add(r);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"c95a819869502635864dac0a788f874787e3395b":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["c95a819869502635864dac0a788f874787e3395b","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"55eeb2534cd53d2a985669829df942468ebf5314":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","55eeb2534cd53d2a985669829df942468ebf5314"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["55eeb2534cd53d2a985669829df942468ebf5314","d4d69c535930b5cce125cff868d40f6373dc27d4"],"c95a819869502635864dac0a788f874787e3395b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","fe33227f6805edab2036cbb80645cc4e2d1fa424","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"55eeb2534cd53d2a985669829df942468ebf5314":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}