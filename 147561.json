{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"/dev/null","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(replica, new Violation.ViolationMeta().withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac52b67f02dde8ba4b452266fdf8c0e15442c856","date":1510634873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(replica, new Violation.ViolationMeta().withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1be2065e7825e7d62009ea5339f317cb1274f9a","date":1510664015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if(!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if(!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.isPerNodeValue && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.isPerNodeValue && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.isPerNodeValue && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.isPerNodeValue && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        row.forEachReplica(replica -> {\n          if (ctx.clause.replica.isPass(0) && !ctx.clause.tag.isPass(row)) return;\n          if (!ctx.clause.replica.isPass(0) && ctx.clause.tag.isPass(row)) return;\n          if (!ctx.currentViolation.matchShard(replica.getShard())) return;\n          if (!ctx.clause.collection.isPass(ctx.currentViolation.coll) || !ctx.clause.shard.isPass(ctx.currentViolation.shard))\n            return;\n          ctx.currentViolation.addReplica(new ReplicaInfoAndErr(replica).withDelta(ctx.clause.tag.delta(row.getVal(ctx.clause.tag.name))));\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.meta.isNodeSpecificVal() && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.isPerNodeValue && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":"    @Override\n    public void addViolatingReplicas(ViolationCtx ctx) {\n      if (impl != null) {\n        impl.addViolatingReplicas(ctx);\n        return;\n      }\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.meta.isNodeSpecificVal() && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","sourceOld":"    public void addViolatingReplicas(ViolationCtx ctx) {\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.meta.isNodeSpecificVal() && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion.ConditionType#addViolatingReplicas(ViolationCtx).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addViolatingReplicas(ViolationCtx ctx) {\n      if (impl != null) {\n        impl.addViolatingReplicas(ctx);\n        return;\n      }\n      for (Row row : ctx.allRows) {\n        if (ctx.clause.tag.varType.meta.isNodeSpecificVal() && !row.node.equals(ctx.tagKey)) continue;\n        collectViolatingReplicas(ctx, row);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["7d6bec22994bec86702ad05304ae983f7be5b5a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["27639bb5e041490ce599065875dd2f6d8beef62a"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"27639bb5e041490ce599065875dd2f6d8beef62a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}