{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492bacefe65f87b305a1988c63ff7bb5c8fcef75","date":1271907901,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion).\n   *\n   *  <p> In addition, you can call this method to delete\n   *  unreferenced index commits. This might be useful if you\n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion).\n   *\n   *  <p> In addition, you can call this method to delete\n   *  unreferenced index commits. This might be useful if you\n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   *\n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). \n   *  \n   *  <p> In addition, you can call this method to delete \n   *  unreferenced index commits. This might be useful if you \n   *  are using an {@link IndexDeletionPolicy} which holds\n   *  onto index commits until some criteria are met, but those\n   *  commits are no longer needed. Otherwise, those commits will\n   *  be deleted the next time commit() is called.\n   */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    ensureOpen(false);\n    deleter.deletePendingFiles();\n    deleter.revisitPolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","492bacefe65f87b305a1988c63ff7bb5c8fcef75"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["492bacefe65f87b305a1988c63ff7bb5c8fcef75","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["492bacefe65f87b305a1988c63ff7bb5c8fcef75","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["492bacefe65f87b305a1988c63ff7bb5c8fcef75","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["492bacefe65f87b305a1988c63ff7bb5c8fcef75","492bacefe65f87b305a1988c63ff7bb5c8fcef75"],"492bacefe65f87b305a1988c63ff7bb5c8fcef75":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"492bacefe65f87b305a1988c63ff7bb5c8fcef75":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["492bacefe65f87b305a1988c63ff7bb5c8fcef75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}