{"path":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","commits":[{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","pathOld":"/dev/null","sourceNew":"  PriorityQueue<ReadersAndUpdates> getReadersByRam() {\n    // Sort by largest ramBytesUsed:\n    PriorityQueue<ReadersAndUpdates> queue = new PriorityQueue<>(readerMap.size(),\n        (a, b) -> Long.compare(b.ramBytesUsed.get(), a.ramBytesUsed.get()));\n    synchronized (this) {\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        queue.add(rld);\n      }\n    }\n    return queue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["055d638a4196dbe214e915652b491642cfb7652b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"055d638a4196dbe214e915652b491642cfb7652b","date":1529056889,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","sourceNew":"  /**\n   * Returns a list of all currently maintained ReadersAndUpdates sorted by it's ram consumption largest to smallest.\n   * This list can also contain readers that don't consume any ram at this point ie. don't have any updates buffered.\n   */\n  synchronized List<ReadersAndUpdates> getReadersByRam() {\n    class RamRecordingHolder {\n      final ReadersAndUpdates updates;\n      final long ramBytesUsed;\n      RamRecordingHolder(ReadersAndUpdates updates) {\n        this.updates = updates;\n        this.ramBytesUsed = updates.ramBytesUsed.get();\n      }\n    }\n    final ArrayList<RamRecordingHolder> readersByRam;\n    synchronized (this) {\n      if (readerMap.isEmpty()) {\n        return Collections.emptyList();\n      }\n      readersByRam = new ArrayList<>(readerMap.size());\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        // we have to record the ram usage once and then sort\n        // since the ram usage can change concurrently and that will confuse the sort or hit an assertion\n        // the we can acquire here is not enough we would need to lock all ReadersAndUpdates to make sure it doesn't\n        // change\n        readersByRam.add(new RamRecordingHolder(rld));\n      }\n    }\n    // Sort this outside of the lock by largest ramBytesUsed:\n    CollectionUtil.introSort(readersByRam, (a, b) -> Long.compare(b.ramBytesUsed, a.ramBytesUsed));\n    return Collections.unmodifiableList(readersByRam.stream().map(h -> h.updates).collect(Collectors.toList()));\n  }\n\n","sourceOld":"  PriorityQueue<ReadersAndUpdates> getReadersByRam() {\n    // Sort by largest ramBytesUsed:\n    PriorityQueue<ReadersAndUpdates> queue = new PriorityQueue<>(readerMap.size(),\n        (a, b) -> Long.compare(b.ramBytesUsed.get(), a.ramBytesUsed.get()));\n    synchronized (this) {\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        queue.add(rld);\n      }\n    }\n    return queue;\n  }\n\n","bugFix":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","sourceNew":"  /**\n   * Returns a list of all currently maintained ReadersAndUpdates sorted by it's ram consumption largest to smallest.\n   * This list can also contain readers that don't consume any ram at this point ie. don't have any updates buffered.\n   */\n  synchronized List<ReadersAndUpdates> getReadersByRam() {\n    class RamRecordingHolder {\n      final ReadersAndUpdates updates;\n      final long ramBytesUsed;\n      RamRecordingHolder(ReadersAndUpdates updates) {\n        this.updates = updates;\n        this.ramBytesUsed = updates.ramBytesUsed.get();\n      }\n    }\n    final ArrayList<RamRecordingHolder> readersByRam;\n    synchronized (this) {\n      if (readerMap.isEmpty()) {\n        return Collections.emptyList();\n      }\n      readersByRam = new ArrayList<>(readerMap.size());\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        // we have to record the ram usage once and then sort\n        // since the ram usage can change concurrently and that will confuse the sort or hit an assertion\n        // the we can acquire here is not enough we would need to lock all ReadersAndUpdates to make sure it doesn't\n        // change\n        readersByRam.add(new RamRecordingHolder(rld));\n      }\n    }\n    // Sort this outside of the lock by largest ramBytesUsed:\n    CollectionUtil.introSort(readersByRam, (a, b) -> Long.compare(b.ramBytesUsed, a.ramBytesUsed));\n    return Collections.unmodifiableList(readersByRam.stream().map(h -> h.updates).collect(Collectors.toList()));\n  }\n\n","sourceOld":"  PriorityQueue<ReadersAndUpdates> getReadersByRam() {\n    // Sort by largest ramBytesUsed:\n    PriorityQueue<ReadersAndUpdates> queue = new PriorityQueue<>(readerMap.size(),\n        (a, b) -> Long.compare(b.ramBytesUsed.get(), a.ramBytesUsed.get()));\n    synchronized (this) {\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        queue.add(rld);\n      }\n    }\n    return queue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderPool#getReadersByRam().mjava","sourceNew":"  /**\n   * Returns a list of all currently maintained ReadersAndUpdates sorted by it's ram consumption largest to smallest.\n   * This list can also contain readers that don't consume any ram at this point ie. don't have any updates buffered.\n   */\n  synchronized List<ReadersAndUpdates> getReadersByRam() {\n    class RamRecordingHolder {\n      final ReadersAndUpdates updates;\n      final long ramBytesUsed;\n      RamRecordingHolder(ReadersAndUpdates updates) {\n        this.updates = updates;\n        this.ramBytesUsed = updates.ramBytesUsed.get();\n      }\n    }\n    final ArrayList<RamRecordingHolder> readersByRam;\n    synchronized (this) {\n      if (readerMap.isEmpty()) {\n        return Collections.emptyList();\n      }\n      readersByRam = new ArrayList<>(readerMap.size());\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        // we have to record the ram usage once and then sort\n        // since the ram usage can change concurrently and that will confuse the sort or hit an assertion\n        // the we can acquire here is not enough we would need to lock all ReadersAndUpdates to make sure it doesn't\n        // change\n        readersByRam.add(new RamRecordingHolder(rld));\n      }\n    }\n    // Sort this outside of the lock by largest ramBytesUsed:\n    CollectionUtil.introSort(readersByRam, (a, b) -> Long.compare(b.ramBytesUsed, a.ramBytesUsed));\n    return Collections.unmodifiableList(readersByRam.stream().map(h -> h.updates).collect(Collectors.toList()));\n  }\n\n","sourceOld":"  PriorityQueue<ReadersAndUpdates> getReadersByRam() {\n    // Sort by largest ramBytesUsed:\n    PriorityQueue<ReadersAndUpdates> queue = new PriorityQueue<>(readerMap.size(),\n        (a, b) -> Long.compare(b.ramBytesUsed.get(), a.ramBytesUsed.get()));\n    synchronized (this) {\n      for (ReadersAndUpdates rld : readerMap.values()) {\n        queue.add(rld);\n      }\n    }\n    return queue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1926100d9b67becc9701c54266fee3ba7878a5f0","055d638a4196dbe214e915652b491642cfb7652b"],"055d638a4196dbe214e915652b491642cfb7652b":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1926100d9b67becc9701c54266fee3ba7878a5f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["055d638a4196dbe214e915652b491642cfb7652b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1926100d9b67becc9701c54266fee3ba7878a5f0","055d638a4196dbe214e915652b491642cfb7652b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"055d638a4196dbe214e915652b491642cfb7652b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","055d638a4196dbe214e915652b491642cfb7652b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}