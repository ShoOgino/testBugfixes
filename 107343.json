{"path":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Iterator#pforDecompress(byte).mjava","commits":[{"id":"a2f37c70d502802371a3ac864572b2ffc7730ffc","date":1377155841,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Iterator#pforDecompress(byte).mjava","pathOld":"/dev/null","sourceNew":"    void pforDecompress(byte token) {\n      final int bitsPerValue = token & 0x1F;\n      if (bitsPerValue == 0) {\n        Arrays.fill(nextDocs, 0);\n      } else {\n        DECODERS[bitsPerValue].decode(data, offset, nextDocs, 0, ITERATIONS[bitsPerValue]);\n        offset += BYTE_BLOCK_COUNTS[bitsPerValue];\n      }\n      if ((token & HAS_EXCEPTIONS) != 0) {\n        // there are exceptions\n        final int numExceptions = data[offset++];\n        final int bitsPerException = data[offset++];\n        final int numIterations = (numExceptions + DECODERS[bitsPerException].byteValueCount() - 1) / DECODERS[bitsPerException].byteValueCount();\n        DECODERS[bitsPerException].decode(data, offset, nextExceptions, 0, numIterations);\n        offset += PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, numExceptions, bitsPerException);\n        for (int i = 0; i < numExceptions; ++i) {\n          nextDocs[data[offset++]] |= nextExceptions[i] << bitsPerValue;\n        }\n      }\n      for (int previousDoc = docID, i = 0; i < BLOCK_SIZE; ++i) {\n        final int doc = previousDoc + 1 + nextDocs[i];\n        previousDoc = nextDocs[i] = doc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Iterator#pforDecompress(byte).mjava","pathOld":"/dev/null","sourceNew":"    void pforDecompress(byte token) {\n      final int bitsPerValue = token & 0x1F;\n      if (bitsPerValue == 0) {\n        Arrays.fill(nextDocs, 0);\n      } else {\n        DECODERS[bitsPerValue].decode(data, offset, nextDocs, 0, ITERATIONS[bitsPerValue]);\n        offset += BYTE_BLOCK_COUNTS[bitsPerValue];\n      }\n      if ((token & HAS_EXCEPTIONS) != 0) {\n        // there are exceptions\n        final int numExceptions = data[offset++];\n        final int bitsPerException = data[offset++];\n        final int numIterations = (numExceptions + DECODERS[bitsPerException].byteValueCount() - 1) / DECODERS[bitsPerException].byteValueCount();\n        DECODERS[bitsPerException].decode(data, offset, nextExceptions, 0, numIterations);\n        offset += PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, numExceptions, bitsPerException);\n        for (int i = 0; i < numExceptions; ++i) {\n          nextDocs[data[offset++]] |= nextExceptions[i] << bitsPerValue;\n        }\n      }\n      for (int previousDoc = docID, i = 0; i < BLOCK_SIZE; ++i) {\n        final int doc = previousDoc + 1 + nextDocs[i];\n        previousDoc = nextDocs[i] = doc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Iterator#pforDecompress(byte).mjava","sourceNew":null,"sourceOld":"    void pforDecompress(byte token) {\n      final int bitsPerValue = token & 0x1F;\n      if (bitsPerValue == 0) {\n        Arrays.fill(nextDocs, 0);\n      } else {\n        DECODERS[bitsPerValue].decode(data, offset, nextDocs, 0, ITERATIONS[bitsPerValue]);\n        offset += BYTE_BLOCK_COUNTS[bitsPerValue];\n      }\n      if ((token & HAS_EXCEPTIONS) != 0) {\n        // there are exceptions\n        final int numExceptions = data[offset++];\n        final int bitsPerException = data[offset++];\n        final int numIterations = (numExceptions + DECODERS[bitsPerException].byteValueCount() - 1) / DECODERS[bitsPerException].byteValueCount();\n        DECODERS[bitsPerException].decode(data, offset, nextExceptions, 0, numIterations);\n        offset += PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, numExceptions, bitsPerException);\n        for (int i = 0; i < numExceptions; ++i) {\n          nextDocs[data[offset++]] |= nextExceptions[i] << bitsPerValue;\n        }\n      }\n      for (int previousDoc = docID, i = 0; i < BLOCK_SIZE; ++i) {\n        final int doc = previousDoc + 1 + nextDocs[i];\n        previousDoc = nextDocs[i] = doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Iterator#pforDecompress(byte).mjava","sourceNew":null,"sourceOld":"    void pforDecompress(byte token) {\n      final int bitsPerValue = token & 0x1F;\n      if (bitsPerValue == 0) {\n        Arrays.fill(nextDocs, 0);\n      } else {\n        DECODERS[bitsPerValue].decode(data, offset, nextDocs, 0, ITERATIONS[bitsPerValue]);\n        offset += BYTE_BLOCK_COUNTS[bitsPerValue];\n      }\n      if ((token & HAS_EXCEPTIONS) != 0) {\n        // there are exceptions\n        final int numExceptions = data[offset++];\n        final int bitsPerException = data[offset++];\n        final int numIterations = (numExceptions + DECODERS[bitsPerException].byteValueCount() - 1) / DECODERS[bitsPerException].byteValueCount();\n        DECODERS[bitsPerException].decode(data, offset, nextExceptions, 0, numIterations);\n        offset += PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, numExceptions, bitsPerException);\n        for (int i = 0; i < numExceptions; ++i) {\n          nextDocs[data[offset++]] |= nextExceptions[i] << bitsPerValue;\n        }\n      }\n      for (int previousDoc = docID, i = 0; i < BLOCK_SIZE; ++i) {\n        final int doc = previousDoc + 1 + nextDocs[i];\n        previousDoc = nextDocs[i] = doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a2f37c70d502802371a3ac864572b2ffc7730ffc","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["a2f37c70d502802371a3ac864572b2ffc7730ffc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2f37c70d502802371a3ac864572b2ffc7730ffc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"]},"commit2Childs":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2f37c70d502802371a3ac864572b2ffc7730ffc","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}