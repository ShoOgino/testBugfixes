{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","commits":[{"id":"9227359ab3bd86e5b85fab89a99332da7d5bacb1","date":1490341270,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String addTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, addTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String addTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, addTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7415f9791648efe2ead7b59a5447227f179add31","date":1490357663,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ExecutePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2b9746443f127bcbf50357efc62521a2a3fffa7","date":1491220826,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n            \"\\t\\t\\t},\\n\" +\n            \"\\t\\t\\t{\\n\" +\n            \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n            \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n            \"\\t\\t\\t}\\n\" +\n            \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aca0f701e3e993fe76cff8ec1758a74d8dd3318","date":1491221274,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b51bf16b2321204d381cc1154f0c975f5e8b9a2","date":1491806707,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple poilicies\n    String setPolicyCommand =  \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"replicas\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 3\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"maximize\\\": \\\"freedisk\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 100\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\t\\t\\n\" +\n        \"\\t}, \\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"policy1\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"cpu\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 10\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"replicas\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 3\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\t\\t\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\"\\t\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{\\n\" +\n        \"\\t\\\"remove-policy\\\" : \\\"policy1\\\"\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af23aec47e40b09ca5924f5df074422b8e5e7b04","date":1491812898,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : 'false'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple poilicies\n    String setPolicyCommand =  \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{'minimize': 'replicas','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}, \" +\n        \"'set-policy': {\" +\n        \"'name' : 'policy1',\" +\n        \"'preferences': [{'minimize': 'cpu','precision': 10}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{\" +\n        \"'minimize': 'replicas',\" +\n        \"'precision': 3\" +\n        \"}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"10m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"true\\\",\\n\" +\n        \"\\t\\t\\\"actions\\\" : [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"compute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.ComputePlanAction\\\"\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"name\\\" : \\\"log_plan\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"class\\\" : \\\"solr.LogPlanAction\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"collection\\\" : \\\".system\\\"\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\\n\" +\n        \"\\t\\\"set-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\\"event\\\" : \\\"nodeLost\\\",\\n\" +\n        \"\\t\\t\\\"waitFor\\\" : \\\"20m\\\",\\n\" +\n        \"\\t\\t\\\"enabled\\\" : \\\"false\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\\n\" +\n        \"\\t\\\"remove-trigger\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\\n\" +\n        \"\\t\\\"set-listener\\\" : \\n\" +\n        \"\\t\\t{\\n\" +\n        \"\\t\\t\\t\\\"name\\\" : \\\"xyz\\\",\\n\" +\n        \"\\t\\t\\t\\\"trigger\\\" : \\\"node_lost_trigger\\\",\\n\" +\n        \"\\t\\t\\t\\\"stage\\\" : [\\\"STARTED\\\",\\\"ABORTED\\\",\\\"SUCCEEDED\\\"],\\n\" +\n        \"\\t\\t\\t\\\"beforeAction\\\" : \\\"execute_plan\\\",\\n\" +\n        \"\\t\\t\\t\\\"class\\\" : \\\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\\\",\\n\" +\n        \"\\t\\t\\t\\\"url\\\" : \\\"http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}\\\"\\n\" +\n        \"\\t\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple poilicies\n    String setPolicyCommand =  \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"replicas\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 3\\n\" +\n        \"\\t\\t\\t},\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"maximize\\\": \\\"freedisk\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 100\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\t\\t\\n\" +\n        \"\\t}, \\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"policy1\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"cpu\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 10\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\",\\n\" +\n        \"\\t\\t\\\"preferences\\\": [\\n\" +\n        \"\\t\\t\\t{\\n\" +\n        \"\\t\\t\\t\\t\\\"minimize\\\": \\\"replicas\\\",\\n\" +\n        \"\\t\\t\\t\\t\\\"precision\\\": 3\\n\" +\n        \"\\t\\t\\t}\\n\" +\n        \"\\t\\t]\\t\\t\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\\n\" +\n        \"\\t\\\"set-policy\\\": {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"default\\\"\\t\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{\\n\" +\n        \"\\t\\\"remove-policy\\\" : \\\"policy1\\\"\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a648360be52f2b0cc9971af641fe1e68778dab","date":1493361164,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{'minimize': 'replicas','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}, \" +\n        \"'set-policy': {\" +\n        \"'name' : 'policy1',\" +\n        \"'preferences': [{'minimize': 'cpu','precision': 10}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{\" +\n        \"'minimize': 'replicas',\" +\n        \"'precision': 3\" +\n        \"}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : 'false'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple poilicies\n    String setPolicyCommand =  \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{'minimize': 'replicas','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}, \" +\n        \"'set-policy': {\" +\n        \"'name' : 'policy1',\" +\n        \"'preferences': [{'minimize': 'cpu','precision': 10}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{\" +\n        \"'minimize': 'replicas',\" +\n        \"'precision': 3\" +\n        \"}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'replicas', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{'minimize': 'replicas','precision': 3},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}, \" +\n        \"'set-policy': {\" +\n        \"'name' : 'policy1',\" +\n        \"'preferences': [{'minimize': 'cpu','precision': 10}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"default\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default',\" +\n        \"'preferences': [\" +\n        \"{\" +\n        \"'minimize': 'replicas',\" +\n        \"'precision': 3\" +\n        \"}]}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    Map<String,Object> properties = (Map<String, Object>) policies.get(\"default\");\n    List preferences = (List) properties.get(\"preferences\");\n    assertEquals(1, preferences.size());\n\n    // policy is not valid\n    setPolicyCommand = \"{\" +\n        \"'set-policy': {\" +\n        \"'name' : 'default'\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy without conditions or preferences should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8fa96ec14813d55dffd5eaecbd69bf2f5bb957d","date":1493710252,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'replicas', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f71b6d873161f41cef30256f162ac6fa8f88858","date":1494576240,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c77a387d47ede09f8574d5d4abe19efa4ae53ad","date":1496757723,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c7414e305c165fd8dc64a88c3f36bc8484f4f8","date":1498040523,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Trying to remove trigger which has listeners registered should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a listener on a non-existent trigger should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpCallbackListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(5, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"},\" +\n        \"{\" +\n        \"'name' : 'log_plan',\" +\n        \"'class' : 'solr.LogPlanAction',\" +\n        \"'collection' : '.system'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(3, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [xyz]\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e302b4ecab1242453fbd12784e424ad50c66398","date":1501517060,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, triggers.size());\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/errorMessages[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/errorMessages[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/errorMessages[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/errorMessages[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3989cbabb60c5cb6ac1253892227bdfea3139611","date":1503145738,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f82b5713af9c6cecaff4dc191a5b264e3de1493","date":1503333919,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    String removeListenerCommand1 = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(0, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '10m',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{\" +\n        \"'name' : 'compute_plan',\" +\n        \"'class' : 'solr.ComputePlanAction'\" +\n        \"}]}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    Map<String, Object> nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    List<Map<String, String>> actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(1, actions.size());\n    assertEquals(\"600\", nodeLostTrigger.get(\"waitFor\").toString());\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '20m',\" +\n        \"'enabled' : false\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_lost_trigger\"));\n    nodeLostTrigger = (Map<String, Object>) triggers.get(\"node_lost_trigger\");\n    assertEquals(4, nodeLostTrigger.size());\n    assertEquals(\"1200\", nodeLostTrigger.get(\"waitFor\").toString());\n    assertEquals(\"false\", nodeLostTrigger.get(\"enabled\").toString());\n    actions = (List<Map<String, String>>) nodeLostTrigger.get(\"actions\");\n    assertNotNull(actions);\n    assertEquals(2, actions.size());\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    Map<String, Object> listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(2, listeners.size());\n    assertTrue(listeners.containsKey(\"xyz\"));\n    Map<String, Object> xyzListener = (Map<String, Object>) listeners.get(\"xyz\");\n    assertEquals(6, xyzListener.size());\n    assertEquals(\"org.apache.solr.cloud.autoscaling.HttpTriggerListener\", xyzListener.get(\"class\").toString());\n\n    String removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"expected exception\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(e.getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"Cannot remove trigger: node_lost_trigger because it has active listeners: [\"));\n    }\n\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"xyz\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    listeners = (Map<String, Object>) loaded.get(\"listeners\");\n    assertNotNull(listeners);\n    assertEquals(1, listeners.size());\n\n    removeTriggerCommand = \"{\" +\n        \"'remove-trigger' : {\" +\n        \"'name' : 'node_lost_trigger'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    triggers = (Map<String, Object>) loaded.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(0, countNotImplicitTriggers(triggers));\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : {\" +\n        \"'name' : 'xyz',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED'],\" +\n        \"'beforeAction' : 'execute_plan',\" +\n        \"'class' : 'org.apache.solr.cloud.autoscaling.AutoScaling$HttpTriggerListener',\" +\n        \"'url' : 'http://xyz.com/on_node_lost?node={$LOST_NODE_NAME}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    try {\n      solrClient.request(req);\n      fail(\"should have thrown Exception\");\n    } catch (BaseHttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((BaseHttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"A trigger with the name node_lost_trigger does not exist\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f82b5713af9c6cecaff4dc191a5b264e3de1493"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"af23aec47e40b09ca5924f5df074422b8e5e7b04":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"d9c7414e305c165fd8dc64a88c3f36bc8484f4f8":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"b8fa96ec14813d55dffd5eaecbd69bf2f5bb957d":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"4aca0f701e3e993fe76cff8ec1758a74d8dd3318":["a2b9746443f127bcbf50357efc62521a2a3fffa7"],"a2b9746443f127bcbf50357efc62521a2a3fffa7":["7415f9791648efe2ead7b59a5447227f179add31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["e3590d254d013266ac3849fae45974e747f7f576"],"7415f9791648efe2ead7b59a5447227f179add31":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"3989cbabb60c5cb6ac1253892227bdfea3139611":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"e3590d254d013266ac3849fae45974e747f7f576":["9e302b4ecab1242453fbd12784e424ad50c66398"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["b8fa96ec14813d55dffd5eaecbd69bf2f5bb957d"],"1f82b5713af9c6cecaff4dc191a5b264e3de1493":["3989cbabb60c5cb6ac1253892227bdfea3139611"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"c5fd294da67452cd8d116692194908de00eb5209":["d9c7414e305c165fd8dc64a88c3f36bc8484f4f8"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["af23aec47e40b09ca5924f5df074422b8e5e7b04"],"db96734b79e26d948b59f68bd4564c4836a71acf":["89948af0461fead48f44ba8fb7866f107ce83f22"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["4aca0f701e3e993fe76cff8ec1758a74d8dd3318"],"9e302b4ecab1242453fbd12784e424ad50c66398":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["7415f9791648efe2ead7b59a5447227f179add31"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"af23aec47e40b09ca5924f5df074422b8e5e7b04":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"d9c7414e305c165fd8dc64a88c3f36bc8484f4f8":["c5fd294da67452cd8d116692194908de00eb5209"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"b8fa96ec14813d55dffd5eaecbd69bf2f5bb957d":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"4aca0f701e3e993fe76cff8ec1758a74d8dd3318":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"a2b9746443f127bcbf50357efc62521a2a3fffa7":["4aca0f701e3e993fe76cff8ec1758a74d8dd3318"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","9227359ab3bd86e5b85fab89a99332da7d5bacb1","560c18d71dad43d675158783c3840f8c80d6d39c"],"7415f9791648efe2ead7b59a5447227f179add31":["a2b9746443f127bcbf50357efc62521a2a3fffa7"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["3989cbabb60c5cb6ac1253892227bdfea3139611"],"3989cbabb60c5cb6ac1253892227bdfea3139611":["1f82b5713af9c6cecaff4dc191a5b264e3de1493"],"560c18d71dad43d675158783c3840f8c80d6d39c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["db96734b79e26d948b59f68bd4564c4836a71acf"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["b8fa96ec14813d55dffd5eaecbd69bf2f5bb957d"],"e3590d254d013266ac3849fae45974e747f7f576":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["d9c7414e305c165fd8dc64a88c3f36bc8484f4f8"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"1f82b5713af9c6cecaff4dc191a5b264e3de1493":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["9e302b4ecab1242453fbd12784e424ad50c66398"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["af23aec47e40b09ca5924f5df074422b8e5e7b04"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"9e302b4ecab1242453fbd12784e424ad50c66398":["e3590d254d013266ac3849fae45974e747f7f576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}