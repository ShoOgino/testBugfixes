{"path":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","commits":[{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, intAsString));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, intAsString));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, intAsString));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NO);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NO);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.NumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new org.apache.lucene.document.IntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    String intAsString =  intValue.toString();\n    final FieldType newType = new FieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, intAsString) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(FieldType.LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f95ce1375367b92d411a06175eab3915fe93c6bc","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","3184874f7f3aca850248483485b4995343066875"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["770342641f7b505eaa8dccdc666158bff2419109","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}