{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, fieldsStream.clone(), indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7460755aa94143153400f49c8ac2746f5d092e1a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["7460755aa94143153400f49c8ac2746f5d092e1a","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}