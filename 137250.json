{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","pathOld":"/dev/null","sourceNew":"  public static short[] shrink(short[] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83224b38ea2936daead3abe32327aeaf2e2d83fe","date":1310129261,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","sourceNew":"  public static short[] shrink(short[] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static short[] shrink(short[] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","sourceNew":"  public static short[] shrink(short[] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static short[] shrink(short[] array, int targetSize) {\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#shrink(short[],int).mjava","sourceNew":"  public static short[] shrink(short[] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static short[] shrink(short[] array, int targetSize) {\n    assert targetSize >= 0: \"size must be positive (got \" + targetSize + \"): likely integer overflow?\";\n    final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT);\n    if (newSize != array.length) {\n      short[] newArray = new short[newSize];\n      System.arraycopy(array, 0, newArray, 0, newSize);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83224b38ea2936daead3abe32327aeaf2e2d83fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","83224b38ea2936daead3abe32327aeaf2e2d83fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["83224b38ea2936daead3abe32327aeaf2e2d83fe","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}