{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#verifySKGResults(String,TermFacet,SolrParams,String,NamedList[Object]).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#verifySKGResults(String,TermFacet,SolrParams,String,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verifies that the popularity &amp; relatedness values containined in a single SKG bucket \n   * match the expected values based on the facet field &amp; bucket value, as well the existing \n   * filterParams.\n   * \n   * @see #assertFacetSKGsAreCorrect\n   */\n  private void verifySKGResults(String facetKey, TermFacet facet, SolrParams filterParams,\n                                String fieldVal, NamedList<Object> bucket)\n    throws SolrServerException, IOException {\n\n    final String bucketQ = facet.field+\":\"+fieldVal;\n    final NamedList<Object> skgBucket = (NamedList<Object>) bucket.get(\"skg\");\n    assertNotNull(facetKey + \"/bucket:\" + bucket.toString(), skgBucket);\n\n    // TODO: make this more efficient?\n    // ideally we'd do a single query w/4 facet.queries, one for each count\n    // but formatting the queries is a pain, currently we leverage the accumulated fq's\n    final long fgSize = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgSize\",\n                                                                   \"rows\",\"0\",\n                                                                   \"q\",\"{!query v=$fore}\"),\n                                                            filterParams));\n    final long bgSize = getNumFound(params(\"_trace\", \"bgSize\",\n                                           \"rows\",\"0\",\n                                           \"q\", filterParams.get(\"back\")));\n    \n    final long fgCount = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgCount\",\n                                                                   \"rows\",\"0\",\n                                                                    \"q\",\"{!query v=$fore}\",\n                                                                    \"fq\", bucketQ),\n                                                             filterParams));\n    final long bgCount = getNumFound(params(\"_trace\", \"bgCount\",\n                                            \"rows\",\"0\",\n                                            \"q\", bucketQ,\n                                            \"fq\", filterParams.get(\"back\")));\n\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => fgPop should be: \" + fgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) fgCount / bgSize),\n                 skgBucket.get(\"foreground_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => bgPop should be: \" + bgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) bgCount / bgSize),\n                 skgBucket.get(\"background_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => relatedness is wrong\",\n                 roundTo5Digits(computeRelatedness(fgCount, fgSize, bgCount, bgSize)),\n                 skgBucket.get(\"relatedness\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#verifySKGResults(String,TermFacet,SolrParams,String,NamedList[Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#verifySKGResults(String,TermFacet,SolrParams,String,NamedList[Object]).mjava","sourceNew":"  /**\n   * Verifies that the popularity &amp; relatedness values containined in a single SKG bucket \n   * match the expected values based on the facet field &amp; bucket value, as well the existing \n   * filterParams.\n   * \n   * @see #assertFacetSKGsAreCorrect\n   */\n  private void verifySKGResults(String facetKey, TermFacet facet, SolrParams filterParams,\n                                String fieldVal, NamedList<Object> bucket)\n    throws SolrServerException, IOException {\n\n    final String bucketQ = facet.field+\":\"+fieldVal;\n    final NamedList<Object> skgBucket = (NamedList<Object>) bucket.get(\"skg\");\n    assertNotNull(facetKey + \"/bucket:\" + bucket.toString(), skgBucket);\n\n    // TODO: make this more efficient?\n    // ideally we'd do a single query w/4 facet.queries, one for each count\n    // but formatting the queries is a pain, currently we leverage the accumulated fq's\n    final long fgSize = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgSize\",\n                                                                   \"rows\",\"0\",\n                                                                   \"q\",\"{!query v=$fore}\"),\n                                                            filterParams));\n    final long bgSize = getNumFound(params(\"_trace\", \"bgSize\",\n                                           \"rows\",\"0\",\n                                           \"q\", filterParams.get(\"back\")));\n    \n    final long fgCount = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgCount\",\n                                                                   \"rows\",\"0\",\n                                                                    \"q\",\"{!query v=$fore}\",\n                                                                    \"fq\", bucketQ),\n                                                             filterParams));\n    final long bgCount = getNumFound(params(\"_trace\", \"bgCount\",\n                                            \"rows\",\"0\",\n                                            \"q\", bucketQ,\n                                            \"fq\", filterParams.get(\"back\")));\n\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => fgPop should be: \" + fgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) fgCount / bgSize),\n                 skgBucket.get(\"foreground_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => bgPop should be: \" + bgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) bgCount / bgSize),\n                 skgBucket.get(\"background_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => relatedness is wrong\",\n                 roundTo5Digits(computeRelatedness(fgCount, fgSize, bgCount, bgSize)),\n                 skgBucket.get(\"relatedness\"));\n    \n  }\n\n","sourceOld":"  /**\n   * Verifies that the popularity &amp; relatedness values containined in a single SKG bucket \n   * match the expected values based on the facet field &amp; bucket value, as well the existing \n   * filterParams.\n   * \n   * @see #assertFacetSKGsAreCorrect\n   */\n  private void verifySKGResults(String facetKey, TermFacet facet, SolrParams filterParams,\n                                String fieldVal, NamedList<Object> bucket)\n    throws SolrServerException, IOException {\n\n    final String bucketQ = facet.field+\":\"+fieldVal;\n    final NamedList<Object> skgBucket = (NamedList<Object>) bucket.get(\"skg\");\n    assertNotNull(facetKey + \"/bucket:\" + bucket.toString(), skgBucket);\n\n    // TODO: make this more efficient?\n    // ideally we'd do a single query w/4 facet.queries, one for each count\n    // but formatting the queries is a pain, currently we leverage the accumulated fq's\n    final long fgSize = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgSize\",\n                                                                   \"rows\",\"0\",\n                                                                   \"q\",\"{!query v=$fore}\"),\n                                                            filterParams));\n    final long bgSize = getNumFound(params(\"_trace\", \"bgSize\",\n                                           \"rows\",\"0\",\n                                           \"q\", filterParams.get(\"back\")));\n    \n    final long fgCount = getNumFound(SolrParams.wrapAppended(params(\"_trace\", \"fgCount\",\n                                                                   \"rows\",\"0\",\n                                                                    \"q\",\"{!query v=$fore}\",\n                                                                    \"fq\", bucketQ),\n                                                             filterParams));\n    final long bgCount = getNumFound(params(\"_trace\", \"bgCount\",\n                                            \"rows\",\"0\",\n                                            \"q\", bucketQ,\n                                            \"fq\", filterParams.get(\"back\")));\n\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => fgPop should be: \" + fgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) fgCount / bgSize),\n                 skgBucket.get(\"foreground_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => bgPop should be: \" + bgCount + \" / \" + bgSize,\n                 roundTo5Digits((double) bgCount / bgSize),\n                 skgBucket.get(\"background_popularity\"));\n    assertEquals(facetKey + \"/bucket:\" + bucket + \" => relatedness is wrong\",\n                 roundTo5Digits(computeRelatedness(fgCount, fgSize, bgCount, bgSize)),\n                 skgBucket.get(\"relatedness\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}