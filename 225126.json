{"path":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"/dev/null","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://example.com\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/index.html\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/page1\", \"<html><body><a href=\\\"http://example.com/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo\", \"<html><body><a href=\\\"http://example.com/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo/bar\", \"<html><body><a href=\\\"http://example.com/page1\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page2\", \"<html><body><a href=\\\"http://example.com/\\\"><a href=\\\"http://example.com/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://example.com/disallowed\", \"<html><body><a href=\\\"http://example.com/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1\"));\n      s.add(new URL(\"http://example.com/page2\"));\n      linkMap.put(\"http://example.com\", s);\n      linkMap.put(\"http://example.com/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo\"));\n      linkMap.put(\"http://example.com/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo/bar\"));\n      linkMap.put(\"http://example.com/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/disallowed\"));\n      linkMap.put(\"http://example.com/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"example.com\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d6b048fe8a7a019151795a23d29c94fa805684d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"/dev/null","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://example.com\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/index.html\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/page1\", \"<html><body><a href=\\\"http://example.com/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo\", \"<html><body><a href=\\\"http://example.com/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo/bar\", \"<html><body><a href=\\\"http://example.com/page1\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page2\", \"<html><body><a href=\\\"http://example.com/\\\"><a href=\\\"http://example.com/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://example.com/disallowed\", \"<html><body><a href=\\\"http://example.com/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1\"));\n      s.add(new URL(\"http://example.com/page2\"));\n      linkMap.put(\"http://example.com\", s);\n      linkMap.put(\"http://example.com/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo\"));\n      linkMap.put(\"http://example.com/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo/bar\"));\n      linkMap.put(\"http://example.com/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/disallowed\"));\n      linkMap.put(\"http://example.com/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"example.com\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"/dev/null","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://example.com\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/index.html\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/page1\", \"<html><body><a href=\\\"http://example.com/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo\", \"<html><body><a href=\\\"http://example.com/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo/bar\", \"<html><body><a href=\\\"http://example.com/page1\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page2\", \"<html><body><a href=\\\"http://example.com/\\\"><a href=\\\"http://example.com/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://example.com/disallowed\", \"<html><body><a href=\\\"http://example.com/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1\"));\n      s.add(new URL(\"http://example.com/page2\"));\n      linkMap.put(\"http://example.com\", s);\n      linkMap.put(\"http://example.com/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo\"));\n      linkMap.put(\"http://example.com/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo/bar\"));\n      linkMap.put(\"http://example.com/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/disallowed\"));\n      linkMap.put(\"http://example.com/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"example.com\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d6b048fe8a7a019151795a23d29c94fa805684d","date":1379349569,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://example.com\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/index.html\", \"<html><body><a href=\\\"http://example.com/page1\\\">page1</a><a href=\\\"http://example.com/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://example.com/page1\", \"<html><body><a href=\\\"http://example.com/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo\", \"<html><body><a href=\\\"http://example.com/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page1/foo/bar\", \"<html><body><a href=\\\"http://example.com/page1\\\"></body></html>\");\n      htmlMap.put(\"http://example.com/page2\", \"<html><body><a href=\\\"http://example.com/\\\"><a href=\\\"http://example.com/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://example.com/disallowed\", \"<html><body><a href=\\\"http://example.com/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1\"));\n      s.add(new URL(\"http://example.com/page2\"));\n      linkMap.put(\"http://example.com\", s);\n      linkMap.put(\"http://example.com/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo\"));\n      linkMap.put(\"http://example.com/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/page1/foo/bar\"));\n      linkMap.put(\"http://example.com/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://example.com/disallowed\"));\n      linkMap.put(\"http://example.com/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"example.com\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<URL>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(\"UTF-8\"))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06c53fdb787c249799e6655451c48ef29c717557","date":1494098950,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", super.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SimplePostToolTest.MockPageFetcher#MockPageFetcher().mjava","sourceNew":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", super.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","sourceOld":"    public MockPageFetcher() throws IOException {\n      (new SimplePostTool()).super();\n      htmlMap.put(\"http://[ff01::114]\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/index.html\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\">page1</a><a href=\\\"http://[ff01::114]/page2\\\">page2</a></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo\", \"<html><body><a href=\\\"http://[ff01::114]/page1/foo/bar\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page1/foo/bar\", \"<html><body><a href=\\\"http://[ff01::114]/page1\\\"></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/page2\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"><a href=\\\"http://[ff01::114]/disallowed\\\"/></body></html>\");\n      htmlMap.put(\"http://[ff01::114]/disallowed\", \"<html><body><a href=\\\"http://[ff01::114]/\\\"></body></html>\");\n\n      Set<URL> s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1\"));\n      s.add(new URL(\"http://[ff01::114]/page2\"));\n      linkMap.put(\"http://[ff01::114]\", s);\n      linkMap.put(\"http://[ff01::114]/index.html\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo\"));\n      linkMap.put(\"http://[ff01::114]/page1\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/page1/foo/bar\"));\n      linkMap.put(\"http://[ff01::114]/page1/foo\", s);\n      s = new HashSet<>();\n      s.add(new URL(\"http://[ff01::114]/disallowed\"));\n      linkMap.put(\"http://[ff01::114]/page2\", s);\n      \n      // Simulate a robots.txt file with comments and a few disallows\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"# Comments appear after the \\\"#\\\" symbol at the start of a line, or after a directive\\n\");\n      sb.append(\"User-agent: * # match all bots\\n\");\n      sb.append(\"Disallow:  # This is void\\n\");\n      sb.append(\"Disallow: /disallow # Disallow this path\\n\");\n      sb.append(\"Disallow: /nonexistingpath # Disallow this path\\n\");\n      this.robotsCache.put(\"[ff01::114]\", SimplePostTool.pageFetcher.\n          parseRobotsTxt(new ByteArrayInputStream(sb.toString().getBytes(StandardCharsets.UTF_8))));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8d6b048fe8a7a019151795a23d29c94fa805684d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["9d3d365762604952e436b51980101dfc84cc1b3e","06c53fdb787c249799e6655451c48ef29c717557"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d6b048fe8a7a019151795a23d29c94fa805684d":["c2c3a504730329ae644b009dee43024116605d47"],"06c53fdb787c249799e6655451c48ef29c717557":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06c53fdb787c249799e6655451c48ef29c717557"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","e9017cf144952056066919f1ebc7897ff9bd71b1","06c53fdb787c249799e6655451c48ef29c717557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","8d6b048fe8a7a019151795a23d29c94fa805684d"],"8d6b048fe8a7a019151795a23d29c94fa805684d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"06c53fdb787c249799e6655451c48ef29c717557":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e9017cf144952056066919f1ebc7897ff9bd71b1","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}