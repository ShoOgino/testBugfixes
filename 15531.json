{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#rewind().mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#rewind().mjava","pathOld":"/dev/null","sourceNew":"  void rewind() {\n\n    // Force reload:\n    fp = fpOrig;\n    nextEnt = -1;\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n      floorDataReader.rewind();\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      assert numFollowFloorBlocks > 0;\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n\n    /*\n    //System.out.println(\"rewind\");\n    // Keeps the block loaded, but rewinds its state:\n    if (nextEnt > 0 || fp != fpOrig) {\n    if (DEBUG) {\n    System.out.println(\"      rewind frame ord=\" + ord + \" fpOrig=\" + fpOrig + \" fp=\" + fp + \" hasTerms?=\" + hasTerms + \" isFloor?=\" + isFloor + \" nextEnt=\" + nextEnt + \" prefixLen=\" + prefix);\n    }\n    if (fp != fpOrig) {\n    fp = fpOrig;\n    nextEnt = -1;\n    } else {\n    nextEnt = 0;\n    }\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n    floorDataReader.rewind();\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n    assert suffixBytes != null;\n    suffixesReader.rewind();\n    assert statBytes != null;\n    statsReader.rewind();\n    metaDataUpto = 0;\n    state.termBlockOrd = 0;\n    // TODO: skip this if !hasTerms?  Then postings\n    // impl wouldn't have to write useless 0 byte\n    postingsReader.resetTermsBlock(fieldInfo, state);\n    lastSubFP = -1;\n    } else if (DEBUG) {\n    System.out.println(\"      skip rewind fp=\" + fp + \" fpOrig=\" + fpOrig + \" nextEnt=\" + nextEnt + \" ord=\" + ord);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#rewind().mjava","pathOld":"/dev/null","sourceNew":"  void rewind() {\n\n    // Force reload:\n    fp = fpOrig;\n    nextEnt = -1;\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n      floorDataReader.rewind();\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      assert numFollowFloorBlocks > 0;\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n\n    /*\n    //System.out.println(\"rewind\");\n    // Keeps the block loaded, but rewinds its state:\n    if (nextEnt > 0 || fp != fpOrig) {\n    if (DEBUG) {\n    System.out.println(\"      rewind frame ord=\" + ord + \" fpOrig=\" + fpOrig + \" fp=\" + fp + \" hasTerms?=\" + hasTerms + \" isFloor?=\" + isFloor + \" nextEnt=\" + nextEnt + \" prefixLen=\" + prefix);\n    }\n    if (fp != fpOrig) {\n    fp = fpOrig;\n    nextEnt = -1;\n    } else {\n    nextEnt = 0;\n    }\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n    floorDataReader.rewind();\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n    assert suffixBytes != null;\n    suffixesReader.rewind();\n    assert statBytes != null;\n    statsReader.rewind();\n    metaDataUpto = 0;\n    state.termBlockOrd = 0;\n    // TODO: skip this if !hasTerms?  Then postings\n    // impl wouldn't have to write useless 0 byte\n    postingsReader.resetTermsBlock(fieldInfo, state);\n    lastSubFP = -1;\n    } else if (DEBUG) {\n    System.out.println(\"      skip rewind fp=\" + fp + \" fpOrig=\" + fpOrig + \" nextEnt=\" + nextEnt + \" ord=\" + ord);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#rewind().mjava","sourceNew":null,"sourceOld":"  void rewind() {\n\n    // Force reload:\n    fp = fpOrig;\n    nextEnt = -1;\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n      floorDataReader.rewind();\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      assert numFollowFloorBlocks > 0;\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n\n    /*\n    //System.out.println(\"rewind\");\n    // Keeps the block loaded, but rewinds its state:\n    if (nextEnt > 0 || fp != fpOrig) {\n    if (DEBUG) {\n    System.out.println(\"      rewind frame ord=\" + ord + \" fpOrig=\" + fpOrig + \" fp=\" + fp + \" hasTerms?=\" + hasTerms + \" isFloor?=\" + isFloor + \" nextEnt=\" + nextEnt + \" prefixLen=\" + prefix);\n    }\n    if (fp != fpOrig) {\n    fp = fpOrig;\n    nextEnt = -1;\n    } else {\n    nextEnt = 0;\n    }\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n    floorDataReader.rewind();\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n    assert suffixBytes != null;\n    suffixesReader.rewind();\n    assert statBytes != null;\n    statsReader.rewind();\n    metaDataUpto = 0;\n    state.termBlockOrd = 0;\n    // TODO: skip this if !hasTerms?  Then postings\n    // impl wouldn't have to write useless 0 byte\n    postingsReader.resetTermsBlock(fieldInfo, state);\n    lastSubFP = -1;\n    } else if (DEBUG) {\n    System.out.println(\"      skip rewind fp=\" + fp + \" fpOrig=\" + fpOrig + \" nextEnt=\" + nextEnt + \" ord=\" + ord);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}