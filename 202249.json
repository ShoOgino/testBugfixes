{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateUncompressor#uncompress(DataInput,BytesRef).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateUncompressor#uncompress(DataInput,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void uncompress(DataInput in, BytesRef bytes) throws IOException {\n      bytes.offset = bytes.length = 0;\n\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = ArrayUtil.grow(compressed, compressedLength);\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      uncompressor.reset();\n      uncompressor.setInput(compressed, 0, compressedLength);\n      if (uncompressor.needsInput()) {\n        return;\n      }\n\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = uncompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (uncompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateUncompressor#uncompress(DataInput,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, BytesRef bytes) throws IOException {\n      bytes.offset = bytes.length = 0;\n\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = ArrayUtil.grow(compressed, compressedLength);\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n      if (decompressor.needsInput()) {\n        return;\n      }\n\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void uncompress(DataInput in, BytesRef bytes) throws IOException {\n      bytes.offset = bytes.length = 0;\n\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = ArrayUtil.grow(compressed, compressedLength);\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      uncompressor.reset();\n      uncompressor.setInput(compressed, 0, compressedLength);\n      if (uncompressor.needsInput()) {\n        return;\n      }\n\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = uncompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (uncompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["3c1f2351d093e8006e8c74a1cb6cdf4b2cbdb401"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}