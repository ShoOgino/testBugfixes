{"path":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet getDocSet(OpenBitSet bs) {\n    return rand.nextInt(2)==0 ? getHashDocSet(bs) : getBitDocSet(bs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","sourceNew":"  public DocSet getDocSet(OpenBitSet bs) {\n    switch(rand.nextInt(3)) {\n      case 0: return getIntDocSet(bs);\n      case 1: return getHashDocSet(bs);\n      case 2: return getBitDocSet(bs);    \n    }\n    return null;\n  }\n\n","sourceOld":"  public DocSet getDocSet(OpenBitSet bs) {\n    return rand.nextInt(2)==0 ? getHashDocSet(bs) : getBitDocSet(bs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52b36144a82ee78da623c584575fe306342dada","date":1246633761,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","sourceNew":"  public DocSet getDocSet(OpenBitSet bs) {\n    switch(rand.nextInt(10)) {\n      case 0: return getHashDocSet(bs);\n\n      case 1: return getBitDocSet(bs);\n      case 2: return getBitDocSet(bs);\n      case 3: return getBitDocSet(bs);\n\n      case 4: return getIntDocSet(bs);\n      case 5: return getIntDocSet(bs);\n      case 6: return getIntDocSet(bs);\n      case 7: return getIntDocSet(bs);\n      case 8: return getIntDocSet(bs);\n\n      case 9: return getDocSlice(bs);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocSet getDocSet(OpenBitSet bs) {\n    switch(rand.nextInt(3)) {\n      case 0: return getIntDocSet(bs);\n      case 1: return getHashDocSet(bs);\n      case 2: return getBitDocSet(bs);    \n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#getDocSet(OpenBitSet).mjava","sourceNew":"  public DocSet getDocSet(OpenBitSet bs) {\n    switch(rand.nextInt(10)) {\n      case 0: return getHashDocSet(bs);\n\n      case 1: return getBitDocSet(bs);\n      case 2: return getBitDocSet(bs);\n      case 3: return getBitDocSet(bs);\n\n      case 4: return getIntDocSet(bs);\n      case 5: return getIntDocSet(bs);\n      case 6: return getIntDocSet(bs);\n      case 7: return getIntDocSet(bs);\n      case 8: return getIntDocSet(bs);\n\n      case 9: return getDocSlice(bs);\n    }\n    return null;\n  }\n\n","sourceOld":"  public DocSet getDocSet(OpenBitSet bs) {\n    switch(rand.nextInt(10)) {\n      case 0: return getHashDocSet(bs);\n\n      case 1: return getBitDocSet(bs);\n      case 2: return getBitDocSet(bs);\n      case 3: return getBitDocSet(bs);\n\n      case 4: return getIntDocSet(bs);\n      case 5: return getIntDocSet(bs);\n      case 6: return getIntDocSet(bs);\n      case 7: return getIntDocSet(bs);\n      case 8: return getIntDocSet(bs);\n\n      case 9: return getDocSlice(bs);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a52b36144a82ee78da623c584575fe306342dada":["30391436869a41b74d4ba7098c40d955b686a10c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["21400778a0bf704d187a4848279049f5d90276c8"],"ad94625fb8d088209f46650c8097196fec67f00c":["a52b36144a82ee78da623c584575fe306342dada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["30391436869a41b74d4ba7098c40d955b686a10c"],"a52b36144a82ee78da623c584575fe306342dada":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30391436869a41b74d4ba7098c40d955b686a10c":["a52b36144a82ee78da623c584575fe306342dada"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}