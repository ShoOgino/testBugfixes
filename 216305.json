{"path":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","commits":[{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n\n      ConstantScoreAutoRewrite other = (ConstantScoreAutoRewrite) obj;\n      if (other.termCountCutoff != termCountCutoff) {\n        return false;\n      }\n\n      if (Double.doubleToLongBits(other.docCountPercent) != Double.doubleToLongBits(docCountPercent)) {\n        return false;\n      }\n      \n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n\n      ConstantScoreAutoRewrite other = (ConstantScoreAutoRewrite) obj;\n      if (other.termCountCutoff != termCountCutoff) {\n        return false;\n      }\n\n      if (Double.doubleToLongBits(other.docCountPercent) != Double.doubleToLongBits(docCountPercent)) {\n        return false;\n      }\n      \n      return true;\n    }\n\n","sourceOld":"    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n\n      ConstantScoreAutoRewrite other = (ConstantScoreAutoRewrite) obj;\n      if (other.termCountCutoff != termCountCutoff) {\n        return false;\n      }\n\n      if (Double.doubleToLongBits(other.docCountPercent) != Double.doubleToLongBits(docCountPercent)) {\n        return false;\n      }\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n\n      ConstantScoreAutoRewrite other = (ConstantScoreAutoRewrite) obj;\n      if (other.termCountCutoff != termCountCutoff) {\n        return false;\n      }\n\n      if (Double.doubleToLongBits(other.docCountPercent) != Double.doubleToLongBits(docCountPercent)) {\n        return false;\n      }\n      \n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj)\n        return true;\n      if (obj == null)\n        return false;\n      if (getClass() != obj.getClass())\n        return false;\n\n      ConstantScoreAutoRewrite other = (ConstantScoreAutoRewrite) obj;\n      if (other.termCountCutoff != termCountCutoff) {\n        return false;\n      }\n\n      if (Double.doubleToLongBits(other.docCountPercent) != Double.doubleToLongBits(docCountPercent)) {\n        return false;\n      }\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}