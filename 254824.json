{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CategoryListIterator cli = clp.createCategoryListIterator(0);\n    if (!cli.setNextReader(matchingDocs.context)) {\n      return;\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      cli.getOrdinals(doc, ordinals);\n      final int upto = ordinals.offset + ordinals.length;\n      for (int i = ordinals.offset; i < upto; i++) {\n        ++counts[ordinals.ints[i]];\n      }\n      ++doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CategoryListIterator cli = clp.createCategoryListIterator(0);\n    if (!cli.setNextReader(matchingDocs.context)) {\n      return;\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      cli.getOrdinals(doc, ordinals);\n      final int upto = ordinals.offset + ordinals.length;\n      for (int i = ordinals.offset; i < upto; i++) {\n        ++counts[ordinals.ints[i]];\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CategoryListIterator cli = clp.createCategoryListIterator(0);\n    if (!cli.setNextReader(matchingDocs.context)) {\n      return;\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      cli.getOrdinals(doc, ordinals);\n      final int upto = ordinals.offset + ordinals.length;\n      for (int i = ordinals.offset; i < upto; i++) {\n        ++counts[ordinals.ints[i]];\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}