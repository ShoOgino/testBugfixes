{"path":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(FreqAndNorm).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(FreqAndNorm).mjava","pathOld":"/dev/null","sourceNew":"  private void add(FreqAndNorm newEntry) {\n    FreqAndNorm next = freqNormPairs.ceiling(newEntry);\n    if (next == null) {\n      // nothing is more competitive\n      freqNormPairs.add(newEntry);\n    } else if (Long.compareUnsigned(next.norm, newEntry.norm) <= 0) {\n      // we already have this entry or more competitive entries in the tree\n      return;\n    } else {\n      // some entries have a greater freq but a less competitive norm, so we\n      // don't know which one will trigger greater scores, still add to the tree\n      freqNormPairs.add(newEntry);\n    }\n\n    for (Iterator<FreqAndNorm> it = freqNormPairs.headSet(newEntry, false).descendingIterator(); it.hasNext(); ) {\n      FreqAndNorm entry = it.next();\n      if (Long.compareUnsigned(entry.norm, newEntry.norm) >= 0) {\n        // less competitive\n        it.remove();\n      } else {\n        // lesser freq but better norm, further entries are not comparable\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#add(Impact).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#add(FreqAndNorm).mjava","sourceNew":"  private void add(Impact newEntry) {\n    Impact next = freqNormPairs.ceiling(newEntry);\n    if (next == null) {\n      // nothing is more competitive\n      freqNormPairs.add(newEntry);\n    } else if (Long.compareUnsigned(next.norm, newEntry.norm) <= 0) {\n      // we already have this entry or more competitive entries in the tree\n      return;\n    } else {\n      // some entries have a greater freq but a less competitive norm, so we\n      // don't know which one will trigger greater scores, still add to the tree\n      freqNormPairs.add(newEntry);\n    }\n\n    for (Iterator<Impact> it = freqNormPairs.headSet(newEntry, false).descendingIterator(); it.hasNext(); ) {\n      Impact entry = it.next();\n      if (Long.compareUnsigned(entry.norm, newEntry.norm) >= 0) {\n        // less competitive\n        it.remove();\n      } else {\n        // lesser freq but better norm, further entries are not comparable\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  private void add(FreqAndNorm newEntry) {\n    FreqAndNorm next = freqNormPairs.ceiling(newEntry);\n    if (next == null) {\n      // nothing is more competitive\n      freqNormPairs.add(newEntry);\n    } else if (Long.compareUnsigned(next.norm, newEntry.norm) <= 0) {\n      // we already have this entry or more competitive entries in the tree\n      return;\n    } else {\n      // some entries have a greater freq but a less competitive norm, so we\n      // don't know which one will trigger greater scores, still add to the tree\n      freqNormPairs.add(newEntry);\n    }\n\n    for (Iterator<FreqAndNorm> it = freqNormPairs.headSet(newEntry, false).descendingIterator(); it.hasNext(); ) {\n      FreqAndNorm entry = it.next();\n      if (Long.compareUnsigned(entry.norm, newEntry.norm) >= 0) {\n        // less competitive\n        it.remove();\n      } else {\n        // lesser freq but better norm, further entries are not comparable\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}