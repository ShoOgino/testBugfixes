{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,IOUtils.IOFunction[SegmentCommitInfo,SegmentReader],SegmentInfos,boolean,boolean).mjava","commits":[{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,IOUtils.IOFunction[SegmentCommitInfo,SegmentReader],SegmentInfos,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static StandardDirectoryReader open(IndexWriter writer, IOUtils.IOFunction<SegmentCommitInfo, SegmentReader> readerFunction,\n                                      SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final SegmentReader reader = readerFunction.apply(info);\n        if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n          // Steal the ref:\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.decRef();\n          segmentInfos.remove(infosUpto);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    final List<SegmentReader> readers = new ArrayList<>(numSegments);\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = infos.clone();\n    int infosUpto = 0;\n    try {\n      for (int i = 0; i < numSegments; i++) {\n        // NOTE: important that we use infos not\n        // segmentInfos here, so that we are passing the\n        // actual instance of SegmentInfoPerCommit in\n        // IndexWriter's segmentInfos:\n        final SegmentCommitInfo info = infos.info(i);\n        assert info.info.dir == dir;\n        final ReadersAndUpdates rld = writer.getPooledInstance(info, true);\n        try {\n          final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n          if (reader.numDocs() > 0 || writer.getConfig().mergePolicy.keepFullyDeletedSegment(() -> reader)) {\n            // Steal the ref:\n            readers.add(reader);\n            infosUpto++;\n          } else {\n            reader.decRef();\n            segmentInfos.remove(infosUpto);\n          }\n        } finally {\n          writer.release(rld);\n        }\n      }\n\n      writer.incRefDeleter(segmentInfos);\n\n      StandardDirectoryReader result = new StandardDirectoryReader(dir,\n          readers.toArray(new SegmentReader[readers.size()]), writer,\n          segmentInfos, applyAllDeletes, writeAllDeletes);\n      return result;\n    } catch (Throwable t) {\n      try {\n        IOUtils.applyToAll(readers, SegmentReader::decRef);\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}