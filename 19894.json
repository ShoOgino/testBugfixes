{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#normalize(float,float).mjava","sourceNew":"    public CustomWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, needsScores, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, needsScores, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Weight#normalize(float) */\n    @Override\n    public void normalize(float norm, float boost) {\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      subQueryWeight.normalize(norm, 1f);\n      for (Weight valSrcWeight : valSrcWeights) {\n        if (qStrict) {\n          valSrcWeight.normalize(1, 1); // do not normalize the ValueSource part\n        } else {\n          valSrcWeight.normalize(norm, 1f);\n        }\n      }\n      queryWeight = boost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    public CustomWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, needsScores, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, needsScores, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public CustomWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, scoreMode, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, scoreMode, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","sourceOld":"    public CustomWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, needsScores, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, needsScores, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#CustomWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    public CustomWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, scoreMode, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, scoreMode, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","sourceOld":"    public CustomWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      super(CustomScoreQuery.this);\n      // note we DONT incorporate our boost, nor pass down any boost \n      // (e.g. from outer BQ), as there is no guarantee that the CustomScoreProvider's \n      // function obeys the distributive law... it might call sqrt() on the subQuery score\n      // or some other arbitrary function other than multiplication.\n      // so, instead boosts are applied directly in score()\n      this.subQueryWeight = subQuery.createWeight(searcher, needsScores, 1f);\n      this.valSrcWeights = new Weight[scoringQueries.length];\n      for(int i = 0; i < scoringQueries.length; i++) {\n        this.valSrcWeights[i] = scoringQueries[i].createWeight(searcher, needsScores, 1f);\n      }\n      this.queryWeight = boost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}