{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new MockAnalyzer(random));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}