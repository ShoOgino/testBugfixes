{"path":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testRAMDeletes().mjava","commits":[{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testRAMDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    NewIndexModifier modifier = new NewIndexModifier(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    Directory dir = new RAMDirectory();\n    NewIndexModifier modifier = new NewIndexModifier(dir,\n        new WhitespaceAnalyzer(), true);\n    modifier.setMaxBufferedDocs(4);\n    modifier.setMaxBufferedDeleteTerms(4);\n\n    int id = 0;\n    int value = 100;\n\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n    addDoc(modifier, ++id, value);\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    assertEquals(2, modifier.getNumBufferedDeleteTerms());\n    assertEquals(1, modifier.getBufferedDeleteTermsSize());\n\n    addDoc(modifier, ++id, value);\n    assertEquals(0, modifier.getSegmentCount());\n    modifier.flush();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(1, reader.numDocs());\n\n    int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n    assertEquals(1, hitCount);\n    reader.close();\n\n    modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}