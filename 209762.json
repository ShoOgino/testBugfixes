{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + indexIn + \", \" + blockIn + \")\");\n    }\n  }\n\n","bugFix":["dbba3c5be159d190b2b308dfc250c43531694ddb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":null,"sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#checkFieldSummary(SegmentInfo,IndexInput,IndexInput,TermsReader,TermsReader).mjava","sourceNew":null,"sourceOld":"  private void checkFieldSummary(SegmentInfo info, IndexInput indexIn, IndexInput blockIn, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.maxDoc()) {\n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.maxDoc() + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {\n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq < field.sumDocFreq) {\n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (blockIn=\" + blockIn + \")\", indexIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["b0267c69e2456a3477a1ad785723f2135da3117e","086ffe31d8fba0110227db122974163709ecc1b4"],"b0267c69e2456a3477a1ad785723f2135da3117e":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","b0267c69e2456a3477a1ad785723f2135da3117e"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"086ffe31d8fba0110227db122974163709ecc1b4":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"b0267c69e2456a3477a1ad785723f2135da3117e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","086ffe31d8fba0110227db122974163709ecc1b4","b06445ae1731e049327712db0454e5643ca9b7fe"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}