{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","commits":[{"id":"2ed386a88868d62faee4b6d1bd69ba7fde7ca982","date":1428908489,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractTerms() {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), Occur.SHOULD);\n    bq.add(new TermQuery(b), Occur.MUST);\n    bq.add(new TermQuery(c), Occur.FILTER);\n    bq.add(new TermQuery(d), Occur.MUST_NOT);\n    Set<Term> terms = new HashSet<>();\n    bq.extractTerms(terms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), terms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), Occur.SHOULD);\n    bq.add(new TermQuery(b), Occur.MUST);\n    bq.add(new TermQuery(c), Occur.FILTER);\n    bq.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, true).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), Occur.SHOULD);\n    bq.add(new TermQuery(b), Occur.MUST);\n    bq.add(new TermQuery(c), Occur.FILTER);\n    bq.add(new TermQuery(d), Occur.MUST_NOT);\n    Set<Term> terms = new HashSet<>();\n    bq.extractTerms(terms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, true).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(a), Occur.SHOULD);\n    bq.add(new TermQuery(b), Occur.MUST);\n    bq.add(new TermQuery(c), Occur.FILTER);\n    bq.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, true).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, true).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, true).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, false).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createNormalizedWeight(bq, ScoreMode.COMPLETE_NO_SCORES).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testQueryVisitor().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testExtractTerms().mjava","sourceNew":"  public void testQueryVisitor() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    BooleanQuery bq = bqBuilder.build();\n\n    bq.visit(new QueryVisitor() {\n\n      Term expected;\n\n      @Override\n      public QueryVisitor getSubVisitor(Occur occur, Query parent) {\n        switch (occur) {\n          case SHOULD:\n            expected = a;\n            break;\n          case MUST:\n            expected = b;\n            break;\n          case FILTER:\n            expected = c;\n            break;\n          case MUST_NOT:\n            expected = d;\n            break;\n          default:\n            throw new IllegalStateException();\n        }\n        return this;\n      }\n\n      @Override\n      public void consumeTerms(Query query, Term... terms) {\n        assertEquals(expected, terms[0]);\n      }\n    });\n  }\n\n","sourceOld":"  public void testExtractTerms() throws IOException {\n    Term a = new Term(\"f\", \"a\");\n    Term b = new Term(\"f\", \"b\");\n    Term c = new Term(\"f\", \"c\");\n    Term d = new Term(\"f\", \"d\");\n    BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(a), Occur.SHOULD);\n    bqBuilder.add(new TermQuery(b), Occur.MUST);\n    bqBuilder.add(new TermQuery(c), Occur.FILTER);\n    bqBuilder.add(new TermQuery(d), Occur.MUST_NOT);\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    BooleanQuery bq = bqBuilder.build();\n\n    Set<Term> scoringTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE, 1).extractTerms(scoringTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b)), scoringTerms);\n\n    Set<Term> matchingTerms = new HashSet<>();\n    searcher.createWeight(searcher.rewrite(bq), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(matchingTerms);\n    assertEquals(new HashSet<>(Arrays.asList(a, b, c)), matchingTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["05c52ac194342b760b830342ee8423fcf00e54d0"],"2ed386a88868d62faee4b6d1bd69ba7fde7ca982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"05c52ac194342b760b830342ee8423fcf00e54d0":["2ed386a88868d62faee4b6d1bd69ba7fde7ca982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"2ed386a88868d62faee4b6d1bd69ba7fde7ca982":["05c52ac194342b760b830342ee8423fcf00e54d0"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ed386a88868d62faee4b6d1bd69ba7fde7ca982"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"05c52ac194342b760b830342ee8423fcf00e54d0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}