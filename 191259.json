{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, lowerPoint, offset) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (StringHelper.compare(bytesPerDim, packedValue, offset, upperPoint, offset) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (StringHelper.compare(bytesPerDim, minPackedValue, offset, upperPoint, offset) > 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, lowerPoint, offset) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= StringHelper.compare(bytesPerDim, minPackedValue, offset, lowerPoint, offset) < 0 ||\n                  StringHelper.compare(bytesPerDim, maxPackedValue, offset, upperPoint, offset) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (StringHelper.compare(bytesPerDim, lowerPoint, offset, fieldPackedLower, offset) > 0\n                || StringHelper.compare(bytesPerDim, upperPoint, offset, fieldPackedUpper, offset) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numDims=\" + values.getNumDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(),\n                  DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (FutureArrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= FutureArrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  FutureArrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (FutureArrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || FutureArrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean matches(byte[] packedValue) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            // Doc's value is too low, in this dimension\n            return false;\n          }\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n            // Doc's value is too high, in this dimension\n            return false;\n          }\n        }\n        return true;\n      }\n\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n\n        boolean crosses = false;\n\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n\n          if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n        }\n\n        if (crosses) {\n          return Relation.CELL_CROSSES_QUERY;\n        } else {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n             Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                return;\n              }\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                return;\n              }\n            }\n\n            // Doc is in-bounds\n            adder.add(docID);\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                return Relation.CELL_OUTSIDE_QUERY;\n              }\n\n              crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_INSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // Doc's value is too low, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n              if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n                // Doc's value is too high, in this dimension\n                result.clear(docID);\n                cost[0]--;\n                return;\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n\n            boolean crosses = false;\n\n            for(int dim=0;dim<numDims;dim++) {\n              int offset = dim*bytesPerDim;\n\n              if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n                // This dim is not in the range\n                return Relation.CELL_INSIDE_QUERY;\n              }\n\n              crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n                  Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n            }\n\n            if (crosses) {\n              return Relation.CELL_CROSSES_QUERY;\n            } else {\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean matches(byte[] packedValue) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            // Doc's value is too low, in this dimension\n            return false;\n          }\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n            // Doc's value is too high, in this dimension\n            return false;\n          }\n        }\n        return true;\n      }\n\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n\n        boolean crosses = false;\n\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n\n          if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n        }\n\n        if (crosses) {\n          return Relation.CELL_CROSSES_QUERY;\n        } else {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n             Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimateDocCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean matches(byte[] packedValue) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            // Doc's value is too low, in this dimension\n            return false;\n          }\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n            // Doc's value is too high, in this dimension\n            return false;\n          }\n        }\n        return true;\n      }\n\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n\n        boolean crosses = false;\n\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n\n          if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n        }\n\n        if (crosses) {\n          return Relation.CELL_CROSSES_QUERY;\n        } else {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n             Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean matches(byte[] packedValue) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            // Doc's value is too low, in this dimension\n            return false;\n          }\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n            // Doc's value is too high, in this dimension\n            return false;\n          }\n        }\n        return true;\n      }\n\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n\n        boolean crosses = false;\n\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n\n          if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n        }\n\n        if (crosses) {\n          return Relation.CELL_CROSSES_QUERY;\n        } else {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n             Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimateDocCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // We don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\".\n    // This is an inverted structure and should be used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      private boolean matches(byte[] packedValue) {\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            // Doc's value is too low, in this dimension\n            return false;\n          }\n          if (Arrays.compareUnsigned(packedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0) {\n            // Doc's value is too high, in this dimension\n            return false;\n          }\n        }\n        return true;\n      }\n\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n\n        boolean crosses = false;\n\n        for(int dim=0;dim<numDims;dim++) {\n          int offset = dim*bytesPerDim;\n\n          if (Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0) {\n            return Relation.CELL_OUTSIDE_QUERY;\n          }\n\n          crosses |= Arrays.compareUnsigned(minPackedValue, offset, offset + bytesPerDim, lowerPoint, offset, offset + bytesPerDim) < 0 ||\n              Arrays.compareUnsigned(maxPackedValue, offset, offset + bytesPerDim, upperPoint, offset, offset + bytesPerDim) > 0;\n        }\n\n        if (crosses) {\n          return Relation.CELL_CROSSES_QUERY;\n        } else {\n          return Relation.CELL_INSIDE_QUERY;\n        }\n      }\n\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n             Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment/field indexed any points\n          return null;\n        }\n\n        if (values.getNumIndexDimensions() != numDims) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with numIndexDimensions=\" + values.getNumIndexDimensions() + \" but this query has numDims=\" + numDims);\n        }\n        if (bytesPerDim != values.getBytesPerDimension()) {\n          throw new IllegalArgumentException(\"field=\\\"\" + field + \"\\\" was indexed with bytesPerDim=\" + values.getBytesPerDimension() + \" but this query has bytesPerDim=\" + bytesPerDim);\n        }\n\n        boolean allDocsMatch;\n        if (values.getDocCount() == reader.maxDoc()) {\n          final byte[] fieldPackedLower = values.getMinPackedValue();\n          final byte[] fieldPackedUpper = values.getMaxPackedValue();\n          allDocsMatch = true;\n          for (int i = 0; i < numDims; ++i) {\n            int offset = i * bytesPerDim;\n            if (Arrays.compareUnsigned(lowerPoint, offset, offset + bytesPerDim, fieldPackedLower, offset, offset + bytesPerDim) > 0\n                || Arrays.compareUnsigned(upperPoint, offset, offset + bytesPerDim, fieldPackedUpper, offset, offset + bytesPerDim) < 0) {\n              allDocsMatch = false;\n              break;\n            }\n          }\n        } else {\n          allDocsMatch = false;\n        }\n\n        final Weight weight = this;\n        if (allDocsMatch) {\n          // all docs have a value and all points are within bounds, so everything matches\n          return new ScorerSupplier() {\n            @Override\n            public Scorer get(long leadCost) {\n              return new ConstantScoreScorer(weight, score(), scoreMode, DocIdSetIterator.all(reader.maxDoc()));\n            }\n            \n            @Override\n            public long cost() {\n              return reader.maxDoc();\n            }\n          };\n        } else {\n          return new ScorerSupplier() {\n\n            final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n            final IntersectVisitor visitor = getIntersectVisitor(result);\n            long cost = -1;\n\n            @Override\n            public Scorer get(long leadCost) throws IOException {\n              if (values.getDocCount() == reader.maxDoc()\n                  && values.getDocCount() == values.size()\n                  && cost() > reader.maxDoc() / 2) {\n                // If all docs have exactly one value and the cost is greater\n                // than half the leaf size then maybe we can make things faster\n                // by computing the set of documents that do NOT match the range\n                final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n                result.set(0, reader.maxDoc());\n                int[] cost = new int[] { reader.maxDoc() };\n                values.intersect(getInverseIntersectVisitor(result, cost));\n                final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n                return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n              }\n\n              values.intersect(visitor);\n              DocIdSetIterator iterator = result.build().iterator();\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            \n            @Override\n            public long cost() {\n              if (cost == -1) {\n                // Computing the cost may be expensive, so only do it if necessary\n                cost = values.estimatePointCount(visitor);\n                assert cost >= 0;\n              }\n              return cost;\n            }\n          };\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["9c226b0eeb8b028f572020f459851a663a2c064e"],"f6652c943595e92c187ee904c382863013eae28f":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"646cad9a0473e40f431299c5d1567d1f4d32f689":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["646cad9a0473e40f431299c5d1567d1f4d32f689","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"f6652c943595e92c187ee904c382863013eae28f":["9c226b0eeb8b028f572020f459851a663a2c064e"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"417142ff08fda9cf0b72d5133e63097a166c6458":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}