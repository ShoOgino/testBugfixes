{"path":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(processor, params, false) && !RequestHandlerUtils.handleRollback(processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(processor, params, false);\n        RequestHandlerUtils.handleRollback(processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64cae353de680169c133e0a9f4debee071ad3241","date":1303312298,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":["38cf2ff411b3f7342febd22163907bafb5342a6f","38cf2ff411b3f7342febd22163907bafb5342a6f","38cf2ff411b3f7342febd22163907bafb5342a6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(params.get(UpdateParams.UPDATE_PROCESSOR));\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ContentStreamHandlerBase#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String updateChainName = null;\n    if(params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED) != null) {\n    \tlog.warn(\"Use of deprecated update request parameter \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\n    \t\t\t \" detected. Please use the new parameter \"+UpdateParams.UPDATE_CHAIN+\" instead, as support\"+\n    \t\t\t \" for \"+UpdateParams.UPDATE_CHAIN_DEPRECATED+\" will be removed in a later version.\");\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    } else {\n    \tupdateChainName = params.get(UpdateParams.UPDATE_CHAIN);\n    }\n    UpdateRequestProcessorChain processorChain =\n            req.getCore().getUpdateProcessingChain(updateChainName);\n\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    try {\n      ContentStreamLoader documentLoader = newLoader(req, processor);\n\n\n      Iterable<ContentStream> streams = req.getContentStreams();\n      if (streams == null) {\n        if (!RequestHandlerUtils.handleCommit(req, processor, params, false) && !RequestHandlerUtils.handleRollback(req, processor, params, false)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"missing content stream\");\n        }\n      } else {\n\n        for (ContentStream stream : streams) {\n          documentLoader.load(req, rsp, stream);\n        }\n\n        // Perhaps commit from the parameters\n        RequestHandlerUtils.handleCommit(req, processor, params, false);\n        RequestHandlerUtils.handleRollback(req, processor, params, false);\n      }\n    } finally {\n      // finish the request\n      processor.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["64cae353de680169c133e0a9f4debee071ad3241","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","64cae353de680169c133e0a9f4debee071ad3241"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","64cae353de680169c133e0a9f4debee071ad3241"],"64cae353de680169c133e0a9f4debee071ad3241":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","64cae353de680169c133e0a9f4debee071ad3241"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["64cae353de680169c133e0a9f4debee071ad3241"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["64cae353de680169c133e0a9f4debee071ad3241","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"64cae353de680169c133e0a9f4debee071ad3241":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}