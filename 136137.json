{"path":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = parseScore();\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n\n      private ScoreMode parseScore() {\n\n        String score = getParam(SCORE);\n        final ScoreMode scoreMode = lowercase.get(score);\n        if (scoreMode == null) {\n          throw new IllegalArgumentException(\"Unable to parse ScoreMode from: \" + score);\n        }\n        return scoreMode;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5dc820d653826ca85d4355563ef001f156c644","date":1438618492,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = parseScore();\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n\n      private ScoreMode parseScore() {\n\n        String score = getParam(SCORE);\n        final ScoreMode scoreMode = lowercase.get(score);\n        if (scoreMode == null) {\n          throw new IllegalArgumentException(\"Unable to parse ScoreMode from: \" + score);\n        }\n        return scoreMode;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"118ba480e87dfe453a6b47a320429be33f1d1653","date":1440320558,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, fromIndex, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, \"lucene\", otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        final String fromField = localParams.get(\"from\");\n        final String fromIndex = localParams.get(\"fromIndex\");\n        final String toField = localParams.get(\"to\");\n        final ScoreMode scoreMode = ScoreModeParser.parse(getParam(SCORE));\n\n        final String v = localParams.get(CommonParams.VALUE);\n\n        final Query q = createQuery(fromField, v, fromIndex, toField, scoreMode,\n            CommonParams.TRUE.equals(localParams.get(\"TESTenforceSameCoreAsAnotherOne\")));\n\n        return q;\n      }\n\n      private Query createQuery(final String fromField, final String fromQueryStr,\n                                String fromIndex, final String toField, final ScoreMode scoreMode,\n                                boolean byPassShortCircutCheck) throws SyntaxError {\n\n        final String myCore = req.getCore().getCoreDescriptor().getName();\n\n        if (fromIndex != null && (!fromIndex.equals(myCore) || byPassShortCircutCheck)) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final String coreName = getCoreName(fromIndex, container);\n          final SolrCore fromCore = container.getCore(coreName);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + coreName);\n          }\n\n          long fromCoreOpenTime = 0;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n\n          try {\n            QParser fromQueryParser = QParser.getParser(fromQueryStr, otherReq);\n            Query fromQuery = fromQueryParser.getQuery();\n\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) {\n              fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n            }\n            return new OtherCoreJoinQuery(fromQuery, fromField, coreName, fromCoreOpenTime,\n                scoreMode, toField);\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(fromQueryStr, null);\n          final Query fromQuery = fromQueryParser.getQuery();\n          return new SameCoreJoinQuery(fromQuery, fromField, toField, scoreMode);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["118ba480e87dfe453a6b47a320429be33f1d1653","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"0b5dc820d653826ca85d4355563ef001f156c644":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"118ba480e87dfe453a6b47a320429be33f1d1653":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["118ba480e87dfe453a6b47a320429be33f1d1653"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["0b5dc820d653826ca85d4355563ef001f156c644"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["118ba480e87dfe453a6b47a320429be33f1d1653","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["118ba480e87dfe453a6b47a320429be33f1d1653","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"0b5dc820d653826ca85d4355563ef001f156c644":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["0b5dc820d653826ca85d4355563ef001f156c644"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"118ba480e87dfe453a6b47a320429be33f1d1653":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["118ba480e87dfe453a6b47a320429be33f1d1653"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}