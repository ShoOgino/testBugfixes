{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  @Override\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  @Override\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","sourceNew":null,"sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  @Override\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/TFIDFSimilarity#queryNorm(float).mjava","sourceNew":null,"sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  @Override\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}