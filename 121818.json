{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"90b5983cf0959ba2f206e3f7864b45d4e73384dd","date":1313636220,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["90b5983cf0959ba2f206e3f7864b45d4e73384dd","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"90b5983cf0959ba2f206e3f7864b45d4e73384dd":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90b5983cf0959ba2f206e3f7864b45d4e73384dd"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}