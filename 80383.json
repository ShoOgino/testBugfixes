{"path":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#correctPair(int,int).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#correctPair(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Corrects the start and end offset pair. It will return null if it can't\n   * due to a failure to keep the offsets balance-able, or if it spans \"non-taggable\" tags.\n   * The start (left) offset is pulled left as needed over whitespace and opening tags. The end\n   * (right) offset is pulled right as needed over whitespace and closing tags. It's returned as\n   * a 2-element array.\n   * <p>Note that the returned array is internally reused; just use it to examine the response.\n   */\n  public int[] correctPair(int leftOffset, int rightOffset) {\n    rightOffset = correctEndOffsetForCloseElement(rightOffset);\n    if (spansNonTaggable(leftOffset, rightOffset))\n      return null;\n\n    int startTag = lookupTag(leftOffset);\n    //offsetPair[0] = Math.max(offsetPair[0], getOpenStartOff(startTag));\n    int endTag = lookupTag(rightOffset-1);\n    //offsetPair[1] = Math.min(offsetPair[1], getCloseStartOff(endTag));\n\n    // Find the ancestor tag enclosing offsetPair.  And bump out left offset along the way.\n    int iTag = startTag;\n    for (; !tagEnclosesOffset(iTag, rightOffset); iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru OpenEndOff\n      int tagOpenEndOff = getOpenEndOff(iTag);\n      if (hasNonWhitespace(tagOpenEndOff, leftOffset))\n        return null;\n      leftOffset = getOpenStartOff(iTag);\n    }\n    final int ancestorTag = iTag;\n    // Bump out rightOffset until we get to ancestorTag.\n    for (iTag = endTag; iTag != ancestorTag; iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru CloseStartOff\n      int tagCloseStartOff = getCloseStartOff(iTag);\n      if (hasNonWhitespace(rightOffset, tagCloseStartOff))\n        return null;\n      rightOffset = getCloseEndOff(iTag);\n    }\n\n    offsetPair[0] = leftOffset;\n    offsetPair[1] = rightOffset;\n    return offsetPair;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#correctPair(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Corrects the start and end offset pair. It will return null if it can't\n   * due to a failure to keep the offsets balance-able, or if it spans \"non-taggable\" tags.\n   * The start (left) offset is pulled left as needed over whitespace and opening tags. The end\n   * (right) offset is pulled right as needed over whitespace and closing tags. It's returned as\n   * a 2-element array.\n   * <p>Note that the returned array is internally reused; just use it to examine the response.\n   */\n  public int[] correctPair(int leftOffset, int rightOffset) {\n    rightOffset = correctEndOffsetForCloseElement(rightOffset);\n    if (spansNonTaggable(leftOffset, rightOffset))\n      return null;\n\n    int startTag = lookupTag(leftOffset);\n    //offsetPair[0] = Math.max(offsetPair[0], getOpenStartOff(startTag));\n    int endTag = lookupTag(rightOffset-1);\n    //offsetPair[1] = Math.min(offsetPair[1], getCloseStartOff(endTag));\n\n    // Find the ancestor tag enclosing offsetPair.  And bump out left offset along the way.\n    int iTag = startTag;\n    for (; !tagEnclosesOffset(iTag, rightOffset); iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru OpenEndOff\n      int tagOpenEndOff = getOpenEndOff(iTag);\n      if (hasNonWhitespace(tagOpenEndOff, leftOffset))\n        return null;\n      leftOffset = getOpenStartOff(iTag);\n    }\n    final int ancestorTag = iTag;\n    // Bump out rightOffset until we get to ancestorTag.\n    for (iTag = endTag; iTag != ancestorTag; iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru CloseStartOff\n      int tagCloseStartOff = getCloseStartOff(iTag);\n      if (hasNonWhitespace(rightOffset, tagCloseStartOff))\n        return null;\n      rightOffset = getCloseEndOff(iTag);\n    }\n\n    offsetPair[0] = leftOffset;\n    offsetPair[1] = rightOffset;\n    return offsetPair;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/OffsetCorrector#correctPair(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Corrects the start and end offset pair. It will return null if it can't\n   * due to a failure to keep the offsets balance-able, or if it spans \"non-taggable\" tags.\n   * The start (left) offset is pulled left as needed over whitespace and opening tags. The end\n   * (right) offset is pulled right as needed over whitespace and closing tags. It's returned as\n   * a 2-element array.\n   * <p>Note that the returned array is internally reused; just use it to examine the response.\n   */\n  public int[] correctPair(int leftOffset, int rightOffset) {\n    rightOffset = correctEndOffsetForCloseElement(rightOffset);\n    if (spansNonTaggable(leftOffset, rightOffset))\n      return null;\n\n    int startTag = lookupTag(leftOffset);\n    //offsetPair[0] = Math.max(offsetPair[0], getOpenStartOff(startTag));\n    int endTag = lookupTag(rightOffset-1);\n    //offsetPair[1] = Math.min(offsetPair[1], getCloseStartOff(endTag));\n\n    // Find the ancestor tag enclosing offsetPair.  And bump out left offset along the way.\n    int iTag = startTag;\n    for (; !tagEnclosesOffset(iTag, rightOffset); iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru OpenEndOff\n      int tagOpenEndOff = getOpenEndOff(iTag);\n      if (hasNonWhitespace(tagOpenEndOff, leftOffset))\n        return null;\n      leftOffset = getOpenStartOff(iTag);\n    }\n    final int ancestorTag = iTag;\n    // Bump out rightOffset until we get to ancestorTag.\n    for (iTag = endTag; iTag != ancestorTag; iTag = getParentTag(iTag)) {\n      //Ensure there is nothing except whitespace thru CloseStartOff\n      int tagCloseStartOff = getCloseStartOff(iTag);\n      if (hasNonWhitespace(rightOffset, tagCloseStartOff))\n        return null;\n      rightOffset = getCloseEndOff(iTag);\n    }\n\n    offsetPair[0] = leftOffset;\n    offsetPair[1] = rightOffset;\n    return offsetPair;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}