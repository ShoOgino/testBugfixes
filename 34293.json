{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.subScorers.topList());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.subScorers.topList());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.subScorers.topList());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac8ce4febd838561b4317a75f81313066e6d91c3","date":1449851410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.subScorers.topList());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = scorer.freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), true, Float.POSITIVE_INFINITY);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), true, Float.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), true, Float.POSITIVE_INFINITY);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), true, Float.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), terms[0].field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), true, Float.MAX_VALUE);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            freq = ((SynonymScorer) scorer).freq();\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), terms[0].field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            SynonymScorer synScorer = (SynonymScorer) scorer;\n            freq = synScorer.tf(synScorer.getSubMatches());\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), terms[0].field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            freq = ((SynonymScorer) scorer).freq();\n          } else if (scorer instanceof FreqBoostTermScorer) {\n            freq = ((FreqBoostTermScorer) scorer).freq();\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer) scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), terms[0].term.field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          final float freq;\n          if (scorer instanceof SynonymScorer) {\n            freq = ((SynonymScorer) scorer).freq();\n          } else {\n            assert scorer instanceof TermScorer;\n            freq = ((TermScorer)scorer).freq();\n          }\n          LeafSimScorer docScorer = new LeafSimScorer(simWeight, context.reader(), terms[0].field(), true);\n          Explanation freqExplanation = Explanation.match(freq, \"termFreq=\" + freq);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          return Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\" + getQuery() + \" in \" + doc + \") [\"\n                  + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n        }\n      }\n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"b94236357aaa22b76c10629851fe4e376e0cea82":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","0c68bfb3354451a11c895b36484af94f27530b79"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac8ce4febd838561b4317a75f81313066e6d91c3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["2f2c13220a828a78007cedb364e22dd8986ed650"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"2f2c13220a828a78007cedb364e22dd8986ed650":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["0c68bfb3354451a11c895b36484af94f27530b79"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"ac8ce4febd838561b4317a75f81313066e6d91c3":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}