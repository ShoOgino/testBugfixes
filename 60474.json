{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","commits":[{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(Term,float).mjava","sourceNew":"      public boolean collect(BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        docVisitCount += reader.docFreq(field, bytes);\n        return true;\n      }\n\n","sourceOld":"      public boolean collect(Term t, float boost) throws IOException {\n        pendingTerms.add(t);\n        if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        // @deprecated: in 4.0 use BytesRef for collectTerms()\n        docVisitCount += reader.docFreq(t);\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","pathOld":"/dev/null","sourceNew":"      public boolean collect(BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        docVisitCount += reader.docFreq(field, bytes);\n        return true;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(TermsEnum,BytesRef,float).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","sourceNew":"      public boolean collect(TermsEnum termsEnum, BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        docVisitCount += termsEnum.docFreq();\n        return true;\n      }\n\n","sourceOld":"      public boolean collect(BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        docVisitCount += reader.docFreq(field, bytes);\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite.CutOffTermCollector#collect(BytesRef,float).mjava","sourceNew":null,"sourceOld":"      public boolean collect(BytesRef bytes, float boost) throws IOException {\n        termCount++;\n        if (termCount >= termCountLimit || docVisitCount >= docCountCutoff) {\n          hasCutOff = true;\n          return false;\n        }\n        pendingTerms.copyUsingLengthPrefix(bytes);\n        // Loading the TermInfo from the terms dict here\n        // should not be costly, because 1) the\n        // query/filter will load the TermInfo when it\n        // runs, and 2) the terms dict has a cache:\n        docVisitCount += reader.docFreq(field, bytes);\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","5f4e87790277826a2aea119328600dfb07761f32"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}