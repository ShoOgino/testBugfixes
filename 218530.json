{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n\n      if (doc == NO_MORE_DOCS) {\n        // we need this check because it is only ok to call #matches when positioned\n        return NO_MORE_DOCS;\n      }\n\n      advanceHead: for(;;) {\n        for (DocIdSetIterator other : others) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (other.docID() < doc) {\n            final int next = other.advance(doc);\n\n            if (next > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = lead.advance(next);\n              break advanceHead;\n            }\n          }\n        }\n\n        if (matches()) {\n          // success - all DocsEnums are on the same doc\n          return doc;\n        } else {\n          doc = lead.nextDoc();\n          break advanceHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].iterator.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.iterator.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    advanceHead: for(;;) {\n      assert doc == lead1.docID();\n\n      // find agreement between the two iterators with the lower costs\n      // we special case them because they do not need the\n      // 'other.docID() < doc' check that the 'others' iterators need\n      final int next2 = lead2.advance(doc);\n      if (next2 != doc) {\n        doc = lead1.advance(next2);\n        if (next2 != doc) {\n          continue;\n        }\n      }\n\n      // then find agreement with other iterators\n      for (DocIdSetIterator other : others) {\n        // other.doc may already be equal to doc if we \"continued advanceHead\"\n        // on the previous iteration and the advance on the lead scorer exactly matched.\n        if (other.docID() < doc) {\n          final int next = other.advance(doc);\n\n          if (next > doc) {\n            // iterator beyond the current doc - advance lead and continue to the new highest doc.\n            doc = lead1.advance(next);\n            continue advanceHead;\n          }\n        }\n      }\n\n      // success - all iterators are on the same doc\n      return doc;\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n\n      if (doc == NO_MORE_DOCS) {\n        // we need this check because it is only ok to call #matches when positioned\n        return NO_MORE_DOCS;\n      }\n\n      advanceHead: for(;;) {\n        for (DocIdSetIterator other : others) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (other.docID() < doc) {\n            final int next = other.advance(doc);\n\n            if (next > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = lead.advance(next);\n              break advanceHead;\n            }\n          }\n        }\n\n        if (matches()) {\n          // success - all DocsEnums are on the same doc\n          return doc;\n        } else {\n          doc = lead.nextDoc();\n          break advanceHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    advanceHead: for(;;) {\n      assert doc == lead1.docID();\n\n      // find agreement between the two iterators with the lower costs\n      // we special case them because they do not need the\n      // 'other.docID() < doc' check that the 'others' iterators need\n      final int next2 = lead2.advance(doc);\n      if (next2 != doc) {\n        doc = lead1.advance(next2);\n        if (next2 != doc) {\n          continue;\n        }\n      }\n\n      // then find agreement with other iterators\n      for (DocIdSetIterator other : others) {\n        // other.doc may already be equal to doc if we \"continued advanceHead\"\n        // on the previous iteration and the advance on the lead scorer exactly matched.\n        if (other.docID() < doc) {\n          final int next = other.advance(doc);\n\n          if (next > doc) {\n            // iterator beyond the current doc - advance lead and continue to the new highest doc.\n            doc = lead1.advance(next);\n            continue advanceHead;\n          }\n        }\n      }\n\n      // success - all iterators are on the same doc\n      return doc;\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n\n      if (doc == NO_MORE_DOCS) {\n        // we need this check because it is only ok to call #matches when positioned\n        return NO_MORE_DOCS;\n      }\n\n      advanceHead: for(;;) {\n        for (DocIdSetIterator other : others) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (other.docID() < doc) {\n            final int next = other.advance(doc);\n\n            if (next > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = lead.advance(next);\n              break advanceHead;\n            }\n          }\n        }\n\n        if (matches()) {\n          // success - all DocsEnums are on the same doc\n          return doc;\n        } else {\n          doc = lead.nextDoc();\n          break advanceHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    advanceHead: for(;;) {\n      assert doc == lead1.docID();\n\n      // find agreement between the two iterators with the lower costs\n      // we special case them because they do not need the\n      // 'other.docID() < doc' check that the 'others' iterators need\n      final int next2 = lead2.advance(doc);\n      if (next2 != doc) {\n        doc = lead1.advance(next2);\n        if (next2 != doc) {\n          continue;\n        }\n      }\n\n      // then find agreement with other iterators\n      for (DocIdSetIterator other : others) {\n        // other.doc may already be equal to doc if we \"continued advanceHead\"\n        // on the previous iteration and the advance on the lead scorer exactly matched.\n        if (other.docID() < doc) {\n          final int next = other.advance(doc);\n\n          if (next > doc) {\n            // iterator beyond the current doc - advance lead and continue to the new highest doc.\n            doc = lead1.advance(next);\n            continue advanceHead;\n          }\n        }\n      }\n\n      // success - all iterators are on the same doc\n      return doc;\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n\n      if (doc == NO_MORE_DOCS) {\n        // we need this check because it is only ok to call #matches when positioned\n        return NO_MORE_DOCS;\n      }\n\n      advanceHead: for(;;) {\n        for (DocIdSetIterator other : others) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (other.docID() < doc) {\n            final int next = other.advance(doc);\n\n            if (next > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = lead.advance(next);\n              break advanceHead;\n            }\n          }\n        }\n\n        if (matches()) {\n          // success - all DocsEnums are on the same doc\n          return doc;\n        } else {\n          doc = lead.nextDoc();\n          break advanceHead;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}