{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      b.clearHashCode();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      b.clearHashCode();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts between <code>min</code> and\n   * <code>max</code> (including both) concatenated repetitions of the language\n   * of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code> and\n   * <code>max</code>.\n   */\n  static public Automaton repeat(Automaton a, int min, int max) {\n    if (min > max) return BasicAutomata.makeEmpty();\n    max -= min;\n    a.expandSingleton();\n    Automaton b;\n    if (min == 0) b = BasicAutomata.makeEmptyString();\n    else if (min == 1) b = a.clone();\n    else {\n      List<Automaton> as = new ArrayList<Automaton>();\n      while (min-- > 0)\n        as.add(a);\n      b = concatenate(as);\n    }\n    if (max > 0) {\n      Automaton d = a.clone();\n      while (--max > 0) {\n        Automaton c = a.clone();\n        for (State p : c.getAcceptStates())\n          p.addEpsilon(d.initial);\n        d = c;\n      }\n      for (State p : b.getAcceptStates())\n        p.addEpsilon(d.initial);\n      b.deterministic = false;\n      //b.clearHashCode();\n      b.clearNumberedStates();\n      b.checkMinimizeAlways();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}