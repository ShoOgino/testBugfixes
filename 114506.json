{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int commonPrefix, int dim) throws IOException {\n\n    long leftCount = 0;\n    long rightCount = 0;\n    //build histogram at the commonPrefix byte\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        int bucket;\n        if (commonPrefix < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + commonPrefix] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + commonPrefix - bytesPerDim] & 0xff;\n        }\n        histogram[commonPrefix][bucket]++;\n      }\n    }\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[commonPrefix][i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[commonPrefix][i];\n    }\n\n    long delta = histogram[commonPrefix][partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from;\n\n    //special case when be have lot of points that are equal\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      partition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    if (delta <= maxPointsSortInHeap) {\n      deltaPoints =  new HeapPointWriter(Math.toIntExact(delta), Math.toIntExact(delta), packedBytesLength);\n    } else {\n      deltaPoints = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"delta\" + iteration, delta);\n    }\n    //divide the points. This actually destroys the current writer\n    partition(points, left, right, deltaPoints, from, to, dim, commonPrefix, 0);\n    //close delta point writer\n    deltaPoints.close();\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapSelect((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","sourceNew":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int commonPrefix, int dim) throws IOException {\n\n    long leftCount = 0;\n    long rightCount = 0;\n    //build histogram at the commonPrefix byte\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        int bucket;\n        if (commonPrefix < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + commonPrefix] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + commonPrefix - bytesPerDim] & 0xff;\n        }\n        histogram[commonPrefix][bucket]++;\n      }\n    }\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[commonPrefix][i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[commonPrefix][i];\n    }\n\n    long delta = histogram[commonPrefix][partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from;\n\n    //special case when be have lot of points that are equal\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      offlinePartition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    try (PointWriter tempDeltaPoints = getDeltaPointWriter(left, right, delta, iteration)) {\n      //divide the points. This actually destroys the current writer\n      offlinePartition(points, left, right, tempDeltaPoints, from, to, dim, commonPrefix, 0);\n      deltaPoints = tempDeltaPoints;\n    }\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapPartition((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","sourceOld":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int commonPrefix, int dim) throws IOException {\n\n    long leftCount = 0;\n    long rightCount = 0;\n    //build histogram at the commonPrefix byte\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        int bucket;\n        if (commonPrefix < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + commonPrefix] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + commonPrefix - bytesPerDim] & 0xff;\n        }\n        histogram[commonPrefix][bucket]++;\n      }\n    }\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[commonPrefix][i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[commonPrefix][i];\n    }\n\n    long delta = histogram[commonPrefix][partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from;\n\n    //special case when be have lot of points that are equal\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      partition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    if (delta <= maxPointsSortInHeap) {\n      deltaPoints =  new HeapPointWriter(Math.toIntExact(delta), Math.toIntExact(delta), packedBytesLength);\n    } else {\n      deltaPoints = new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, \"delta\" + iteration, delta);\n    }\n    //divide the points. This actually destroys the current writer\n    partition(points, left, right, deltaPoints, from, to, dim, commonPrefix, 0);\n    //close delta point writer\n    deltaPoints.close();\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapSelect((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","sourceNew":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int baseCommonPrefix, int dim) throws IOException {\n    //find common prefix from baseCommonPrefix and build histogram\n    int commonPrefix = findCommonPrefixAndHistogram(points, from, to, dim, baseCommonPrefix);\n\n    //if all equals we just partition the points\n    if (commonPrefix == bytesSorted) {\n      offlinePartition(points, left, right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n      return partitionPointFromCommonPrefix();\n    }\n\n    long leftCount = 0;\n    long rightCount = 0;\n\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[i];\n    }\n\n    long delta = histogram[partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from : (leftCount + rightCount + delta) + \" / \" + (to - from);\n\n    //special case when points are equal except last byte, we can just tie-break\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      offlinePartition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    try (PointWriter tempDeltaPoints = getDeltaPointWriter(left, right, delta, iteration)) {\n      //divide the points. This actually destroys the current writer\n      offlinePartition(points, left, right, tempDeltaPoints, from, to, dim, commonPrefix, 0);\n      deltaPoints = tempDeltaPoints;\n    }\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapPartition((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","sourceOld":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int commonPrefix, int dim) throws IOException {\n\n    long leftCount = 0;\n    long rightCount = 0;\n    //build histogram at the commonPrefix byte\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        int bucket;\n        if (commonPrefix < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + commonPrefix] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + commonPrefix - bytesPerDim] & 0xff;\n        }\n        histogram[commonPrefix][bucket]++;\n      }\n    }\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[commonPrefix][i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[commonPrefix][i];\n    }\n\n    long delta = histogram[commonPrefix][partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from;\n\n    //special case when be have lot of points that are equal\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      offlinePartition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    try (PointWriter tempDeltaPoints = getDeltaPointWriter(left, right, delta, iteration)) {\n      //divide the points. This actually destroys the current writer\n      offlinePartition(points, left, right, tempDeltaPoints, from, to, dim, commonPrefix, 0);\n      deltaPoints = tempDeltaPoints;\n    }\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapPartition((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#buildHistogramAndPartition(OfflinePointWriter,PointWriter,PointWriter,long,long,long,int,int,int).mjava","sourceNew":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int baseCommonPrefix, int dim) throws IOException {\n    // Find common prefix from baseCommonPrefix and build histogram\n    int commonPrefix = findCommonPrefixAndHistogram(points, from, to, dim, baseCommonPrefix);\n\n    // If all equals we just partition the points\n    if (commonPrefix == bytesSorted) {\n      offlinePartition(points, left, right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n      return partitionPointFromCommonPrefix();\n    }\n\n    long leftCount = 0;\n    long rightCount = 0;\n\n    // Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    // Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[i];\n    }\n\n    long delta = histogram[partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from : (leftCount + rightCount + delta) + \" / \" + (to - from);\n\n    // Special case when points are equal except last byte, we can just tie-break\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      offlinePartition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    // Create the delta points writer\n    PointWriter deltaPoints;\n    try (PointWriter tempDeltaPoints = getDeltaPointWriter(left, right, delta, iteration)) {\n      // Divide the points. This actually destroys the current writer\n      offlinePartition(points, left, right, tempDeltaPoints, from, to, dim, commonPrefix, 0);\n      deltaPoints = tempDeltaPoints;\n    }\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapPartition((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","sourceOld":"  private byte[] buildHistogramAndPartition(OfflinePointWriter points, PointWriter left, PointWriter right,\n                                            long from, long to, long partitionPoint, int iteration,  int baseCommonPrefix, int dim) throws IOException {\n    //find common prefix from baseCommonPrefix and build histogram\n    int commonPrefix = findCommonPrefixAndHistogram(points, from, to, dim, baseCommonPrefix);\n\n    //if all equals we just partition the points\n    if (commonPrefix == bytesSorted) {\n      offlinePartition(points, left, right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n      return partitionPointFromCommonPrefix();\n    }\n\n    long leftCount = 0;\n    long rightCount = 0;\n\n    //Count left points and record the partition point\n    for(int i = 0; i < HISTOGRAM_SIZE; i++) {\n      long size = histogram[i];\n      if (leftCount + size > partitionPoint - from) {\n        partitionBucket[commonPrefix] = i;\n        break;\n      }\n      leftCount += size;\n    }\n    //Count right points\n    for(int i = partitionBucket[commonPrefix] + 1; i < HISTOGRAM_SIZE; i++) {\n      rightCount += histogram[i];\n    }\n\n    long delta = histogram[partitionBucket[commonPrefix]];\n    assert leftCount + rightCount + delta == to - from : (leftCount + rightCount + delta) + \" / \" + (to - from);\n\n    //special case when points are equal except last byte, we can just tie-break\n    if (commonPrefix == bytesSorted - 1) {\n      long tieBreakCount =(partitionPoint - from - leftCount);\n      offlinePartition(points, left,  right, null, from, to, dim, commonPrefix, tieBreakCount);\n      return partitionPointFromCommonPrefix();\n    }\n\n    //create the delta points writer\n    PointWriter deltaPoints;\n    try (PointWriter tempDeltaPoints = getDeltaPointWriter(left, right, delta, iteration)) {\n      //divide the points. This actually destroys the current writer\n      offlinePartition(points, left, right, tempDeltaPoints, from, to, dim, commonPrefix, 0);\n      deltaPoints = tempDeltaPoints;\n    }\n\n    long newPartitionPoint = partitionPoint - from - leftCount;\n\n    if (deltaPoints instanceof HeapPointWriter) {\n      return heapPartition((HeapPointWriter) deltaPoints, left, right, dim, 0, (int) deltaPoints.count(), Math.toIntExact(newPartitionPoint), ++commonPrefix);\n    } else {\n      return buildHistogramAndPartition((OfflinePointWriter) deltaPoints, left, right, 0, deltaPoints.count(), newPartitionPoint, ++iteration, ++commonPrefix, dim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}