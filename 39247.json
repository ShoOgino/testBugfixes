{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233d157757a491ed2efb60c16b29af94d5cd8be4","date":1347635980,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      // end of input\n      if (line == null) {\n        closeResources();\n        return null;\n      }\n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      if (line == null) return null; // end of input       \n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":["3b748a573c805ec5a2eb0b49f143381e82e25bac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      // end of input\n      if (line == null) {\n        closeResources();\n        return null;\n      }\n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      // end of input\n      if (line == null) {\n        closeResources();\n        return null;\n      }\n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<String, Object>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/LineEntityProcessor#nextRow().mjava","sourceNew":null,"sourceOld":"  /**\n   * Reads lines from the url till it finds a lines that matches the\n   * optional acceptLineRegex and does not match the optional skipLineRegex.\n   *\n   * @return A row containing a minimum of one field \"rawLine\" or null to signal\n   * end of file. The rawLine is the as line as returned by readLine()\n   * from the url. However transformers can be used to create as \n   * many other fields as required.\n   */\n  @Override\n  public Map<String, Object> nextRow() {\n    if (reader == null) {\n      reader = new BufferedReader((Reader) context.getDataSource().getData(url));\n    }\n\n    String line;\n    \n    while ( true ) { \n      // read a line from the input file\n      try {\n        line = reader.readLine();\n      }\n      catch (IOException exp) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n             \"Problem reading from input\", exp);\n      }\n  \n      // end of input\n      if (line == null) {\n        closeResources();\n        return null;\n      }\n\n      // First scan whole line to see if we want it\n      if (acceptLineRegex != null && ! acceptLineRegex.matcher(line).find()) continue;\n      if (skipLineRegex != null &&   skipLineRegex.matcher(line).find()) continue;\n      // Contruct the 'row' of fields\n      Map<String, Object> row = new HashMap<>();\n      row.put(\"rawLine\", line);\n      return row;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["233d157757a491ed2efb60c16b29af94d5cd8be4"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233d157757a491ed2efb60c16b29af94d5cd8be4":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["233d157757a491ed2efb60c16b29af94d5cd8be4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"233d157757a491ed2efb60c16b29af94d5cd8be4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}