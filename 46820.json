{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          Document doc = reader.document(j);\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          Document doc = reader.document(j);\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad5b492e561749738cf9e4b06d8c9ac22f4e5c0f","date":1331922342,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          Document doc = reader.document(j);\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"814339e4b1ce2063ccbc6cacc6443a6446c7718b","date":1331991774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfoPerCommit,SegmentReader,NumberFormat).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfoPerCommit info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.info.docCount; ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfoPerCommit,SegmentReader,NumberFormat).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfo,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfoPerCommit info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.info.getDocCount(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfo info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.docCount; ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        Document doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"814339e4b1ce2063ccbc6cacc6443a6446c7718b":["ad5b492e561749738cf9e4b06d8c9ac22f4e5c0f"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["814339e4b1ce2063ccbc6cacc6443a6446c7718b","9d153abcf92dc5329d98571a8c3035df9bd80648"],"ad5b492e561749738cf9e4b06d8c9ac22f4e5c0f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["814339e4b1ce2063ccbc6cacc6443a6446c7718b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"814339e4b1ce2063ccbc6cacc6443a6446c7718b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad5b492e561749738cf9e4b06d8c9ac22f4e5c0f":["814339e4b1ce2063ccbc6cacc6443a6446c7718b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad5b492e561749738cf9e4b06d8c9ac22f4e5c0f"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}