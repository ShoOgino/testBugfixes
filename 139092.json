{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6987d91077abc969a2b13f6eba71e6f08774d7b","date":1498632689,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        strVal = strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType, this)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        strVal = strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType, this)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.isHidden) {\n      throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, Utils.toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, Utils.toJSONString(m), varType.wildCards));\n\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType, this)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType, this)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.isHidden) {\n      throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, Utils.toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, Utils.toJSONString(m), varType.wildCards));\n\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.isHidden) {\n      throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, Utils.toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, Utils.toJSONString(m), varType.wildCards));\n\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputationType computationType = null;\n    Object val = m.get(s);\n    Suggestion.ConditionType varType = Suggestion.getTagType(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputationType t : ComputationType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computationType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportComputed(computationType, this)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in condition : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computationType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computationType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computationType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.isHidden) {\n      throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, Utils.toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, Utils.toJSONString(m), varType.wildCards));\n\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.isHidden) {\n      throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, Utils.toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = Operand.EQUAL;\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, Utils.toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(StrUtils.formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, Utils.toJSONString(m), varType.wildCards));\n\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    ConditionType varType = Suggestion.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","date":1534173061,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map<String,Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m,\"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m,\"''{0}'' is not allowed for variable :  ''{1}''\",t,conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName,  varType.wildCards );\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \",s );\n      return null;\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","a6987d91077abc969a2b13f6eba71e6f08774d7b"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["9837f40c922407d857991971de6def18eda0857b"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a6987d91077abc969a2b13f6eba71e6f08774d7b":["98f11c416d30e556e0004a9a84960702d12d35b1"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["560c18d71dad43d675158783c3840f8c80d6d39c","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"9837f40c922407d857991971de6def18eda0857b":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["560c18d71dad43d675158783c3840f8c80d6d39c","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a6987d91077abc969a2b13f6eba71e6f08774d7b":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9837f40c922407d857991971de6def18eda0857b":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a6987d91077abc969a2b13f6eba71e6f08774d7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}