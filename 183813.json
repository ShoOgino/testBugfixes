{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (JETTY_REGISTRY.equals(registry) || JVM_REGISTRY.equals(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1fd73ec47e4d8b40afa32d839defa9d988ef801","date":1482241660,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (JETTY_REGISTRY.equals(registry) || JVM_REGISTRY.equals(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      registries.remove(registry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry, null);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry, null);\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry, null);\n    // make sure we use a name with prefix, with overrides\n    registry = overridableRegistryName(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#removeRegistry(String).mjava","sourceNew":"  /**\n   * Remove a named registry.\n   *\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry, null);\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a named registry.\n   * @param registry name of the registry to remove\n   */\n  public void removeRegistry(String registry) {\n    // close any reporters for this registry first\n    closeReporters(registry, null);\n    // make sure we use a name with prefix\n    registry = enforcePrefix(registry);\n    if (isSharedRegistry(registry)) {\n      SharedMetricRegistries.remove(registry);\n    } else {\n      swapLock.lock();\n      try {\n        registries.remove(registry);\n      } finally {\n        swapLock.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["a1fd73ec47e4d8b40afa32d839defa9d988ef801"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1fd73ec47e4d8b40afa32d839defa9d988ef801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","a30bfa174128ad6cb3bcf568080886729e347fe9"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a1fd73ec47e4d8b40afa32d839defa9d988ef801":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["a1fd73ec47e4d8b40afa32d839defa9d988ef801"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"a1fd73ec47e4d8b40afa32d839defa9d988ef801":["a30bfa174128ad6cb3bcf568080886729e347fe9","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}