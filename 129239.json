{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","commits":[{"id":"f7523916a1350712e1ae710affd4e88ccd7c431d","date":1412161942,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e48f2ee58a552eeaa92f52953efdf3b88b6580","date":1425652664,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    boolean doChecksumsOnly = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n    \n    if (doChecksumsOnly && doCrossCheckTermVectors) {\n      System.out.println(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setChecksumsOnly(doChecksumsOnly);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","sourceOld":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    boolean doChecksumsOnly = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n    \n    if (doChecksumsOnly && doCrossCheckTermVectors) {\n      System.out.println(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setChecksumsOnly(doChecksumsOnly);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","sourceOld":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    boolean doChecksumsOnly = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n    \n    if (doChecksumsOnly && doCrossCheckTermVectors) {\n      System.out.println(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setChecksumsOnly(doChecksumsOnly);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","sourceOld":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    boolean doChecksumsOnly = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n    \n    if (doChecksumsOnly && doCrossCheckTermVectors) {\n      System.out.println(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setChecksumsOnly(doChecksumsOnly);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca56618660563c407aafdbd4ee4175ba2c73e6dc","date":1448923608,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#doMain(String[]).mjava","sourceNew":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n    Options opts;\n    try {\n      opts = parseOptions(args);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e.getMessage());\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    System.out.println(\"\\nOpening index @ \" + opts.indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(opts.indexPath);\n    try {\n      if (opts.dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(opts.dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + opts.indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      opts.out = System.out;\n      return checker.doCheck(opts);\n    }\n  }\n\n","sourceOld":"  // actual main: returns exit code instead of terminating JVM (for easy testing)\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  private static int doMain(String args[]) throws IOException, InterruptedException {\n\n    boolean doExorcise = false;\n    boolean doCrossCheckTermVectors = false;\n    boolean verbose = false;\n    boolean doChecksumsOnly = false;\n    List<String> onlySegments = new ArrayList<>();\n    String indexPath = null;\n    String dirImpl = null;\n    int i = 0;\n    while(i < args.length) {\n      String arg = args[i];\n      if (\"-fast\".equals(arg)) {\n        doChecksumsOnly = true;\n      } else if (\"-exorcise\".equals(arg)) {\n        doExorcise = true;\n      } else if (\"-crossCheckTermVectors\".equals(arg)) {\n        doCrossCheckTermVectors = true;\n      } else if (arg.equals(\"-verbose\")) {\n        verbose = true;\n      } else if (arg.equals(\"-segment\")) {\n        if (i == args.length-1) {\n          System.out.println(\"ERROR: missing name for -segment option\");\n          return 1;\n        }\n        i++;\n        onlySegments.add(args[i]);\n      } else if (\"-dir-impl\".equals(arg)) {\n        if (i == args.length - 1) {\n          System.out.println(\"ERROR: missing value for -dir-impl option\");\n          return 1;\n        }\n        i++;\n        dirImpl = args[i];\n      } else {\n        if (indexPath != null) {\n          System.out.println(\"ERROR: unexpected extra argument '\" + args[i] + \"'\");\n          return 1;\n        }\n        indexPath = args[i];\n      }\n      i++;\n    }\n\n    if (indexPath == null) {\n      System.out.println(\"\\nERROR: index path not specified\");\n      System.out.println(\"\\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\\n\" +\n                         \"\\n\" +\n                         \"  -exorcise: actually write a new segments_N file, removing any problematic segments\\n\" +\n                         \"  -fast: just verify file checksums, omitting logical integrity checks\\n\" + \n                         \"  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\\n\" +\n                         \"  -codec X: when exorcising, codec to write the new segments_N file with\\n\" +\n                         \"  -verbose: print additional details\\n\" +\n                         \"  -segment X: only check the specified segments.  This can be specified multiple\\n\" + \n                         \"              times, to check more than one segment, eg '-segment _2 -segment _a'.\\n\" +\n                         \"              You can't use this with the -exorcise option\\n\" +\n                         \"  -dir-impl X: use a specific \" + FSDirectory.class.getSimpleName() + \" implementation. \" +\n                         \"If no package is specified the \" + FSDirectory.class.getPackage().getName() + \" package will be used.\\n\" +\n                         \"\\n\" +\n                         \"**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\\n\" +\n                         \"documents (perhaps many) to be permanently removed from the index.  Always make\\n\" +\n                         \"a backup copy of your index before running this!  Do not run this tool on an index\\n\" +\n                         \"that is actively being written to.  You have been warned!\\n\" +\n                         \"\\n\" +\n                         \"Run without -exorcise, this tool will open the index, report version information\\n\" +\n                         \"and report any exceptions it hits and what action it would take if -exorcise were\\n\" +\n                         \"specified.  With -exorcise, this tool will remove any segments that have issues and\\n\" + \n                         \"write a new segments_N file.  This means all documents contained in the affected\\n\" +\n                         \"segments will be removed.\\n\" +\n                         \"\\n\" +\n                         \"This tool exits with exit code 1 if the index cannot be opened or has any\\n\" +\n                         \"corruption, else 0.\\n\");\n      return 1;\n    }\n\n    if (!assertsOn())\n      System.out.println(\"\\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled\");\n\n    if (onlySegments.size() == 0)\n      onlySegments = null;\n    else if (doExorcise) {\n      System.out.println(\"ERROR: cannot specify both -exorcise and -segment\");\n      return 1;\n    }\n    \n    if (doChecksumsOnly && doCrossCheckTermVectors) {\n      System.out.println(\"ERROR: cannot specify both -fast and -crossCheckTermVectors\");\n      return 1;\n    }\n\n    System.out.println(\"\\nOpening index @ \" + indexPath + \"\\n\");\n    Directory directory = null;\n    Path path = Paths.get(indexPath);\n    try {\n      if (dirImpl == null) {\n        directory = FSDirectory.open(path);\n      } else {\n        directory = CommandLineUtil.newFSDirectory(dirImpl, path);\n      }\n    } catch (Throwable t) {\n      System.out.println(\"ERROR: could not open directory \\\"\" + indexPath + \"\\\"; exiting\");\n      t.printStackTrace(System.out);\n      return 1;\n    }\n\n    try (Directory dir = directory;\n         CheckIndex checker = new CheckIndex(dir)) {\n      checker.setCrossCheckTermVectors(doCrossCheckTermVectors);\n      checker.setChecksumsOnly(doChecksumsOnly);\n      checker.setInfoStream(System.out, verbose);\n      \n      Status result = checker.checkIndex(onlySegments);\n      if (result.missingSegments) {\n        return 1;\n      }\n      \n      if (!result.clean) {\n        if (!doExorcise) {\n          System.out.println(\"WARNING: would write new segments file, and \" + result.totLoseDocCount + \" documents would be lost, if -exorcise were specified\\n\");\n        } else {\n          System.out.println(\"WARNING: \" + result.totLoseDocCount + \" documents will be lost\\n\");\n          System.out.println(\"NOTE: will write new segments file in 5 seconds; this will remove \" + result.totLoseDocCount + \" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!\");\n          for(int s=0;s<5;s++) {\n            Thread.sleep(1000);\n            System.out.println(\"  \" + (5-s) + \"...\");\n          }\n          System.out.println(\"Writing...\");\n          checker.exorciseIndex(result);\n          System.out.println(\"OK\");\n          System.out.println(\"Wrote new segments file \\\"\" + result.newSegments.getSegmentsFileName() + \"\\\"\");\n        }\n      }\n      System.out.println(\"\");\n      \n      if (result.clean == true) {\n        return 0;\n      } else {\n        return 1;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f7523916a1350712e1ae710affd4e88ccd7c431d","f0e48f2ee58a552eeaa92f52953efdf3b88b6580"],"f0e48f2ee58a552eeaa92f52953efdf3b88b6580":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7523916a1350712e1ae710affd4e88ccd7c431d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7523916a1350712e1ae710affd4e88ccd7c431d"],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"]},"commit2Childs":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["ca56618660563c407aafdbd4ee4175ba2c73e6dc"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f0e48f2ee58a552eeaa92f52953efdf3b88b6580":["7e6d6f6217dc04f29ee177d2837147dd47627787","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7523916a1350712e1ae710affd4e88ccd7c431d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"f7523916a1350712e1ae710affd4e88ccd7c431d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0e48f2ee58a552eeaa92f52953efdf3b88b6580","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ca56618660563c407aafdbd4ee4175ba2c73e6dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}