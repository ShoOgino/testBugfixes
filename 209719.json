{"path":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Get DocsEnum for the specified term.  This method will\n   *  may return null if the term does not exists, or\n   *  positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4c930026ed70ddc449019203f227b71cf527827","date":1273063434,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get DocsEnum for the specified term.  This method will\n   *  may return null if the term does not exists, or\n   *  positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(liveDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(liveDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(liveDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.docsAndPositions(skipDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#docsAndPositions(Bits,BytesRef,DocsAndPositionsEnum).mjava","sourceNew":null,"sourceOld":"  /** Get {@link DocsEnum} for the specified term.  This\n   *  method will may return null if the term does not\n   *  exists, or positions were not indexed. */ \n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, BytesRef text, DocsAndPositionsEnum reuse) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.docsAndPositions(liveDocs, reuse);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["c4c930026ed70ddc449019203f227b71cf527827","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["c4c930026ed70ddc449019203f227b71cf527827"],"c4c930026ed70ddc449019203f227b71cf527827":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c4c930026ed70ddc449019203f227b71cf527827","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2297162a22c55456e200caef2cbcb00fe381120","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"e2297162a22c55456e200caef2cbcb00fe381120":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["c4c930026ed70ddc449019203f227b71cf527827"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"c4c930026ed70ddc449019203f227b71cf527827":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}