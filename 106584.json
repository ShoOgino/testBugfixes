{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return new ScoringWrapperSpans(includeSpans, getSimScorer(context));\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans, getSimScorer(context)) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return new ScoringWrapperSpans(includeSpans, getSimScorer(context));\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return new ScoringWrapperSpans(includeSpans, getSimScorer(context));\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans, getSimScorer(context)) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6985f89d88fd014509aa82abcd81d0e59f3af9a3","date":1468946709,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return new ScoringWrapperSpans(includeSpans, getSimScorer(context));\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return new ScoringWrapperSpans(includeSpans, getSimScorer(context));\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04abaed46266ecdede1d55dc52ab208711712ded","date":1511391665,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (excludeSpans.startPosition() - post >= candidate.endPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6985f89d88fd014509aa82abcd81d0e59f3af9a3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"04abaed46266ecdede1d55dc52ab208711712ded":["6985f89d88fd014509aa82abcd81d0e59f3af9a3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","6985f89d88fd014509aa82abcd81d0e59f3af9a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04abaed46266ecdede1d55dc52ab208711712ded"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6985f89d88fd014509aa82abcd81d0e59f3af9a3":["04abaed46266ecdede1d55dc52ab208711712ded","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["6985f89d88fd014509aa82abcd81d0e59f3af9a3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"04abaed46266ecdede1d55dc52ab208711712ded":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}