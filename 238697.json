{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.FLAG_NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    DocsEnum docsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && docsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      docsEnum = termsEnum.docs(reader.getLiveDocs(), docsEnum, DocsEnum.FLAG_NONE);\n      if (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(docsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.FLAG_NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator();\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator();\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      final Bits liveDocs = reader.getLiveDocs();\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (liveDocs != null && liveDocs.get(postingsEnum.docID())) {\n          continue;\n        }\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator();\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(reader.getLiveDocs(), postingsEnum, PostingsEnum.NONE);\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFirstLiveDoc(Terms,LeafReader).mjava","sourceNew":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static Document getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator();\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      final Bits liveDocs = reader.getLiveDocs();\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (liveDocs != null && liveDocs.get(postingsEnum.docID())) {\n          continue;\n        }\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Just get a document with the term in it, the first one will do!\n  // Is there a better way to do this? Shouldn't actually be very costly\n  // to do it this way.\n  private static StoredDocument getFirstLiveDoc(Terms terms, LeafReader reader) throws IOException {\n    PostingsEnum postingsEnum = null;\n    TermsEnum termsEnum = terms.iterator();\n    BytesRef text;\n    // Deal with the chance that the first bunch of terms are in deleted documents. Is there a better way?\n    for (int idx = 0; idx < 1000 && postingsEnum == null; ++idx) {\n      text = termsEnum.next();\n      if (text == null) { // Ran off the end of the terms enum without finding any live docs with that field in them.\n        return null;\n      }\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      final Bits liveDocs = reader.getLiveDocs();\n      if (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (liveDocs != null && liveDocs.get(postingsEnum.docID())) {\n          continue;\n        }\n        return reader.document(postingsEnum.docID());\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}