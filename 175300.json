{"path":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}