{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/LimitedFiniteStringsIteratorTest#testSingleton().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/LimitedFiniteStringsIteratorTest#testSingleton().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testSingletonNoLimit().mjava","sourceNew":"  public void testSingleton() {\n    Automaton a = Automata.makeString(\"foobar\");\n    List<IntsRef> actual = getFiniteStrings(new LimitedFiniteStringsIterator(a, 1));\n    assertEquals(1, actual.size());\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(actual.contains(scratch.get()));\n  }\n\n","sourceOld":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = Operations.getFiniteStrings(Automata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}