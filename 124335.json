{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","commits":[{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.hasDocValues() == false;\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d2c1e23e9e2a91e9824f92beb7d9450048b7d26","date":1359354558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.BINARY;\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.hasDocValues() == false;\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.BINARY;\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader#getBinaryDocValues(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader#getBinaryDocValues(String).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.BINARY;\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues dv = super.getBinaryDocValues(field);\n    FieldInfo fi = getFieldInfos().fieldInfo(field);\n    if (dv != null) {\n      assert fi != null;\n      assert fi.getDocValuesType() == FieldInfo.DocValuesType.BINARY;\n      return new AssertingBinaryDocValues(dv, maxDoc());\n    } else {\n      assert fi == null || fi.getDocValuesType() != FieldInfo.DocValuesType.BINARY;\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d2c1e23e9e2a91e9824f92beb7d9450048b7d26":["59d00acb12c9809438e21de7c24f016356973d46"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d2c1e23e9e2a91e9824f92beb7d9450048b7d26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["1d2c1e23e9e2a91e9824f92beb7d9450048b7d26"],"1d2c1e23e9e2a91e9824f92beb7d9450048b7d26":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d00acb12c9809438e21de7c24f016356973d46","d4d69c535930b5cce125cff868d40f6373dc27d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}