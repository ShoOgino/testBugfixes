{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"/dev/null","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0) {\n        // nothing has changed, no work to do\n        return;\n      }\n      \n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d60384317a9cc0319c656921cb70b37321fa60b9","3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03d03e4c5b46c71c9359363a4310b0a9eab4fa65","date":1419436545,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0) {\n        // nothing has changed, no work to do\n        return;\n      }\n      \n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0) {\n        // nothing has changed, no work to do\n        return;\n      }\n      \n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d60384317a9cc0319c656921cb70b37321fa60b9","date":1421103218,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0) {\n        // nothing has changed, no work to do\n        return;\n      }\n      \n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bugIntro":["9197d4ad51f009e1873f94d32f87913856d87ef0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9197d4ad51f009e1873f94d32f87913856d87ef0","date":1425130098,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":["d60384317a9cc0319c656921cb70b37321fa60b9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (lastClusterStateVersion == clusterState.getZkClusterStateVersion() && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState().equals(Slice.ACTIVE)) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        log.debug(\"look at collection={}\", collection);\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas !=null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor=\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"replicationFactor={} goodReplicaCount={}\", docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","03d03e4c5b46c71c9359363a4310b0a9eab4fa65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        log.debug(\"look at collection={}\", collection);\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        log.debug(\"look at collection={}\", collection);\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        log.debug(\"look at collection={}\", collection);\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Set<String> collections = clusterState.getCollections();\n      for (final String collection : collections) {\n        log.debug(\"look at collection={}\", collection);\n        DocCollection docCollection = clusterState.getCollection(collection);\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", collection, docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(collection, downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = (String) zkStateReader.getClusterProps().get(ZkStateReader.AUTO_ADD_REPLICAS);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":null,"sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":null,"sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#doWork().mjava","sourceNew":null,"sourceOld":"  private void doWork() {\n    \n    // TODO: extract to configurable strategy class ??\n    ClusterState clusterState = zkStateReader.getClusterState();\n    //check if we have disabled autoAddReplicas cluster wide\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return;\n    }\n    if (clusterState != null) {\n      if (clusterState.getZkClusterStateVersion() != null &&\n          clusterState.getZkClusterStateVersion().equals(lastClusterStateVersion) && baseUrlForBadNodes.size() == 0 &&\n          liveNodes.equals(clusterState.getLiveNodes())) {\n        // nothing has changed, no work to do\n        return;\n      }\n\n      liveNodes = clusterState.getLiveNodes();\n      lastClusterStateVersion = clusterState.getZkClusterStateVersion();\n      Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n      for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n        log.debug(\"look at collection={}\", entry.getKey());\n        DocCollection docCollection = entry.getValue();\n        if (!docCollection.getAutoAddReplicas()) {\n          log.debug(\"Collection {} is not setup to use autoAddReplicas, skipping..\", docCollection.getName());\n          continue;\n        }\n        if (docCollection.getReplicationFactor() == null) {\n          log.debug(\"Skipping collection because it has no defined replicationFactor, name={}\", docCollection.getName());\n          continue;\n        }\n        log.debug(\"Found collection, name={} replicationFactor={}\", entry.getKey(), docCollection.getReplicationFactor());\n        \n        Collection<Slice> slices = docCollection.getSlices();\n        for (Slice slice : slices) {\n          if (slice.getState() == Slice.State.ACTIVE) {\n            \n            final Collection<DownReplica> downReplicas = new ArrayList<DownReplica>();\n            \n            int goodReplicas = findDownReplicasInSlice(clusterState, docCollection, slice, downReplicas);\n            \n            log.debug(\"collection={} replicationFactor={} goodReplicaCount={}\", docCollection.getName(), docCollection.getReplicationFactor(), goodReplicas);\n            \n            if (downReplicas.size() > 0 && goodReplicas < docCollection.getReplicationFactor()) {\n              // badReplicaMap.put(collection, badReplicas);\n              processBadReplicas(entry.getKey(), downReplicas);\n            } else if (goodReplicas > docCollection.getReplicationFactor()) {\n              log.debug(\"There are too many replicas\");\n            }\n          }\n        }\n      }\n     \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d60384317a9cc0319c656921cb70b37321fa60b9":["03d03e4c5b46c71c9359363a4310b0a9eab4fa65"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["d470c8182e92b264680e34081b75e70a9f2b3c89","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["9197d4ad51f009e1873f94d32f87913856d87ef0"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","73450c0955930295d34703e7ddbfc6973b7a121a"],"9197d4ad51f009e1873f94d32f87913856d87ef0":["d60384317a9cc0319c656921cb70b37321fa60b9"],"0ad30c6a479e764150a3316e57263319775f1df2":["73450c0955930295d34703e7ddbfc6973b7a121a","115923bc88e5b1dc4bef049b1ded8486723052ed"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","0ad30c6a479e764150a3316e57263319775f1df2"],"0c924d4069ef5a5bc479a493befe0121aada6896":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d60384317a9cc0319c656921cb70b37321fa60b9","9197d4ad51f009e1873f94d32f87913856d87ef0"],"03d03e4c5b46c71c9359363a4310b0a9eab4fa65":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["73450c0955930295d34703e7ddbfc6973b7a121a"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"560c18d71dad43d675158783c3840f8c80d6d39c":["d470c8182e92b264680e34081b75e70a9f2b3c89","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"d60384317a9cc0319c656921cb70b37321fa60b9":["9197d4ad51f009e1873f94d32f87913856d87ef0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","0c924d4069ef5a5bc479a493befe0121aada6896"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","115923bc88e5b1dc4bef049b1ded8486723052ed","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9197d4ad51f009e1873f94d32f87913856d87ef0":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","560c18d71dad43d675158783c3840f8c80d6d39c"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0c924d4069ef5a5bc479a493befe0121aada6896"],"03d03e4c5b46c71c9359363a4310b0a9eab4fa65":["d60384317a9cc0319c656921cb70b37321fa60b9"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["03d03e4c5b46c71c9359363a4310b0a9eab4fa65"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0c924d4069ef5a5bc479a493befe0121aada6896","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}