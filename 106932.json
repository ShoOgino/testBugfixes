{"path":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}