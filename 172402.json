{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","pathOld":"/dev/null","sourceNew":"\tprivate int getMemorySize(Object index) {\n\t\tif (index instanceof Directory) {\n\t\t\ttry {\n\t\t\t\tDirectory dir = (Directory) index;\n\t\t\t\tint size = 0;\n\t\t\t\tString[] fileNames = dir.list();\n\t\t\t\tfor (int i=0; i < fileNames.length; i++) {\n\t\t\t\t\tsize += dir.fileLength(fileNames[i]);\n\t\t\t\t}\n\t\t\t\treturn size;\n\t\t\t}\n\t\t\tcatch (IOException e) { // can never happen (RAMDirectory)\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn ((MemoryIndex) index).getMemorySize();\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","sourceNew":"  private int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.list();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","sourceOld":"\tprivate int getMemorySize(Object index) {\n\t\tif (index instanceof Directory) {\n\t\t\ttry {\n\t\t\t\tDirectory dir = (Directory) index;\n\t\t\t\tint size = 0;\n\t\t\t\tString[] fileNames = dir.list();\n\t\t\t\tfor (int i=0; i < fileNames.length; i++) {\n\t\t\t\t\tsize += dir.fileLength(fileNames[i]);\n\t\t\t\t}\n\t\t\t\treturn size;\n\t\t\t}\n\t\t\tcatch (IOException e) { // can never happen (RAMDirectory)\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn ((MemoryIndex) index).getMemorySize();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","sourceNew":"  private int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.listAll();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","sourceOld":"  private int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.list();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","sourceNew":"  // for debugging purposes\n  int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.listAll();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","sourceOld":"  private int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.listAll();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#getMemorySize(Object).mjava","sourceNew":"  // for debugging purposes\n  int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.listAll();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","sourceOld":"  // for debugging purposes\n  int getMemorySize(Object index) {\n    if (index instanceof Directory) {\n      try {\n        Directory dir = (Directory) index;\n        int size = 0;\n        String[] fileNames = dir.listAll();\n        for (int i=0; i < fileNames.length; i++) {\n          size += dir.fileLength(fileNames[i]);\n        }\n        return size;\n      }\n      catch (IOException e) { // can never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n    else {\n      return ((MemoryIndex) index).getMemorySize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["4256bc1b3c94786287ccdfc751230374521843cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4256bc1b3c94786287ccdfc751230374521843cf"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"4256bc1b3c94786287ccdfc751230374521843cf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}