{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#intersects(Plane,GeoPoint[],Membership...).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // The bounding planes are inverted and complementary.  For intersection computation, we\n    // cannot use them as bounds.  They are independent hemispheres.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, eitherBounds.get(edge))) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    if (holes != null) {\n      // Each hole needs to be looked at for intersection too, since a shape can be entirely within the hole\n      for (final GeoPolygon hole : holes) {\n        if (hole.intersects(p, notablePoints, bounds)) {\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dc584fa95053c03d95035277a2d2aaddd537c0fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // The bounding planes are inverted and complementary.  For intersection computation, we\n    // cannot use them as bounds.  They are independent hemispheres.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, eitherBounds.get(edge))) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    if (holes != null) {\n      // Each hole needs to be looked at for intersection too, since a shape can be entirely within the hole\n      for (final GeoPolygon hole : holes) {\n        if (hole.intersects(p, notablePoints, bounds)) {\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc584fa95053c03d95035277a2d2aaddd537c0fa","date":1460232759,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoConcavePolygon#intersects(Plane,GeoPoint[],Membership...).mjava","sourceNew":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // The bounding planes are inverted and complementary.  For intersection computation, we\n    // cannot use them as bounds.  They are independent hemispheres.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final SidedPlane invertedEdge = invertedEdges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        //System.err.println(\"Checking concave edge \"+edge+\" for intersection against plane \"+p);\n        if (invertedEdge.intersects(planetModel, p, notablePoints, points, bounds, eitherBounds.get(edge))) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    if (holes != null) {\n      // Each hole needs to be looked at for intersection too, since a shape can be entirely within the hole\n      for (final GeoPolygon hole : holes) {\n        if (hole.intersects(p, notablePoints, bounds)) {\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds) {\n    // The bounding planes are inverted and complementary.  For intersection computation, we\n    // cannot use them as bounds.  They are independent hemispheres.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n      if (!isInternalEdges.get(edgeIndex)) {\n        if (edge.intersects(planetModel, p, notablePoints, points, bounds, eitherBounds.get(edge))) {\n          //System.err.println(\" intersects!\");\n          return true;\n        }\n      }\n    }\n    if (holes != null) {\n      // Each hole needs to be looked at for intersection too, since a shape can be entirely within the hole\n      for (final GeoPolygon hole : holes) {\n        if (hole.intersects(p, notablePoints, bounds)) {\n          return true;\n        }\n      }\n    }\n    //System.err.println(\" no intersection\");\n    return false;\n  }\n\n","bugFix":["40aa98241c87d86a0077beb8023713d93a0becfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"dc584fa95053c03d95035277a2d2aaddd537c0fa":["40aa98241c87d86a0077beb8023713d93a0becfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc584fa95053c03d95035277a2d2aaddd537c0fa"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"dc584fa95053c03d95035277a2d2aaddd537c0fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"40aa98241c87d86a0077beb8023713d93a0becfe":["09af2c9610ce53a4b25fd99344299b40318a4a1a","dc584fa95053c03d95035277a2d2aaddd537c0fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}