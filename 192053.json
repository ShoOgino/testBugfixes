{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#prepareConjunction(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"80ff50a565777c812ef7871453d715713fb6fb9c","date":1430307731,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#prepareConjunction(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"  ArrayList<Spans> prepareConjunction(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    Spans bigSpans = big.getSpans(context, acceptDocs, termContexts);\n    if (bigSpans == null) {\n      return null;\n    }\n    Spans littleSpans = little.getSpans(context, acceptDocs, termContexts);\n    if (littleSpans == null) {\n      return null;\n    }\n    ArrayList<Spans> bigAndLittle = new ArrayList<>();\n    bigAndLittle.add(bigSpans);\n    bigAndLittle.add(littleSpans);\n    return bigAndLittle;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#prepareConjunction(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanContainQuery#prepareConjunction(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  ArrayList<Spans> prepareConjunction(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    Spans bigSpans = big.getSpans(context, acceptDocs, termContexts, collector);\n    if (bigSpans == null) {\n      return null;\n    }\n    Spans littleSpans = little.getSpans(context, acceptDocs, termContexts, collector);\n    if (littleSpans == null) {\n      return null;\n    }\n    ArrayList<Spans> bigAndLittle = new ArrayList<>();\n    bigAndLittle.add(bigSpans);\n    bigAndLittle.add(littleSpans);\n    return bigAndLittle;\n  }\n\n","sourceOld":"  ArrayList<Spans> prepareConjunction(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    Spans bigSpans = big.getSpans(context, acceptDocs, termContexts);\n    if (bigSpans == null) {\n      return null;\n    }\n    Spans littleSpans = little.getSpans(context, acceptDocs, termContexts);\n    if (littleSpans == null) {\n      return null;\n    }\n    ArrayList<Spans> bigAndLittle = new ArrayList<>();\n    bigAndLittle.add(bigSpans);\n    bigAndLittle.add(littleSpans);\n    return bigAndLittle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ff50a565777c812ef7871453d715713fb6fb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["80ff50a565777c812ef7871453d715713fb6fb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"80ff50a565777c812ef7871453d715713fb6fb9c":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ff50a565777c812ef7871453d715713fb6fb9c"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}