{"path":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","commits":[{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    return h1 + cos(x1) * cos(x2) * h2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daf6e9d7d2b09412f97abae089a44cc03f5d5a14","date":1460042872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    // clobber crazy precision so subsequent rounding does not create ties.\n    return Double.longBitsToDouble(Double.doubleToRawLongBits(h) & 0xFFFFFFFFFFFFFFF8L);\n  }\n\n","sourceOld":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    return h1 + cos(x1) * cos(x2) * h2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    // clobber crazy precision so subsequent rounding does not create ties.\n    return Double.longBitsToDouble(Double.doubleToRawLongBits(h) & 0xFFFFFFFFFFFFFFF8L);\n  }\n\n","sourceOld":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    return h1 + cos(x1) * cos(x2) * h2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71a92b21a4564a0dd5e0559cebf435a5fe34542e","date":1573666298,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinSortKey(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = Math.toRadians(lat1);\n    double x2 = Math.toRadians(lat2);\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos(Math.toRadians(lon1 - lon2));\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    // clobber crazy precision so subsequent rounding does not create ties.\n    return Double.longBitsToDouble(Double.doubleToRawLongBits(h) & 0xFFFFFFFFFFFFFFF8L);\n  }\n\n","sourceOld":"  /**\n   * Returns a sort key for distance. This is less expensive to compute than \n   * {@link #haversinMeters(double, double, double, double)}, but it always compares the same.\n   * This can be converted into an actual distance with {@link #haversinMeters(double)}, which\n   * effectively does the second half of the computation.\n   */\n  public static double haversinSortKey(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    // clobber crazy precision so subsequent rounding does not create ties.\n    return Double.longBitsToDouble(Double.doubleToRawLongBits(h) & 0xFFFFFFFFFFFFFFF8L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["09f15823cf5eb6e807005579e875e117d8598f95"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec60431d008a694828dacb4bc3cda775b6c44a9f","daf6e9d7d2b09412f97abae089a44cc03f5d5a14"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["daf6e9d7d2b09412f97abae089a44cc03f5d5a14","09f15823cf5eb6e807005579e875e117d8598f95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daf6e9d7d2b09412f97abae089a44cc03f5d5a14":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}