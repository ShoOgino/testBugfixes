{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#countIntersection(DocsEnum,ScoredDocIDsIterator).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#countIntersection(DocsEnum,ScoredDocIDsIterator).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#countIntersection(DocsEnum,ScoredDocIDsIterator).mjava","sourceNew":"  /**\n   * Count the size of the intersection between two lists: a TermDocs (list of\n   * documents in a certain category) and a DocIdSetIterator (list of documents\n   * matching a query).\n   */\n  private static int countIntersection(DocsEnum p1, ScoredDocIDsIterator p2)\n      throws IOException {\n    // The documentation of of both TermDocs and DocIdSetIterator claim\n    // that we must do next() before doc(). So we do, and if one of the\n    // lists is empty, obviously return 0;\n    if (p1 == null || p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return 0;\n    }\n    if (!p2.next()) {\n      return 0;\n    }\n    \n    int d1 = p1.docID();\n    int d2 = p2.getDocID();\n\n    int count = 0;\n    for (;;) {\n      if (d1 == d2) {\n        ++count;\n        if (p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      } else if (d1 < d2) {\n        if (p1.advance(d2) == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n      } else /* d1>d2 */ {\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Count the size of the intersection between two lists: a TermDocs (list of\n   * documents in a certain category) and a DocIdSetIterator (list of documents\n   * matching a query).\n   */\n  private static int countIntersection(DocsEnum p1, ScoredDocIDsIterator p2)\n      throws IOException {\n    // The documentation of of both TermDocs and DocIdSetIterator claim\n    // that we must do next() before doc(). So we do, and if one of the\n    // lists is empty, obviously return 0;\n    if (p1 == null || p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return 0;\n    }\n    if (!p2.next()) {\n      return 0;\n    }\n    \n    int d1 = p1.docID();\n    int d2 = p2.getDocID();\n\n    int count = 0;\n    for (;;) {\n      if (d1 == d2) {\n        ++count;\n        if (p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      } else if (d1 < d2) {\n        if (p1.advance(d2) == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n      } else /* d1>d2 */ {\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#countIntersection(DocsEnum,ScoredDocIDsIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Count the size of the intersection between two lists: a TermDocs (list of\n   * documents in a certain category) and a DocIdSetIterator (list of documents\n   * matching a query).\n   */\n  private static int countIntersection(DocsEnum p1, ScoredDocIDsIterator p2)\n      throws IOException {\n    // The documentation of of both TermDocs and DocIdSetIterator claim\n    // that we must do next() before doc(). So we do, and if one of the\n    // lists is empty, obviously return 0;\n    if (p1 == null || p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return 0;\n    }\n    if (!p2.next()) {\n      return 0;\n    }\n    \n    int d1 = p1.docID();\n    int d2 = p2.getDocID();\n\n    int count = 0;\n    for (;;) {\n      if (d1 == d2) {\n        ++count;\n        if (p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      } else if (d1 < d2) {\n        if (p1.advance(d2) == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n      } else /* d1>d2 */ {\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#countIntersection(DocsEnum,ScoredDocIDsIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Count the size of the intersection between two lists: a TermDocs (list of\n   * documents in a certain category) and a DocIdSetIterator (list of documents\n   * matching a query).\n   */\n  private static int countIntersection(DocsEnum p1, ScoredDocIDsIterator p2)\n      throws IOException {\n    // The documentation of of both TermDocs and DocIdSetIterator claim\n    // that we must do next() before doc(). So we do, and if one of the\n    // lists is empty, obviously return 0;\n    if (p1 == null || p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n      return 0;\n    }\n    if (!p2.next()) {\n      return 0;\n    }\n    \n    int d1 = p1.docID();\n    int d2 = p2.getDocID();\n\n    int count = 0;\n    for (;;) {\n      if (d1 == d2) {\n        ++count;\n        if (p1.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      } else if (d1 < d2) {\n        if (p1.advance(d2) == DocIdSetIterator.NO_MORE_DOCS) {\n          break; // end of list 1, nothing more in intersection\n        }\n        d1 = p1.docID();\n      } else /* d1>d2 */ {\n        if (!advance(p2, d1)) {\n          break; // end of list 2, nothing more in intersection\n        }\n        d2 = p2.getDocID();\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}