{"path":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      Random random = newRandom();\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                           .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                               .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                           .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                               .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      Random random = newRandom();\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                           .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                               .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                           .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                               .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                                           .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n                               .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(-1));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.CREATE));\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n\n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"065d530f7c7a67789e972c4611cd4b2bd28a07e9","date":1324000361,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      // TODO: why does this test trigger NRTCachingDirectory's assert?\n      Directory directory = newFSDirectory(indexDir, null, false);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      // TODO: why does this test trigger NRTCachingDirectory's assert?\n      directory = newFSDirectory(indexDir, null, false);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592e183306e8e4efabf3e7e08d3e709c9b97dbb","date":1324403520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      // TODO: why does this test trigger NRTCachingDirectory's assert?\n      Directory directory = newFSDirectory(indexDir, null, false);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      // TODO: why does this test trigger NRTCachingDirectory's assert?\n      directory = newFSDirectory(indexDir, null, false);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":["065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n      \n      Directory directory = newFSDirectory(indexDir, null);\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(directory, si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(directory, si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = newFSDirectory(indexDir, null);\n      writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(-1).\n              setMergePolicy(newLogMergePolicy(10))\n      );\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(directory, si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(directory, si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(directory, siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"065d530f7c7a67789e972c4611cd4b2bd28a07e9":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"065d530f7c7a67789e972c4611cd4b2bd28a07e9":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}