{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","commits":[{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(String,Query,SortedSet[Term]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(String field, Query query, SortedSet<Term> allTerms) {\n    EnumSet<HighlightFlag> highlightFlags = getFlags(field);\n    BytesRef[] terms = filterExtractedTerms(field, allTerms);\n    PhraseHelper phraseHelper = getPhraseHelper(field, query, highlightFlags);\n    CharacterRunAutomaton[] automata = getAutomata(field, query, highlightFlags);\n    OffsetSource offsetSource = getOptimizedOffsetSource(field, terms, phraseHelper, automata);\n    switch (offsetSource) {\n      case ANALYSIS:\n        return new AnalysisOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n            this::preMultiTermQueryRewrite);\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,UHComponents).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getOffsetStrategy(OffsetSource,String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Set[HighlightFlag]).mjava","sourceNew":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, UHComponents components) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!components.getPhraseHelper().hasPositionSensitivity() &&\n            !components.getHighlightFlags().contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED) &&\n            !components.getHighlightFlags().contains(HighlightFlag.WEIGHT_MATCHES)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(components, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(components, getIndexAnalyzer(), this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(components);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(components);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(components);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","sourceOld":"  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,\n                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,\n                                                  Set<HighlightFlag> highlightFlags) {\n    switch (offsetSource) {\n      case ANALYSIS:\n        if (!phraseHelper.hasPositionSensitivity() &&\n            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {\n          //skip using a memory index since it's pure term filtering\n          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());\n        } else {\n          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),\n              this::preMultiTermQueryRewrite);\n        }\n      case NONE_NEEDED:\n        return NoOpOffsetStrategy.INSTANCE;\n      case TERM_VECTORS:\n        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS:\n        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);\n      case POSTINGS_WITH_TERM_VECTORS:\n        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);\n      default:\n        throw new IllegalArgumentException(\"Unrecognized offset source \" + offsetSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["f2e9861e4a2b724d9fc51b618714c579491b78d7","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"9856095f7afb5a607bf5e65077615ed91273508c":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["9856095f7afb5a607bf5e65077615ed91273508c","795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e9861e4a2b724d9fc51b618714c579491b78d7","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}