{"path":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1, r2;\n      synchronized(lock) {\n        r1 = IndexReader.open(dir1);\n        r2 = IndexReader.open(dir2);\n      }\n      if (r1.numDocs() != r2.numDocs())\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      r1.close();\n      r2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1, r2;\n      synchronized(lock) {\n        r1 = IndexReader.open(dir1);\n        r2 = IndexReader.open(dir2);\n      }\n      if (r1.numDocs() != r2.numDocs())\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      r1.close();\n      r2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1, r2;\n      synchronized(lock) {\n        r1 = DirectoryReader.open(dir1);\n        r2 = DirectoryReader.open(dir2);\n      }\n      if (r1.numDocs() != r2.numDocs())\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      r1.close();\n      r2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1, r2;\n      synchronized(lock) {\n        r1 = IndexReader.open(dir1);\n        r2 = IndexReader.open(dir2);\n      }\n      if (r1.numDocs() != r2.numDocs())\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      r1.close();\n      r2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30e0912f3a3069b115cfea44ff612c44d6906386","date":1365631344,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1=null, r2=null;\n      synchronized(lock) {\n        try {\n          r1 = DirectoryReader.open(dir1);\n          r2 = DirectoryReader.open(dir2);\n        } catch (IOException e) {\n          if (!e.getMessage().contains(\"on purpose\")) {\n            throw e;\n          }\n          if (r1 != null) {\n            r1.close();\n          }\n          if (r2 != null) {\n            r2.close();\n          }\n          return;\n        }\n      }\n      if (r1.numDocs() != r2.numDocs()) {\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      }\n      r1.close();\n      r2.close();\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1, r2;\n      synchronized(lock) {\n        r1 = DirectoryReader.open(dir1);\n        r2 = DirectoryReader.open(dir2);\n      }\n      if (r1.numDocs() != r2.numDocs())\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      r1.close();\n      r2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19db42d0b541c39fee97429b55d2cf8755d31856","date":1428461231,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTransactions.SearcherThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1=null, r2=null;\n      synchronized(lock) {\n        try {\n          r1 = DirectoryReader.open(dir1);\n          r2 = DirectoryReader.open(dir2);\n        } catch (Exception e) {\n          // can be rethrown as RuntimeException if it happens during a close listener\n          if (!e.getMessage().contains(\"on purpose\")) {\n            throw e;\n          }\n          // release resources\n          IOUtils.closeWhileHandlingException(r1, r2);\n          return;\n        }\n      }\n      if (r1.numDocs() != r2.numDocs()) {\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      }\n      IOUtils.closeWhileHandlingException(r1, r2);\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Throwable {\n      IndexReader r1=null, r2=null;\n      synchronized(lock) {\n        try {\n          r1 = DirectoryReader.open(dir1);\n          r2 = DirectoryReader.open(dir2);\n        } catch (IOException e) {\n          if (!e.getMessage().contains(\"on purpose\")) {\n            throw e;\n          }\n          if (r1 != null) {\n            r1.close();\n          }\n          if (r2 != null) {\n            r2.close();\n          }\n          return;\n        }\n      }\n      if (r1.numDocs() != r2.numDocs()) {\n        throw new RuntimeException(\"doc counts differ: r1=\" + r1.numDocs() + \" r2=\" + r2.numDocs());\n      }\n      r1.close();\n      r2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19db42d0b541c39fee97429b55d2cf8755d31856":["30e0912f3a3069b115cfea44ff612c44d6906386"],"30e0912f3a3069b115cfea44ff612c44d6906386":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19db42d0b541c39fee97429b55d2cf8755d31856"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["30e0912f3a3069b115cfea44ff612c44d6906386"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19db42d0b541c39fee97429b55d2cf8755d31856":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30e0912f3a3069b115cfea44ff612c44d6906386":["19db42d0b541c39fee97429b55d2cf8755d31856"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}