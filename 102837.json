{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46bf1a48fd33bf34430ade646b7dd67b984be2a8","date":1358725746,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.bytes.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.bytes.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.bytes.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c62e7afee69a9aa7036185473ffd37ed723755b3","date":1359388738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          if (result.bytes.length < bytes.maxLength) {\n            result.offset = 0;\n            result.bytes = new byte[bytes.maxLength];\n          }\n          data.readBytes(result.bytes, result.offset, bytes.maxLength);\n          result.length = bytes.maxLength;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        long address = bytes.offset + docID * (long)bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getFixedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getFixedBinary(FieldInfo field, final BinaryEntry bytes) {\n    final IndexInput data = this.data.clone();\n\n    return new LongBinaryDocValues() {\n      @Override\n      public void get(long id, BytesRef result) {\n        long address = bytes.offset + id * bytes.maxLength;\n        try {\n          data.seek(address);\n          // NOTE: we could have one buffer, but various consumers (e.g. FieldComparatorSource) \n          // assume \"they\" own the bytes after calling this!\n          final byte[] buffer = new byte[bytes.maxLength];\n          data.readBytes(buffer, 0, buffer.length);\n          result.bytes = buffer;\n          result.offset = 0;\n          result.length = buffer.length;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c62e7afee69a9aa7036185473ffd37ed723755b3"],"c62e7afee69a9aa7036185473ffd37ed723755b3":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["c62e7afee69a9aa7036185473ffd37ed723755b3"],"46bf1a48fd33bf34430ade646b7dd67b984be2a8":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"c62e7afee69a9aa7036185473ffd37ed723755b3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["46bf1a48fd33bf34430ade646b7dd67b984be2a8"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1a7bf5332d569e3d07c4b248462f5d212e26e9af","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}