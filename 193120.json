{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","commits":[{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bc667c48cc0a6ef96df2ed9a764da342e3d1730","date":1205081012,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustContentSource().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testExhaustDocMaker().mjava","sourceNew":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustContentSource() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SingleDocSource\",\n        \"content.source.log.step=1\",\n        \"doc.term.vector=false\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test Exhasting Doc Maker logic\n   */\n  public void testExhaustDocMaker() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\",\n        \"doc.add.log.step=1\",\n        \"doc.term.vector=false\",\n        \"doc.maker.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"{ AddDoc } : * \",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 100\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 30\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",139,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false,IndexWriter.MaxFieldLength.UNLIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1 docs were added to the index, this is what we expect to find!\",1,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81573e29e6e5db648330b225c60d44b1c3eb388e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["3c528d38c8d9b2452e932321931b11e7c19a96d5"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["5bc667c48cc0a6ef96df2ed9a764da342e3d1730"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"5bc667c48cc0a6ef96df2ed9a764da342e3d1730":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}