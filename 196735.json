{"path":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","commits":[{"id":"103e2ec175f1aa5629df5bcd34eb1c53055caeb1","date":1268243753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setIndexDeletionPolicy(IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: allows an optional {@link IndexDeletionPolicy} implementation to be\n   * specified. You can use this to control when prior commits are deleted from\n   * the index. The default policy is {@link KeepOnlyLastCommitDeletionPolicy}\n   * which removes all prior commits as soon as a new commit is done (this\n   * matches behavior before 2.2). Creating your own policy can allow you to\n   * explicitly keep previous \"point in time\" commits alive in the index for\n   * some time, to allow readers to refresh to the new commit without having the\n   * old commit deleted out from under them. This is necessary on filesystems\n   * like NFS that do not support \"delete on last close\" semantics, which\n   * Lucene's \"point in time\" search normally relies on.\n   * <p>\n   * <b>NOTE:</b> the deletion policy cannot be null. If <code>null</code> is\n   * passed, the deletion policy will be set to the default.\n   */\n  public IndexWriterConfig setIndexDeletionPolicy(IndexDeletionPolicy delPolicy) {\n    this.delPolicy = delPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : delPolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e52fea2c4081a1e552b98506691990be59503168":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}