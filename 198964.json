{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = IndexReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    MockDirectoryWrapper dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978de4e2d23054c6624dd5928ddeb734dca68eec","date":1370592803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    MockIndexWriter writer  = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()));\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.shutdown();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(analyzer)\n                                                                   .setRAMBufferSizeMB(0.1)\n                                                                   .setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.shutdown();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer)\n        .setRAMBufferSizeMB(0.1).setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.shutdown();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(analyzer)\n                                                                   .setRAMBufferSizeMB(0.1)\n                                                                   .setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(analyzer)\n                                                                   .setRAMBufferSizeMB(0.1)\n                                                                   .setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.shutdown();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testRandomExceptions().mjava","sourceNew":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(random(), dir, newIndexWriterConfig(analyzer)\n                                                                   .setRAMBufferSizeMB(0.1)\n                                                                   .setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomExceptions() throws Throwable {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: start testRandomExceptions\");\n    }\n    Directory dir = newDirectory();\n\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n    \n    IndexWriter writer  = RandomIndexWriter.mockIndexWriter(dir, newIndexWriterConfig(analyzer)\n                                                                   .setRAMBufferSizeMB(0.1)\n                                                                   .setMergeScheduler(new ConcurrentMergeScheduler()), new TestPoint1());\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n    //writer.setMaxBufferedDocs(10);\n    if (VERBOSE) {\n      System.out.println(\"TEST: initial commit\");\n    }\n    writer.commit();\n\n    IndexerThread thread = new IndexerThread(0, writer);\n    thread.run();\n    if (thread.failure != null) {\n      thread.failure.printStackTrace(System.out);\n      fail(\"thread \" + thread.getName() + \": hit unexpected failure\");\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: commit after thread start\");\n    }\n    writer.commit();\n\n    try {\n      writer.close();\n    } catch (Throwable t) {\n      System.out.println(\"exception during close:\");\n      t.printStackTrace(System.out);\n      writer.rollback();\n    }\n\n    // Confirm that when doc hits exception partway through tokenization, it's deleted:\n    IndexReader r2 = DirectoryReader.open(dir);\n    final int count = r2.docFreq(new Term(\"content4\", \"aaa\"));\n    final int count2 = r2.docFreq(new Term(\"content4\", \"ddd\"));\n    assertEquals(count, count2);\n    r2.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"978de4e2d23054c6624dd5928ddeb734dca68eec":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["978de4e2d23054c6624dd5928ddeb734dca68eec"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"]},"commit2Childs":{"978de4e2d23054c6624dd5928ddeb734dca68eec":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["978de4e2d23054c6624dd5928ddeb734dca68eec","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}