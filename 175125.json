{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","commits":[{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n     //test hitting two excludes before an include\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanTermQuery[]{term1, term2}, 2, true);\n     SpanTermQuery exclude = new SpanTermQuery(new Term(\"field\", \"one\"));\n\n     SpanNotQuery query = new SpanNotQuery(near, exclude, 4, 1);\n\n     checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n     assertTrue(searcher.explain(query, 242).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 942).getValue() > 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n     //test hitting two excludes before an include\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanTermQuery[]{term1, term2}, 2, true);\n     SpanTermQuery exclude = new SpanTermQuery(new Term(\"field\", \"one\"));\n\n     SpanNotQuery query = new SpanNotQuery(near, exclude, 4, 1);\n\n     checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n     assertTrue(searcher.explain(query, 242).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 942).getValue() > 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","sourceNew":"  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n    //test hitting two excludes before an include\n    SpanQuery near = spanNearOrderedQuery(\"field\", 2, \"forty\", \"two\");\n    SpanQuery exclude = spanTermQuery(\"field\", \"one\");\n    SpanQuery query = spanNotQuery(near, exclude, 4, 1);\n\n    checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n    assertTrue(searcher.explain(query, 242).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 942).getValue() > 0.0f);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n     //test hitting two excludes before an include\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"two\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanTermQuery[]{term1, term2}, 2, true);\n     SpanTermQuery exclude = new SpanTermQuery(new Term(\"field\", \"one\"));\n\n     SpanNotQuery query = new SpanNotQuery(near, exclude, 4, 1);\n\n     checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n     assertTrue(searcher.explain(query, 242).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 942).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowDoubleExcludesBefore().mjava","sourceNew":"  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n    //test hitting two excludes before an include\n    SpanQuery near = spanNearOrderedQuery(\"field\", 2, \"forty\", \"two\");\n    SpanQuery exclude = spanTermQuery(\"field\", \"one\");\n    SpanQuery query = spanNotQuery(near, exclude, 4, 1);\n\n    checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n    assertTrue(searcher.explain(query, 242).getValue().doubleValue() > 0.0f);\n    assertTrue(searcher.explain(query, 942).getValue().doubleValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowDoubleExcludesBefore() throws Exception {\n    //test hitting two excludes before an include\n    SpanQuery near = spanNearOrderedQuery(\"field\", 2, \"forty\", \"two\");\n    SpanQuery exclude = spanTermQuery(\"field\", \"one\");\n    SpanQuery query = spanNotQuery(near, exclude, 4, 1);\n\n    checkHits(query, new int[]\n       {42, 242, 342, 442, 542, 642, 742, 842, 942});\n\n    assertTrue(searcher.explain(query, 242).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 942).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}