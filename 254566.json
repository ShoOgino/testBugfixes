{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","commits":[{"id":"8ff44d836e8863507fa8711d2b1b2dd723516ca0","date":1461653163,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.CrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, plane, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fe41964e49958f662028ea7ed8c224e0955edae","date":1462534610,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (edge.plane.evaluateIsZero(thePointX, thePointY, thePointZ) && edge.startPlane.isWithin(thePointX, thePointY, thePointZ) && edge.endPlane.isWithin(thePointX, thePointY, thePointZ)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":["affd6585e0a92f8483e2f9dd579c1927505c7377"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (edge.plane.evaluateIsZero(thePointX, thePointY, thePointZ) && edge.startPlane.isWithin(thePointX, thePointY, thePointZ) && edge.endPlane.isWithin(thePointX, thePointY, thePointZ)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (edge.plane.evaluateIsZero(thePointX, thePointY, thePointZ) && edge.startPlane.isWithin(thePointX, thePointY, thePointZ) && edge.endPlane.isWithin(thePointX, thePointY, thePointZ)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (thePoint != null && edge.plane.evaluateIsZero(thePoint) && edge.startPlane.isWithin(thePoint) && edge.endPlane.isWithin(thePoint)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7090fb56105afb6515b6506724359c32ec7639","date":1521211434,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.SectorLinearCrossingEdgeIterator#matches(Edge).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#matches(Edge).mjava","sourceNew":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (edge.plane.evaluateIsZero(thePointX, thePointY, thePointZ) && edge.startPlane.isWithin(thePointX, thePointY, thePointZ) && edge.endPlane.isWithin(thePointX, thePointY, thePointZ)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean matches(final Edge edge) {\n      // Early exit if the point is on the edge.\n      if (edge.plane.evaluateIsZero(thePointX, thePointY, thePointZ) && edge.startPlane.isWithin(thePointX, thePointY, thePointZ) && edge.endPlane.isWithin(thePointX, thePointY, thePointZ)) {\n        return false;\n      }\n      final GeoPoint[] crossingPoints = plane.findCrossings(planetModel, edge.plane, bound1, bound2, edge.startPlane, edge.endPlane);\n      if (crossingPoints != null) {\n        // We need to handle the endpoint case, which is quite tricky.\n        for (final GeoPoint crossingPoint : crossingPoints) {\n          countCrossingPoint(crossingPoint, edge);\n        }\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e7090fb56105afb6515b6506724359c32ec7639":["7fe41964e49958f662028ea7ed8c224e0955edae"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","7fe41964e49958f662028ea7ed8c224e0955edae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8ff44d836e8863507fa8711d2b1b2dd723516ca0"],"7fe41964e49958f662028ea7ed8c224e0955edae":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"8ff44d836e8863507fa8711d2b1b2dd723516ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","7fe41964e49958f662028ea7ed8c224e0955edae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e7090fb56105afb6515b6506724359c32ec7639"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"]},"commit2Childs":{"1e7090fb56105afb6515b6506724359c32ec7639":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","8ff44d836e8863507fa8711d2b1b2dd723516ca0","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","7fe41964e49958f662028ea7ed8c224e0955edae","55b50463286869f584cf849d1587a0fcd54d1dfa"],"7fe41964e49958f662028ea7ed8c224e0955edae":["1e7090fb56105afb6515b6506724359c32ec7639","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8ff44d836e8863507fa8711d2b1b2dd723516ca0":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}