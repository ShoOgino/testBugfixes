{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testFailExecuteScript().mjava","commits":[{"id":"0383eb61be84beb71a9984dd1fad5269f18abfde","date":1491252834,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testFailExecuteScript().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFailExecuteScript() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n   \n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    File toExecute = new File(tmpDir.toString(), \"failExecuteScript\");\n    assertTrue(\"Should have been able to create file '\" + toExecute.getAbsolutePath() + \"' \", toExecute.createNewFile());\n    \n    String[] toolArgs = new String[] {\n        \"-e\", \"techproducts\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort),\n        \"-script\", toExecute.getAbsolutePath().toString()\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    DefaultExecutor executor = new DefaultExecutor();\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    int code = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    assertTrue(\"Execution should have failed with return code 1\", code == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"585311e6f81a3bcaecbdca38eebafa6b58e6da83","date":1491296430,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testFailExecuteScript().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFailExecuteScript() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath()+\" not found and is required to run this test!\");\n   \n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    // need a port to start the example server on\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    File toExecute = new File(tmpDir.toString(), \"failExecuteScript\");\n    assertTrue(\"Should have been able to create file '\" + toExecute.getAbsolutePath() + \"' \", toExecute.createNewFile());\n    \n    String[] toolArgs = new String[] {\n        \"-e\", \"techproducts\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath(),\n        \"-p\", String.valueOf(bindPort),\n        \"-script\", toExecute.getAbsolutePath().toString()\n    };\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    DefaultExecutor executor = new DefaultExecutor();\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, System.in, stdoutSim);\n    int code = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    assertTrue(\"Execution should have failed with return code 1\", code == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0383eb61be84beb71a9984dd1fad5269f18abfde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"585311e6f81a3bcaecbdca38eebafa6b58e6da83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0383eb61be84beb71a9984dd1fad5269f18abfde"]},"commit2Childs":{"0383eb61be84beb71a9984dd1fad5269f18abfde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0383eb61be84beb71a9984dd1fad5269f18abfde","585311e6f81a3bcaecbdca38eebafa6b58e6da83"],"585311e6f81a3bcaecbdca38eebafa6b58e6da83":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["585311e6f81a3bcaecbdca38eebafa6b58e6da83","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}