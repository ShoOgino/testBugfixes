{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","sourceNew":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","sourceOld":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","sourceNew":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","sourceOld":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","sourceNew":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testIncludeOrig().mjava","sourceNew":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testIncludeOrig() throws Exception {\n    b = new SynonymMap.Builder(true);\n    final boolean keepOrig = true;\n    add(\"a b\", \"ab\", keepOrig);\n    add(\"a c\", \"ac\", keepOrig);\n    add(\"a\", \"aa\", keepOrig);\n    add(\"b\", \"bb\", keepOrig);\n    add(\"z x c v\", \"zxcv\", keepOrig);\n    add(\"x c\", \"xc\", keepOrig);\n    final SynonymMap map = b.build();\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"$\", \n        new String[] { \"$\" },\n        new int[] { 1 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"a\", \n        new String[] { \"a\", \"aa\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"$ a\", \n        new String[] { \"$\", \"a\", \"aa\" },\n        new int[] { 1, 1, 0 });\n    assertAnalyzesTo(a, \"a $\", \n        new String[] { \"a\", \"aa\", \"$\" },\n        new int[] { 1, 0, 1 });\n    assertAnalyzesTo(a, \"$ a !\", \n        new String[] { \"$\", \"a\", \"aa\", \"!\" },\n        new int[] { 1, 1, 0, 1 });\n    assertAnalyzesTo(a, \"a a\", \n        new String[] { \"a\", \"aa\", \"a\", \"aa\" },\n        new int[] { 1, 0, 1, 0 });\n    assertAnalyzesTo(a, \"b\", \n        new String[] { \"b\", \"bb\" },\n        new int[] { 1, 0 });\n    assertAnalyzesTo(a, \"z x c v\",\n        new String[] { \"z\", \"zxcv\", \"x\", \"c\", \"v\" },\n        new int[] { 1, 0, 1, 1, 1 });\n    assertAnalyzesTo(a, \"z x c $\",\n        new String[] { \"z\", \"x\", \"xc\", \"c\", \"$\" },\n        new int[] { 1, 1, 0, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}