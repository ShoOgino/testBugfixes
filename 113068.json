{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newField(\"id\", \"\"+docIDX, StringField.TYPE_STORED));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newField(\"id\", \"\"+docIDX, StringField.TYPE_STORED));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newField(\"id\", \"\"+docIDX, StringField.TYPE_STORED));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1d5408c3fa04da2652aa3db3f21d700f7111cef","date":1360854465,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w, true),\n                    Collections.singletonMap(\"id\", Type.INTEGER));\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new IntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.shutdown();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["5f183729ece15402db94402d482f29ebac4f7f54","59a0020b413d44dd79d85d7a66ed5004265fb453"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f183729ece15402db94402d482f29ebac4f7f54":["f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","5f183729ece15402db94402d482f29ebac4f7f54"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3b41f996b22bd5518650f897d050088ff808ec03":["04f07771a2a7dd3a395700665ed839c3dae2def2","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["5f183729ece15402db94402d482f29ebac4f7f54"],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b41f996b22bd5518650f897d050088ff808ec03","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["04f07771a2a7dd3a395700665ed839c3dae2def2","ef0d8a69209261514c5739c770bba706c2308450"],"5f183729ece15402db94402d482f29ebac4f7f54":["37a0f60745e53927c4c876cfe5b5a58170f0646c","95303ff3749680c743b9425f9cf99e6e4065e8a8","59a0020b413d44dd79d85d7a66ed5004265fb453"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["5f183729ece15402db94402d482f29ebac4f7f54","3b41f996b22bd5518650f897d050088ff808ec03"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","95303ff3749680c743b9425f9cf99e6e4065e8a8","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}