{"path":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","commits":[{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"/dev/null","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              & attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase()\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","13e1e1d67b14415e2874ddabd426f796ef26b6ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13e1e1d67b14415e2874ddabd426f796ef26b6ae","date":1242157844,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase()\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              & attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase()\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","pathOld":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getAttribute(String).mjava","sourceNew":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase()\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","sourceOld":"    public Object getAttribute(String attribute)\n            throws AttributeNotFoundException, MBeanException, ReflectionException {\n      Object val;\n      if (staticStats.contains(attribute) && attribute != null\n              && attribute.length() > 0) {\n        try {\n          String getter = \"get\" + attribute.substring(0, 1).toUpperCase()\n                  + attribute.substring(1);\n          Method meth = infoBean.getClass().getMethod(getter);\n          val = meth.invoke(infoBean);\n        } catch (Exception e) {\n          throw new AttributeNotFoundException(attribute);\n        }\n      } else {\n        NamedList list = infoBean.getStatistics();\n        val = list.get(attribute);\n      }\n\n      if (val != null)\n        return val.toString();\n      else\n        return val;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"13e1e1d67b14415e2874ddabd426f796ef26b6ae":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["13e1e1d67b14415e2874ddabd426f796ef26b6ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"13e1e1d67b14415e2874ddabd426f796ef26b6ae":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["13e1e1d67b14415e2874ddabd426f796ef26b6ae"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}