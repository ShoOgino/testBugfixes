{"path":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(IndexReader).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(reader);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(IndexReader).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(IndexReader reader) throws IOException {\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(reader);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getLiveDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getLiveDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getLiveDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getDeletedDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","sourceNew":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Object coreKey = reader.getCoreCacheKey();\n\n    SpanFilterResult result = cache.get(reader, coreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    } else {\n      missCount++;\n      // cache miss: we use no acceptDocs here\n      // (this saves time on building SpanFilterResult, the acceptDocs will be applied on the cached set)\n      result = spanFilterResultToCache(filter.bitSpans(context, null/**!!!*/), reader);\n      cache.put(coreKey, result);\n    }\n    \n    return result;\n  }\n\n","sourceOld":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n\n    final Object coreKey = reader.getCoreCacheKey();\n    final Object delCoreKey = reader.hasDeletions() ? reader.getLiveDocs() : coreKey;\n\n    SpanFilterResult result = cache.get(reader, coreKey, delCoreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    }\n\n    missCount++;\n    result = filter.bitSpans(context);\n\n    cache.put(coreKey, delCoreKey, result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#getCachedResult(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  private SpanFilterResult getCachedResult(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Object coreKey = reader.getCoreCacheKey();\n\n    SpanFilterResult result = cache.get(reader, coreKey);\n    if (result != null) {\n      hitCount++;\n      return result;\n    } else {\n      missCount++;\n      // cache miss: we use no acceptDocs here\n      // (this saves time on building SpanFilterResult, the acceptDocs will be applied on the cached set)\n      result = spanFilterResultToCache(filter.bitSpans(context, null/**!!!*/), reader);\n      cache.put(coreKey, result);\n    }\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c8323d210478d76a02372693d254b69aac614689","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c8323d210478d76a02372693d254b69aac614689","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6620df8541b174097b1133a4fc370adb2e570524"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6620df8541b174097b1133a4fc370adb2e570524","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}