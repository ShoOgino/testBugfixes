{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#evictIfNecessary().mjava","sourceNew":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        iterator.remove();\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache keep sync'ed\n    if (requiresEviction()) {\n      Iterator<Filter> iterator = mostRecentlyUsedFilters.iterator();\n      do {\n        final Filter filter = iterator.next();\n        iterator.remove();\n        onEviction(filter);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97b669a6c8dac1437c3856f4133d83c986515ae","date":1427703853,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","sourceNew":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      \n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        iterator.remove();\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      \n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa","date":1461326984,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","sourceNew":"  void evictIfNecessary() {\n    assert lock.isHeldByCurrentThread();\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      \n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","sourceNew":"  void evictIfNecessary() {\n    assert lock.isHeldByCurrentThread();\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":"  synchronized void evictIfNecessary() {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n      \n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e703a107dabba92e897b4405f4a69f135565a2","date":1567669029,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#evictIfNecessary().mjava","sourceNew":"  private void evictIfNecessary() {\n    assert lock.isHeldByCurrentThread();\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","sourceOld":"  void evictIfNecessary() {\n    assert lock.isHeldByCurrentThread();\n    // under a lock to make sure that mostRecentlyUsedQueries and cache keep sync'ed\n    if (requiresEviction()) {\n\n      Iterator<Query> iterator = mostRecentlyUsedQueries.iterator();\n      do {\n        final Query query = iterator.next();\n        final int size = mostRecentlyUsedQueries.size();\n        iterator.remove();\n        if (size == mostRecentlyUsedQueries.size()) {\n          // size did not decrease, because the hash of the query changed since it has been\n          // put into the cache\n          throw new ConcurrentModificationException(\"Removal from the cache failed! This \" +\n              \"is probably due to a query which has been modified after having been put into \" +\n              \" the cache or a badly implemented clone(). Query class: [\" + query.getClass() +\n              \"], query: [\" + query + \"]\");\n        }\n        onEviction(query);\n      } while (iterator.hasNext() && requiresEviction());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b97b669a6c8dac1437c3856f4133d83c986515ae"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4e703a107dabba92e897b4405f4a69f135565a2":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["b97b669a6c8dac1437c3856f4133d83c986515ae","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4e703a107dabba92e897b4405f4a69f135565a2"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["b97b669a6c8dac1437c3856f4133d83c986515ae"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["b97b669a6c8dac1437c3856f4133d83c986515ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"d4e703a107dabba92e897b4405f4a69f135565a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d4e703a107dabba92e897b4405f4a69f135565a2"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7f901826e47f75f810d7aae24b0455d21ea1fe2","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}