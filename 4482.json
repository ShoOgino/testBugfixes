{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","commits":[{"id":"282a69d7d427c265f321423b5a3f989aa16dab10","date":1494313009,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueueCache().mjava","sourceNew":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getZkStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getZkStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getZkStats().getQueueLength());\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueueCache() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    ZkDistributedQueue consumer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer = makeDistributedQueue(dqZNode);\n    DistributedQueue producer2 = makeDistributedQueue(dqZNode);\n\n    producer2.offer(data);\n    producer.offer(data);\n    producer.offer(data);\n    consumer.poll();\n\n    assertEquals(2, consumer.getStats().getQueueLength());\n    producer.offer(data);\n    producer2.offer(data);\n    consumer.poll();\n    // Wait for watcher being kicked off\n    while (!consumer.isDirty()) {\n      Thread.sleep(20);\n    }\n    // DQ still have elements in their queue, so we should not fetch elements path from Zk\n    assertEquals(1, consumer.getStats().getQueueLength());\n    consumer.poll();\n    consumer.peek();\n    assertEquals(2, consumer.getStats().getQueueLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","282a69d7d427c265f321423b5a3f989aa16dab10"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"282a69d7d427c265f321423b5a3f989aa16dab10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"282a69d7d427c265f321423b5a3f989aa16dab10":["e9017cf144952056066919f1ebc7897ff9bd71b1","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","282a69d7d427c265f321423b5a3f989aa16dab10"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}