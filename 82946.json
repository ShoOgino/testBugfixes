{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","date":1461702806,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom+\"->\"+traverseTo));\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/GatherNodesStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(@SuppressWarnings({\"rawtypes\"})Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    if(includeStreams && !(tupleStream instanceof NodeStream)){\n      if(tupleStream instanceof Expressible){\n        expression.addParameter(((Expressible)tupleStream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This GatherNodesStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    if(metrics != null) {\n      for (Metric metric : metrics) {\n        expression.addParameter(metric.toExpression(factory));\n      }\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gather\", zkHost));\n    if(maxDocFreq > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"maxDocFreq\", Integer.toString(maxDocFreq)));\n    }\n    if(tupleStream instanceof NodeStream) {\n      NodeStream nodeStream = (NodeStream)tupleStream;\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", nodeStream.toString() + \"->\" + traverseTo));\n\n    } else {\n      expression.addParameter(new StreamExpressionNamedParameter(\"walk\", traverseFrom + \"->\" + traverseTo));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"trackTraversal\", Boolean.toString(trackTraversal)));\n\n    StringBuilder buf = new StringBuilder();\n    for(Traversal.Scatter sc : scatter) {\n      if(buf.length() > 0 ) {\n        buf.append(\",\");\n      }\n      buf.append(sc.toString());\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"scatter\", buf.toString()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","1eb10453c4217aa50392c51e3e89deb8b779bd51"]},"commit2Childs":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}