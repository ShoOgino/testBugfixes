{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,Replica> shards = new LinkedHashMap<String,Replica>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getReplicasMap());\n          //XXX preserve existing leader\n          for(Entry<String, Replica> edit: slice.getReplicasMap().entrySet()) {\n            if(existingSlice.getReplicasMap().get(edit.getKey())!=null && existingSlice.getReplicasMap().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, Object> newProps = new HashMap<String,Object>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getReplicasMap().get(edit.getKey()).getStr(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new Replica(edit.getKey(), newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","date":1347918051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, Map<String, Slice>> newCollections = new LinkedHashMap<String,Map<String,Slice>>(state.getCollectionStates());  // make a shallow copy\n        Map<String, Slice> slices = newCollections.get(collection);\n        if (slices == null) {\n          slices = new HashMap<String, Slice>(1);\n        } else {\n          slices = new LinkedHashMap<String, Slice>(slices); // make a shallow copy\n        }\n        slices.put(slice.getName(),  slice);\n        newCollections.put(collection, slices);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,Replica> shards = new LinkedHashMap<String,Replica>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getReplicasMap());\n          //XXX preserve existing leader\n          for(Entry<String, Replica> edit: slice.getReplicasMap().entrySet()) {\n            if(existingSlice.getReplicasMap().get(edit.getKey())!=null && existingSlice.getReplicasMap().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, Object> newProps = new HashMap<String,Object>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getReplicasMap().get(edit.getKey()).getStr(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new Replica(edit.getKey(), newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          // TODO: is updateSlice really called on a collection that doesn't exist?\n          slices = new HashMap<String, Slice>(1);\n          props = defaultCollectionProps();\n          router = DocRouter.DEFAULT;\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, Map<String, Slice>> newCollections = new LinkedHashMap<String,Map<String,Slice>>(state.getCollectionStates());  // make a shallow copy\n        Map<String, Slice> slices = newCollections.get(collection);\n        if (slices == null) {\n          slices = new HashMap<String, Slice>(1);\n        } else {\n          slices = new LinkedHashMap<String, Slice>(slices); // make a shallow copy\n        }\n        slices.put(slice.getName(),  slice);\n        newCollections.put(collection, slices);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          // TODO: is updateSlice really called on a collection that doesn't exist?\n          slices = new HashMap<String, Slice>(1);\n          props = defaultCollectionProps();\n          router = DocRouter.DEFAULT;\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, Map<String, Slice>> newCollections = new LinkedHashMap<String,Map<String,Slice>>(state.getCollectionStates());  // make a shallow copy\n        Map<String, Slice> slices = newCollections.get(collection);\n        if (slices == null) {\n          slices = new HashMap<String, Slice>(1);\n        } else {\n          slices = new LinkedHashMap<String, Slice>(slices); // make a shallow copy\n        }\n        slices.put(slice.getName(),  slice);\n        newCollections.put(collection, slices);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, makeMap(\"name\", ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, makeMap(\"name\", ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<String, Slice>(1);\n          props = new HashMap<String,Object>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<String, Slice>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        Map<String, DocCollection> newCollections = new LinkedHashMap<>(state.getCollectionStates());  // make a shallow copy\n        DocCollection coll = newCollections.get(collectionName);\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n        newCollections.put(collectionName, newCollection);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return new ClusterState(state.getLiveNodes(), newCollections);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWith(slices);\n        }\n\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWith(slices);\n        }\n\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        Map<String,Object> props;\n        DocRouter router;\n\n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new HashMap<>(1);\n          props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          router = new ImplicitDocRouter();\n        } else {\n          props = coll.getProperties();\n          router = coll.getRouter();\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n        }\n        slices.put(slice.getName(), slice);\n        DocCollection newCollection = new DocCollection(collectionName, slices, props, router);\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"    ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"    ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"      private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"    private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"    ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"    private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"    ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":"    private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","sourceOld":"    private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        // System.out.println(\"###!!!### OLD CLUSTERSTATE: \" + JSONUtil.toJSON(state.getCollectionStates()));\n        // System.out.println(\"Updating slice:\" + slice);\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","sourceNew":null,"sourceOld":"    private ClusterState updateSlice(ClusterState state, String collectionName, Slice slice) {\n        DocCollection newCollection = null;\n        DocCollection coll = state.getCollectionOrNull(collectionName) ;\n        Map<String,Slice> slices;\n        \n        if (coll == null) {\n          //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n          // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n          slices = new LinkedHashMap<>(1);\n          slices.put(slice.getName(), slice);\n          Map<String,Object> props = new HashMap<>(1);\n          props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n          newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n        } else {\n          slices = new LinkedHashMap<>(coll.getSlicesMap()); // make a shallow copy\n          slices.put(slice.getName(), slice);\n          newCollection = coll.copyWithSlices(slices);\n        }\n\n        // System.out.println(\"###!!!### NEW CLUSTERSTATE: \" + JSONUtil.toJSON(newCollections));\n\n        return newState(state, singletonMap(collectionName, newCollection));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["9279b175e5e66258442d2123a50f052219a9cc1b"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["89f828d954597b98a28942874636f35c719b8a5d"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["89f828d954597b98a28942874636f35c719b8a5d","1eeda7e62e149f90eee8895af874c74efa7d4852"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","89f828d954597b98a28942874636f35c719b8a5d"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["9279b175e5e66258442d2123a50f052219a9cc1b","dc2bafa00000be70227a04c29e3f885ff41e531d"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"c5a558d54519c651068ddb202f03befefb1514a7":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["584c1ee8712b5af28075d98028ccab111d6eeda2"]},"commit2Childs":{"89f828d954597b98a28942874636f35c719b8a5d":["1eeda7e62e149f90eee8895af874c74efa7d4852","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e187a371a1d09379bb452c2c13a7b9221525dff8"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"fa64435b5902ce266c23755a4a00691a3285dab8":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"9279b175e5e66258442d2123a50f052219a9cc1b":["dc2bafa00000be70227a04c29e3f885ff41e531d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","0a22eafe3f72a4c2945eaad9547e6c78816978f4","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}