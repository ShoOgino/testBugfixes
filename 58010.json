{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","commits":[{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n\n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n\n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n\n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {\n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n\n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n\n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n\n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {\n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48e6317c36b128552eaed2363bb069267defb0e0"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"48e6317c36b128552eaed2363bb069267defb0e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}