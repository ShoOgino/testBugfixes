{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || termComp.compare(term, currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (termComp.compare(term, rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","sourceOld":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || termComp.compare(term, currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (termComp.compare(term, rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (term.compareTo(rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","sourceOld":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || termComp.compare(term, currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (termComp.compare(term, rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#accept(BytesRef).mjava","sourceNew":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (term.compareTo(rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","sourceOld":"    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {\n        if (rangeBounds.isEmpty())\n          return AcceptStatus.END;\n        // peek next sub-range, only seek if the current term is smaller than next lower bound\n        if (term.compareTo(rangeBounds.getFirst()) < 0)\n          return AcceptStatus.NO_AND_SEEK;\n        // step forward to next range without seeking, as next lower range bound is less or equal current term\n        nextRange();\n      }\n      return AcceptStatus.YES;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}