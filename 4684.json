{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","commits":[{"id":"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f","date":1355410999,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","pathOld":"/dev/null","sourceNew":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<BooleanQuery>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        String name = schema.printableUniqueKey(reader.document(id));\n        \n        // Added in-case uniqueKey is uri.\n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), name.replace(\":\",\n                \"\\\\:\"))), BooleanClause.Occur.MUST_NOT);\n        result.add(name, mltQuery);\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98ef9d9ecf768191e0c139463409e9297f8367de","date":1356019463,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","sourceNew":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<BooleanQuery>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery);\n      }\n\n      return result;\n    }\n\n","sourceOld":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<BooleanQuery>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        String name = schema.printableUniqueKey(reader.document(id));\n        \n        // Added in-case uniqueKey is uri.\n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), name.replace(\":\",\n                \"\\\\:\"))), BooleanClause.Occur.MUST_NOT);\n        result.add(name, mltQuery);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","pathOld":"/dev/null","sourceNew":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<BooleanQuery>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery);\n      }\n\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","sourceNew":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery);\n      }\n\n      return result;\n    }\n\n","sourceOld":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<BooleanQuery>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery);\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#getMoreLikeTheseQuery(DocList).mjava","sourceNew":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery.build());\n      }\n\n      return result;\n    }\n\n","sourceOld":"    public NamedList<BooleanQuery> getMoreLikeTheseQuery(DocList docs)\n        throws IOException {\n      IndexSchema schema = searcher.getSchema();\n      NamedList<BooleanQuery> result = new NamedList<>();\n      DocIterator iterator = docs.iterator();\n      while (iterator.hasNext()) {\n        int id = iterator.nextDoc();\n        String uniqueId = schema.printableUniqueKey(reader.document(id));\n\n        BooleanQuery mltquery = (BooleanQuery) mlt.like(id);\n        if (mltquery.clauses().size() == 0) {\n          return result;\n        }\n        mltquery = (BooleanQuery) getBoostedQuery(mltquery);\n        \n        // exclude current document from results\n        BooleanQuery mltQuery = new BooleanQuery();\n        mltQuery.add(mltquery, BooleanClause.Occur.MUST);\n        \n        mltQuery.add(\n            new TermQuery(new Term(uniqueKeyField.getName(), uniqueId)), BooleanClause.Occur.MUST_NOT);\n        result.add(uniqueId, mltQuery);\n      }\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98ef9d9ecf768191e0c139463409e9297f8367de"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["98ef9d9ecf768191e0c139463409e9297f8367de"],"98ef9d9ecf768191e0c139463409e9297f8367de":["b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"98ef9d9ecf768191e0c139463409e9297f8367de":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b38d50314a7281b1ef90bfb3bb0bc91a38f0078f"],"b38d50314a7281b1ef90bfb3bb0bc91a38f0078f":["98ef9d9ecf768191e0c139463409e9297f8367de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}