{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = _TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = _TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<BytesRef>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    final List<BytesRef> savedTerms = new ArrayList<>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#findTerms(IndexReader).mjava","sourceNew":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiTerms.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","sourceOld":"  private List<BytesRef> findTerms(IndexReader r) throws IOException {\n    System.out.println(\"TEST: findTerms\");\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    final List<BytesRef> savedTerms = new ArrayList<>();\n    int nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(term));\n        System.out.println(\"TEST: add \" + term);\n        nextSave = TestUtil.nextInt(random(), 500000, 1000000);\n      }\n    }\n    return savedTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}