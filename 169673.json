{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = atLeast(100);\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ede75b7590bcf80576a98c1597ca7be91a58634e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = atLeast(100);\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ecb18e7a0316ea550446daf785b5fa65c049cdd","date":1428100837,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = atLeast(100);\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = Math.abs(random().nextInt());\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":["ede75b7590bcf80576a98c1597ca7be91a58634e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1ecb18e7a0316ea550446daf785b5fa65c049cdd":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["1ecb18e7a0316ea550446daf785b5fa65c049cdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"1ecb18e7a0316ea550446daf785b5fa65c049cdd":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["1ecb18e7a0316ea550446daf785b5fa65c049cdd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}