{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","commits":[{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"UTF-8\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"UTF-8\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"US-ASCII\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"UTF-8\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"US-ASCII\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"UTF-8\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(StandardCharsets.US_ASCII));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"US-ASCII\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(StandardCharsets.US_ASCII));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(\"US-ASCII\"));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ServletInputStream() {\n      private final ByteArrayInputStream in = new ByteArrayInputStream(large.toString().getBytes(StandardCharsets.US_ASCII));\n      @Override public int read() { return in.read(); }\n    });\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d17ec5164debc23076db7fd11d0331f201583b5","date":1426658173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getContentType()).andReturn(\"application/x-www-form-urlencoded\").anyTimes();\n    // we dont pass a content-length to let the security mechanism limit it:\n    expect(request.getContentLength()).andReturn(-1).anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n    expect(request.getQueryString()).andReturn(null).anyTimes();\n    expect(request.getInputStream()).andReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n    replay(request);\n    \n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );\n    SolrException e = expectThrows(SolrException.class, () -> {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<>());\n    });\n    assertTrue(e.getMessage().contains(\"upload limit\"));\n    assertEquals(400, e.code());\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n\n    verify(request).getInputStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );\n    SolrException e = expectThrows(SolrException.class, () -> {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<>());\n    });\n    assertTrue(e.getMessage().contains(\"upload limit\"));\n    assertEquals(400, e.code());\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n\n    verify(request).getInputStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardFormdataUploadLimit().mjava","sourceNew":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );\n    SolrException e = expectThrows(SolrException.class, () -> {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<>());\n    });\n    assertTrue(e.getMessage().contains(\"upload limit\"));\n    assertEquals(400, e.code());\n    verify(request).getInputStream();\n  }\n\n","sourceOld":"  @Test\n  public void testStandardFormdataUploadLimit() throws Exception\n  {\n    final int limitKBytes = 128;\n\n    final StringBuilder large = new StringBuilder(\"q=hello\");\n    // grow exponentially to reach 128 KB limit:\n    while (large.length() <= limitKBytes * 1024) {\n      large.append('&').append(large);\n    }\n    HttpServletRequest request = getMock(\"/solr/select\", \"application/x-www-form-urlencoded\", -1);\n    when(request.getMethod()).thenReturn(\"POST\");\n    when(request.getInputStream()).thenReturn(new ByteServletInputStream(large.toString().getBytes(StandardCharsets.US_ASCII)));\n\n    FormDataRequestParser formdata = new FormDataRequestParser( limitKBytes );    \n    try {\n      formdata.parseParamsAndFillStreams(request, new ArrayList<ContentStream>());\n      fail(\"should throw SolrException\");\n    } catch (SolrException solre) {\n      assertTrue(solre.getMessage().contains(\"upload limit\"));\n      assertEquals(400, solre.code());\n    }\n\n    verify(request).getInputStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d89d7e4e5101347833eea558851bf4209218619":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"f8061ddd97f3352007d927dae445884a6f3d857b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["7d89d7e4e5101347833eea558851bf4209218619"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","0d17ec5164debc23076db7fd11d0331f201583b5"],"0d17ec5164debc23076db7fd11d0331f201583b5":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0d17ec5164debc23076db7fd11d0331f201583b5"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d17ec5164debc23076db7fd11d0331f201583b5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d17ec5164debc23076db7fd11d0331f201583b5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","f8061ddd97f3352007d927dae445884a6f3d857b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}