{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              splitEarcut(currEar, tessellation, mortonOptimized);\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bd39805d25530433bb5db6054c9c16f3bbf3ae3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              splitEarcut(currEar, tessellation, mortonOptimized);\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              splitEarcut(currEar, tessellation, mortonOptimized);\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd39805d25530433bb5db6054c9c16f3bbf3ae3a","date":1541141441,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                tessellation.clear();\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              splitEarcut(currEar, tessellation, mortonOptimized);\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","date":1559804329,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Polygon,Node,List[Triangle],State,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#earcutLinkedList(Node,List[Triangle],State,boolean).mjava","sourceNew":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Polygon polygon, Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(polygon, currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                throw new IllegalArgumentException(\"Unable to Tessellate shape [\" + polygon + \"]. Possible malformed shape detected.\");\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","sourceOld":"  /** Main ear slicing loop which triangulates the vertices of a polygon, provided as a doubly-linked list. **/\n  private static final List<Triangle> earcutLinkedList(Node currEar, final List<Triangle> tessellation,\n                                                       State state, final boolean mortonOptimized) {\n    earcut : do {\n      if (currEar == null || currEar.previous == currEar.next) {\n        return tessellation;\n      }\n\n      Node stop = currEar;\n      Node prevNode;\n      Node nextNode;\n\n      // Iteratively slice ears\n      do {\n        prevNode = currEar.previous;\n        nextNode = currEar.next;\n        // Determine whether the current triangle must be cut off.\n        final boolean isReflex = area(prevNode.getX(), prevNode.getY(), currEar.getX(), currEar.getY(), nextNode.getX(), nextNode.getY()) >= 0;\n        if (isReflex == false && isEar(currEar, mortonOptimized) == true) {\n          // Return the triangulated data\n          tessellation.add(new Triangle(prevNode, currEar, nextNode));\n          // Remove the ear node.\n          removeNode(currEar);\n\n          // Skipping to the next node leaves fewer slither triangles.\n          currEar = nextNode.next;\n          stop = nextNode.next;\n          continue;\n        }\n        currEar = nextNode;\n\n        // If the whole polygon has been iterated over and no more ears can be found.\n        if (currEar == stop) {\n          switch (state) {\n            case INIT:\n              // try filtering points and slicing again\n              currEar = filterPoints(currEar, null);\n              state = State.CURE;\n              continue earcut;\n            case CURE:\n              // if this didn't work, try curing all small self-intersections locally\n              currEar = cureLocalIntersections(currEar, tessellation);\n              state = State.SPLIT;\n              continue earcut;\n            case SPLIT:\n              // as a last resort, try splitting the remaining polygon into two\n              if (splitEarcut(currEar, tessellation, mortonOptimized) == false) {\n                //we could not process all points. Tessellation failed\n                tessellation.clear();\n              }\n              break;\n          }\n          break;\n        }\n      } while (currEar.previous != currEar.next);\n      break;\n    } while (true);\n    // Return the calculated tessellation\n    return tessellation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bd39805d25530433bb5db6054c9c16f3bbf3ae3a":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["bd39805d25530433bb5db6054c9c16f3bbf3ae3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bd39805d25530433bb5db6054c9c16f3bbf3ae3a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bd39805d25530433bb5db6054c9c16f3bbf3ae3a":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}