{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source is out of bounds\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest is out of bounds\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","sourceNew":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source is out of bounds\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest is out of bounds\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","sourceNew":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}