{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","commits":[{"id":"c7410a1292a8bc3af75faed6b753d861a192e6a5","date":1027003198,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Describe <code>toString</code> method here.\n     *\n     * This method assumes that the first term in a array of terms is the\n     * prefix for the whole array. That might not necessarily be so.\n     *\n     * @param f a <code>String</code> value\n     * @return a <code>String</code> value\n     */\n    public final String toString(String f)\n    {\n\tStringBuffer buffer = new StringBuffer();\n\tif (!_field.equals(f))\n\t{\n\t    buffer.append(_field);\n\t    buffer.append(\":\");\n\t}\n\n\tbuffer.append(\"\\\"\");\n\tIterator i = _termArrays.iterator();\n\twhile (i.hasNext())\n\t{\n\t    Term[] terms = (Term[])i.next();\n\t    buffer.append(terms[0].text() + (terms.length > 0 ? \"*\" : \"\"));\n\t}\n\tbuffer.append(\"\\\"\");\n\n\tif (_slop != 0)\n\t{\n\t    buffer.append(\"~\");\n\t    buffer.append(_slop);\n\t}\n\n\tif (boost != 1.0f)\n\t{\n\t    buffer.append(\"^\");\n\t    buffer.append(Float.toString(boost));\n\t}\n\n\treturn buffer.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 0 ? \"*\" : \"\"));\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"    /**\n     * Describe <code>toString</code> method here.\n     *\n     * This method assumes that the first term in a array of terms is the\n     * prefix for the whole array. That might not necessarily be so.\n     *\n     * @param f a <code>String</code> value\n     * @return a <code>String</code> value\n     */\n    public final String toString(String f)\n    {\n\tStringBuffer buffer = new StringBuffer();\n\tif (!_field.equals(f))\n\t{\n\t    buffer.append(_field);\n\t    buffer.append(\":\");\n\t}\n\n\tbuffer.append(\"\\\"\");\n\tIterator i = _termArrays.iterator();\n\twhile (i.hasNext())\n\t{\n\t    Term[] terms = (Term[])i.next();\n\t    buffer.append(terms[0].text() + (terms.length > 0 ? \"*\" : \"\"));\n\t}\n\tbuffer.append(\"\\\"\");\n\n\tif (_slop != 0)\n\t{\n\t    buffer.append(\"~\");\n\t    buffer.append(_slop);\n\t}\n\n\tif (boost != 1.0f)\n\t{\n\t    buffer.append(\"^\");\n\t    buffer.append(Float.toString(boost));\n\t}\n\n\treturn buffer.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f1906b700db12f451bb88505ce6449a7981df4","date":1095448874,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 1 ? \"*\" : \"\"));\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 0 ? \"*\" : \"\"));\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 1 ? \"*\" : \"\"));\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 1 ? \"*\" : \"\"));\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#toString(String).mjava","sourceNew":null,"sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = (Term[])i.next();\n      buffer.append(terms[0].text() + (terms.length > 1 ? \"*\" : \"\"));\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["f1f1906b700db12f451bb88505ce6449a7981df4"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1f1906b700db12f451bb88505ce6449a7981df4":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["f1f1906b700db12f451bb88505ce6449a7981df4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"f1f1906b700db12f451bb88505ce6449a7981df4":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}