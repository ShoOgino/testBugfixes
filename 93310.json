{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa19385d0e0b436df2304541d381046c912096ac","date":1458907196,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n      // Now try some WGS84 points (taken randomly and compared against a known-good implementation)\n      assertEquals(1.1444648695765323, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.038203808753702884, -0.6701260455506466),\n        new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n      assertEquals(1.4345148695890722, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.5220926323378574, 0.6758041581907408),\n        new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n      assertEquals(2.32418144616446, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.09541335760967473, 1.2091829760623236),\n        new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n      assertEquals(2.018421047005435, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.3402853531962009, -0.43544195327249957),\n        new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5","date":1458908648,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n\n    // Now try some WGS84 points (taken randomly and compared against a known-good implementation)\n    assertEquals(1.1444648695765323, PlanetModel.WGS84.surfaceDistance(\n      new GeoPoint(PlanetModel.WGS84, 0.038203808753702884, -0.6701260455506466),\n      new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n    assertEquals(1.4345148695890722, PlanetModel.WGS84.surfaceDistance(\n      new GeoPoint(PlanetModel.WGS84, 0.5220926323378574, 0.6758041581907408),\n      new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n    assertEquals(2.32418144616446, PlanetModel.WGS84.surfaceDistance(\n      new GeoPoint(PlanetModel.WGS84, 0.09541335760967473, 1.2091829760623236),\n      new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n    assertEquals(2.018421047005435, PlanetModel.WGS84.surfaceDistance(\n      new GeoPoint(PlanetModel.WGS84, 0.3402853531962009, -0.43544195327249957),\n      new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n      // Now try some WGS84 points (taken randomly and compared against a known-good implementation)\n      assertEquals(1.1444648695765323, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.038203808753702884, -0.6701260455506466),\n        new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n      assertEquals(1.4345148695890722, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.5220926323378574, 0.6758041581907408),\n        new GeoPoint(PlanetModel.WGS84, -0.8453720422675458, 0.1737353153814496)), 1e-6);\n      assertEquals(2.32418144616446, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.09541335760967473, 1.2091829760623236),\n        new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n      assertEquals(2.018421047005435, PlanetModel.WGS84.surfaceDistance(\n        new GeoPoint(PlanetModel.WGS84, 0.3402853531962009, -0.43544195327249957),\n        new GeoPoint(PlanetModel.WGS84, -0.8501591797459979, -2.3044806381627594)), 1e-6);\n    }\n  }\n\n","bugFix":["aa19385d0e0b436df2304541d381046c912096ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5":["aa19385d0e0b436df2304541d381046c912096ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa19385d0e0b436df2304541d381046c912096ac":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5"]},"commit2Childs":{"7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"aa19385d0e0b436df2304541d381046c912096ac":["7ca1c6ad19c4815fe8f533d9fa3117f18b00dac5"],"b4e444678504caf66a8060b1d514383aa4feac0c":["aa19385d0e0b436df2304541d381046c912096ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}