{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","sourceNew":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get (String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get (String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","date":1269463784,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","sourceNew":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted \n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned. \n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get (String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name,\"\"+dflt);\n    if (sval.indexOf(\":\")<0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0,k);\n    sval = sval.substring(k+1);\n    colForValByRound.put(name,colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name,vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","sourceNew":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","sourceNew":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#get(String,int).mjava","sourceNew":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","sourceOld":"  /**\n   * Return an int property.\n   * If the property contain \":\", e.g. \"10:100:5\", it is interpreted\n   * as array of ints. It is extracted once, on first call\n   * to get() it, and a by-round-value is returned.\n   *\n   * @param name name of property\n   * @param dflt default value\n   * @return a int property.\n   */\n  public int get(String name, int dflt) {\n    // use value by round if already parsed\n    int vals[] = (int[]) valByRound.get(name);\n    if (vals != null) {\n      return vals[roundNumber % vals.length];\n    }\n    // done if not by round \n    String sval = props.getProperty(name, \"\" + dflt);\n    if (sval.indexOf(\":\") < 0) {\n      return Integer.parseInt(sval);\n    }\n    // first time this prop is extracted by round\n    int k = sval.indexOf(\":\");\n    String colName = sval.substring(0, k);\n    sval = sval.substring(k + 1);\n    colForValByRound.put(name, colName);\n    vals = propToIntArray(sval);\n    valByRound.put(name, vals);\n    return vals[roundNumber % vals.length];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}