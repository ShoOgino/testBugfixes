{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), false);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, false);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSortedSet(field));\n    Iterable<Number> docToOrdCount = LegacyDocValuesIterables.sortedSetOrdCountIterable(valuesProducer, field, maxDoc);\n    Iterable<Number> ords = LegacyDocValuesIterables.sortedSetOrdsIterable(valuesProducer, field);\n\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene54DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      final SortedSet<LongsRef> uniqueValueSets = uniqueValueSets(docToOrdCount, ords);\n      if (uniqueValueSets != null) {\n        meta.writeVInt(SORTED_SET_TABLE);\n\n        // write the set_id -> ords mapping\n        writeDictionary(uniqueValueSets);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the doc -> set_id as a numeric field\n        addNumericField(field, docToSetId(uniqueValueSets, docToOrdCount, ords), NumberType.ORDINAL);\n      } else {\n        meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n        // write the ord -> byte[] as a binary field\n        addTermsDict(field, values);\n\n        // write the stream of ords as a numeric field\n        // NOTE: we could return an iterator that delta-encodes these within a doc\n        addNumericField(field, ords, NumberType.ORDINAL);\n\n        // write the doc -> ord count as a absolute index to the stream\n        addOrdIndex(field, docToOrdCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a870f9917149dc600c4ad4417d615c1795de5864":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}