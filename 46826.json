{"path":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","commits":[{"id":"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e","date":1260705517,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d6f4b5f81f9b0ba9369a05c79e55fa6ed5b3d96e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}