{"path":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#testMultivalueBooleanField().mjava","commits":[{"id":"216b828f4f2341ae2e70eb7585059e3576e4cb99","date":1570451249,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#testMultivalueBooleanField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultivalueBooleanField() throws SolrServerException, IOException {\n\n    final String fieldName = \"booleanRemove\";\n\n    getSolrClient().add(Arrays.asList(\n        sdoc(\"id\", \"20000\", fieldName, Lists.newArrayList(true, false)),\n        sdoc(\"id\", \"20001\", fieldName, Lists.newArrayList(false, true))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 2);\n\n    Collection<Object> fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n\n    getSolrClient().add(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(false))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 1);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(true));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n\n    getSolrClient().add(sdoc(\"id\", \"20001\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(true, false))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 1);\n    assertQR(fieldName, \"false\", 0);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(true));\n    assertThat(fieldValues, not(hasItems(false)));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertNull(fieldValues);\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"add\",\n        Lists.newArrayList(false, false)))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 1);\n    assertQR(fieldName, \"false\", 1);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertNull(fieldValues);\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"set\",\n        Lists.newArrayList(true, false))), sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"set\",\n                Lists.newArrayList(false, true)))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 2);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AbstractAtomicUpdatesMultivalueTestBase#testMultivalueBooleanField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultivalueBooleanField() throws SolrServerException, IOException {\n\n    final String fieldName = \"booleanRemove\";\n\n    getSolrClient().add(Arrays.asList(\n        sdoc(\"id\", \"20000\", fieldName, Lists.newArrayList(true, false)),\n        sdoc(\"id\", \"20001\", fieldName, Lists.newArrayList(false, true))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 2);\n\n    Collection<Object> fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n\n    getSolrClient().add(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(false))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 1);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(true));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n\n    getSolrClient().add(sdoc(\"id\", \"20001\", fieldName, ImmutableMap.of(\"remove\",\n        Lists.newArrayList(true, false))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 1);\n    assertQR(fieldName, \"false\", 0);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(1, fieldValues.size());\n    assertThat(fieldValues, hasItems(true));\n    assertThat(fieldValues, not(hasItems(false)));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertNull(fieldValues);\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"add\",\n        Lists.newArrayList(false, false)))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 1);\n    assertQR(fieldName, \"false\", 1);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(3, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertNull(fieldValues);\n\n    getSolrClient().add(Arrays.asList(sdoc(\"id\", \"20000\", fieldName, ImmutableMap.of(\"set\",\n        Lists.newArrayList(true, false))), sdoc(\"id\", \"20001\", fieldName,\n            ImmutableMap.of(\"set\",\n                Lists.newArrayList(false, true)))));\n    getSolrClient().commit(true, true);\n\n    assertQR(fieldName, \"true\", 2);\n    assertQR(fieldName, \"false\", 2);\n\n    fieldValues = getSolrClient().getById(\"20000\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n    fieldValues = getSolrClient().getById(\"20001\").getFieldValues(fieldName);\n    assertEquals(2, fieldValues.size());\n    assertThat(fieldValues, hasItems(true, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["216b828f4f2341ae2e70eb7585059e3576e4cb99"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","216b828f4f2341ae2e70eb7585059e3576e4cb99"]},"commit2Childs":{"216b828f4f2341ae2e70eb7585059e3576e4cb99":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216b828f4f2341ae2e70eb7585059e3576e4cb99","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}