{"path":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#selectThreadState(Thread,DocumentsWriter,Document).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#selectThreadState(Thread,DocumentsWriter,Document).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected ThreadState selectThreadState(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    AffinityThreadState threadState = threadBindings.get(requestingThread);\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    if (threadState == null) {\n      AffinityThreadState minThreadState = null;\n      for(int i=0;i<allThreadStates.length;i++) {\n        AffinityThreadState ts = (AffinityThreadState) allThreadStates[i];\n        if (minThreadState == null || ts.numAssignedThreads < minThreadState.numAssignedThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numAssignedThreads == 0 || allThreadStates.length >= maxNumThreadStates)) {\n        threadState = minThreadState;\n      } else {\n        threadState = addNewThreadState(documentsWriter, new AffinityThreadState());\n      }\n      threadBindings.put(requestingThread, threadState);\n    }\n    threadState.numAssignedThreads++;\n    \n    return threadState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#selectThreadState(Thread,DocumentsWriter,Document).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#selectThreadState(Thread,DocumentsWriter,Document).mjava","sourceNew":"  @Override\n  protected ThreadState selectThreadState(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    AffinityThreadState threadState = threadBindings.get(requestingThread);\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    if (threadState == null) {\n      AffinityThreadState minThreadState = null;\n      for(int i=0;i<allThreadStates.length;i++) {\n        AffinityThreadState ts = (AffinityThreadState) allThreadStates[i];\n        if (minThreadState == null || ts.numAssignedThreads < minThreadState.numAssignedThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numAssignedThreads == 0 || allThreadStates.length >= maxNumThreadStates)) {\n        threadState = minThreadState;\n      } else {\n        threadState = addNewThreadState(documentsWriter, new AffinityThreadState());\n      }\n      threadBindings.put(requestingThread, threadState);\n    }\n    threadState.numAssignedThreads++;\n\n    return threadState;\n  }\n\n","sourceOld":"  @Override\n  protected ThreadState selectThreadState(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    AffinityThreadState threadState = threadBindings.get(requestingThread);\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    if (threadState == null) {\n      AffinityThreadState minThreadState = null;\n      for(int i=0;i<allThreadStates.length;i++) {\n        AffinityThreadState ts = (AffinityThreadState) allThreadStates[i];\n        if (minThreadState == null || ts.numAssignedThreads < minThreadState.numAssignedThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numAssignedThreads == 0 || allThreadStates.length >= maxNumThreadStates)) {\n        threadState = minThreadState;\n      } else {\n        threadState = addNewThreadState(documentsWriter, new AffinityThreadState());\n      }\n      threadBindings.put(requestingThread, threadState);\n    }\n    threadState.numAssignedThreads++;\n    \n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ThreadAffinityDocumentsWriterThreadPool#selectThreadState(Thread,DocumentsWriter,Document).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected ThreadState selectThreadState(Thread requestingThread, DocumentsWriter documentsWriter, Document doc) {\n    AffinityThreadState threadState = threadBindings.get(requestingThread);\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    if (threadState == null) {\n      AffinityThreadState minThreadState = null;\n      for(int i=0;i<allThreadStates.length;i++) {\n        AffinityThreadState ts = (AffinityThreadState) allThreadStates[i];\n        if (minThreadState == null || ts.numAssignedThreads < minThreadState.numAssignedThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numAssignedThreads == 0 || allThreadStates.length >= maxNumThreadStates)) {\n        threadState = minThreadState;\n      } else {\n        threadState = addNewThreadState(documentsWriter, new AffinityThreadState());\n      }\n      threadBindings.put(requestingThread, threadState);\n    }\n    threadState.numAssignedThreads++;\n\n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":[],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff78505662c0b741e2663a9f38a4889c12a32c9f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}