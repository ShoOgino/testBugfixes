{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0], lastInput.length).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0], lastInput.length);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0], lastInput.length).address);\n    }\n\n    /*\n    if (dedupHash != null) {\n      System.out.println(\"NH: \" + dedupHash.count()); \n    }\n    */\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).address);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0], lastInput.length).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0], lastInput.length);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0], lastInput.length).address);\n    }\n\n    /*\n    if (dedupHash != null) {\n      System.out.println(\"NH: \" + dedupHash.count()); \n    }\n    */\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).address);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).address);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).address);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    final UnCompiledNode<T> root = frontier[0];\n\n    // minimize nodes in the last word's suffix\n    freezeTail(0);\n    if (root.inputCount < minSuffixCount1 || root.inputCount < minSuffixCount2 || root.numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(root, lastInput.length);\n      }\n    }\n    //if (DEBUG) System.out.println(\"  builder.finish root.isFinal=\" + root.isFinal + \" root.output=\" + root.output);\n    fst.finish(compileNode(root, lastInput.length).node);\n\n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["60ba444201d2570214b6fcf1d15600dc1a01f548","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}