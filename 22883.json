{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","commits":[{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","pathOld":"/dev/null","sourceNew":"  private boolean equalsTo(TermAutomatonQuery other) {\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           termToID.equals(other.termToID) &&\n           Operations.sameLanguage(det, other.det);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5f75e6b69ef96475154139e5b8a9c3f330ab14d","date":1464117905,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","sourceNew":"  private boolean equalsTo(TermAutomatonQuery other) {\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           other == this;\n  }\n\n","sourceOld":"  private boolean equalsTo(TermAutomatonQuery other) {\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           termToID.equals(other.termToID) &&\n           Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","sourceNew":"  private boolean equalsTo(TermAutomatonQuery other) {\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           other == this;\n  }\n\n","sourceOld":"  private boolean equalsTo(TermAutomatonQuery other) {\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           termToID.equals(other.termToID) &&\n           Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","sourceNew":"  private boolean equalsTo(TermAutomatonQuery other) {\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           other == this;\n  }\n\n","sourceOld":"  private boolean equalsTo(TermAutomatonQuery other) {\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           termToID.equals(other.termToID) &&\n           Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equalsTo(TermAutomatonQuery).mjava","pathOld":"/dev/null","sourceNew":"  private boolean equalsTo(TermAutomatonQuery other) {\n    return checkFinished(this) &&\n           checkFinished(other) &&\n           other == this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["0e7bc21595222ae4f75509300fbb7726691f387f","f5f75e6b69ef96475154139e5b8a9c3f330ab14d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0e7bc21595222ae4f75509300fbb7726691f387f","0e121d43b5a10f2df530f406f935102656e9c4e8"],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0e7bc21595222ae4f75509300fbb7726691f387f":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","f5f75e6b69ef96475154139e5b8a9c3f330ab14d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}