{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","commits":[{"id":"69da1c397a55d488a19e555c8da635417e2dfd47","date":1365020983,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","pathOld":"/dev/null","sourceNew":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      docsEnum = termsEnum.docs(acceptContains, docsEnum, DocsEnum.FLAG_NONE);\n      int docid;\n      while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","sourceNew":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(acceptContains, postingsEnum, PostingsEnum.FLAG_NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","sourceOld":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      docsEnum = termsEnum.docs(acceptContains, docsEnum, DocsEnum.FLAG_NONE);\n      int docid;\n      while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","sourceNew":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(acceptContains, postingsEnum, PostingsEnum.NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","sourceOld":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(acceptContains, postingsEnum, PostingsEnum.FLAG_NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","sourceNew":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (acceptContains != null && acceptContains.get(docid) == false) {\n          continue;\n        }\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","sourceOld":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(acceptContains, postingsEnum, PostingsEnum.NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#collectDocs(Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeFilter.ContainsVisitor#collectDocs(Bits).mjava","sourceNew":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (acceptContains != null && acceptContains.get(docid) == false) {\n          continue;\n        }\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","sourceOld":"    private SmallDocSet collectDocs(Bits acceptContains) throws IOException {\n      SmallDocSet set = null;\n\n      postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n      int docid;\n      while ((docid = postingsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (acceptContains != null && acceptContains.get(docid) == false) {\n          continue;\n        }\n        if (set == null) {\n          int size = termsEnum.docFreq();\n          if (size <= 0)\n            size = 16;\n          set = new SmallDocSet(size);\n        }\n        set.set(docid);\n      }\n      return set;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"672b198fc3dce868916c727917cae58c2906763d":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"69da1c397a55d488a19e555c8da635417e2dfd47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["69da1c397a55d488a19e555c8da635417e2dfd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["672b198fc3dce868916c727917cae58c2906763d"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69da1c397a55d488a19e555c8da635417e2dfd47":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69da1c397a55d488a19e555c8da635417e2dfd47"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}