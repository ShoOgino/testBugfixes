{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXmlBackCompat#readCoreAttributes(String).mjava","sourceNew":"  @Override\n  public Map<String, String> readCoreAttributes(String coreName) {\n    Map<String, String> attrs = new HashMap<String, String>();\n\n    if (isAutoDiscover) {\n      return attrs; // this is a no-op.... intentionally\n    }\n    synchronized (coreNodes) {\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n          NamedNodeMap attributes = node.getAttributes();\n          for (int i = 0; i < attributes.getLength(); i++) {\n            Node attribute = attributes.item(i);\n            String val = attribute.getNodeValue();\n            if (CoreDescriptor.CORE_DATADIR.equals(attribute.getNodeName()) ||\n                CoreDescriptor.CORE_INSTDIR.equals(attribute.getNodeName())) {\n              if (val.indexOf('$') == -1) {\n                val = (val != null && !val.endsWith(\"/\")) ? val + '/' : val;\n              }\n            }\n            attrs.put(attribute.getNodeName(), val);\n          }\n          return attrs;\n        }\n      }\n    }\n    return attrs;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, String> readCoreAttributes(String coreName) {\n    Map<String, String> attrs = new HashMap<String, String>();\n\n    synchronized (coreNodes) {\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n          NamedNodeMap attributes = node.getAttributes();\n          for (int i = 0; i < attributes.getLength(); i++) {\n            Node attribute = attributes.item(i);\n            String val = attribute.getNodeValue();\n            if (CoreDescriptor.CORE_DATADIR.equals(attribute.getNodeName()) ||\n                CoreDescriptor.CORE_INSTDIR.equals(attribute.getNodeName())) {\n              if (val.indexOf('$') == -1) {\n                val = (val != null && !val.endsWith(\"/\"))? val + '/' : val;\n              }\n            }\n            attrs.put(attribute.getNodeName(), val);\n          }\n          return attrs;\n        }\n      }\n    }\n    return attrs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","sourceNew":"  @Override\n  public Map<String, String> readCoreAttributes(String coreName) {\n    Map<String, String> attrs = new HashMap<String, String>();\n\n    if (is50OrLater) {\n      return attrs; // this is a no-op.... intentionally\n    }\n    synchronized (coreNodes) {\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n          NamedNodeMap attributes = node.getAttributes();\n          for (int i = 0; i < attributes.getLength(); i++) {\n            Node attribute = attributes.item(i);\n            String val = attribute.getNodeValue();\n            if (CoreDescriptor.CORE_DATADIR.equals(attribute.getNodeName()) ||\n                CoreDescriptor.CORE_INSTDIR.equals(attribute.getNodeName())) {\n              if (val.indexOf('$') == -1) {\n                val = (val != null && !val.endsWith(\"/\")) ? val + '/' : val;\n              }\n            }\n            attrs.put(attribute.getNodeName(), val);\n          }\n          return attrs;\n        }\n      }\n    }\n    return attrs;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, String> readCoreAttributes(String coreName) {\n    Map<String, String> attrs = new HashMap<String, String>();\n\n    if (isAutoDiscover) {\n      return attrs; // this is a no-op.... intentionally\n    }\n    synchronized (coreNodes) {\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n          NamedNodeMap attributes = node.getAttributes();\n          for (int i = 0; i < attributes.getLength(); i++) {\n            Node attribute = attributes.item(i);\n            String val = attribute.getNodeValue();\n            if (CoreDescriptor.CORE_DATADIR.equals(attribute.getNodeName()) ||\n                CoreDescriptor.CORE_INSTDIR.equals(attribute.getNodeName())) {\n              if (val.indexOf('$') == -1) {\n                val = (val != null && !val.endsWith(\"/\")) ? val + '/' : val;\n              }\n            }\n            attrs.put(attribute.getNodeName(), val);\n          }\n          return attrs;\n        }\n      }\n    }\n    return attrs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","sourceNew":"  @Override\n  public Map<String,String> readCoreAttributes(String coreName) {\n    Map<String,String> attrs = new HashMap<String,String>();\n    \n    return attrs; // this is a no-op.... intentionally\n  }\n\n","sourceOld":"  @Override\n  public Map<String, String> readCoreAttributes(String coreName) {\n    Map<String, String> attrs = new HashMap<String, String>();\n\n    if (is50OrLater) {\n      return attrs; // this is a no-op.... intentionally\n    }\n    synchronized (coreNodes) {\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        if (coreName.equals(DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null))) {\n          NamedNodeMap attributes = node.getAttributes();\n          for (int i = 0; i < attributes.getLength(); i++) {\n            Node attribute = attributes.item(i);\n            String val = attribute.getNodeValue();\n            if (CoreDescriptor.CORE_DATADIR.equals(attribute.getNodeName()) ||\n                CoreDescriptor.CORE_INSTDIR.equals(attribute.getNodeName())) {\n              if (val.indexOf('$') == -1) {\n                val = (val != null && !val.endsWith(\"/\")) ? val + '/' : val;\n              }\n            }\n            attrs.put(attribute.getNodeName(), val);\n          }\n          return attrs;\n        }\n      }\n    }\n    return attrs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String,String> readCoreAttributes(String coreName) {\n    Map<String,String> attrs = new HashMap<String,String>();\n    \n    return attrs; // this is a no-op.... intentionally\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#readCoreAttributes(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String,String> readCoreAttributes(String coreName) {\n    Map<String,String> attrs = new HashMap<String,String>();\n    \n    return attrs; // this is a no-op.... intentionally\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["e475642767c688ede5728d7918326f70b4e0bf3a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"e475642767c688ede5728d7918326f70b4e0bf3a":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}