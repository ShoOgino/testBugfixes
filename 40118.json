{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      Highlighter highlighter = new Highlighter(new SpanScorer(query, FIELD_NAME, tokenStream));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      tokenStream.reset();\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","sourceNew":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text)));\n      Highlighter highlighter = new Highlighter(new SpanScorer(query, FIELD_NAME, tokenStream));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n      tokenStream.reset();\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","sourceNew":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","sourceNew":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testSimpleSpanHighlighter().mjava","sourceNew":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","sourceOld":"  public void testSimpleSpanHighlighter() throws Exception {\n    doSearching(\"Kennedy\");\n\n    int maxNumFragmentsRequired = 2;\n\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n    \n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n          new StringReader(text));\n      highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n\n    // Not sure we can assert anything here - just running to check we dont\n    // throw any exceptions\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"296b8b38a87feb478921f77834a2302dfe77641c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}