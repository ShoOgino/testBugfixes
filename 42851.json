{"path":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fieldName + \"\\\" did not index dimensional values\");\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fieldName + \"\\\" did not index dimensional values\");\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","sourceNew":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return;\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fieldName + \"\\\" did not index dimensional values\");\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          throw new IllegalArgumentException(\"field=\\\"\" + fieldName + \"\\\" did not index dimensional values\");\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","sourceNew":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return;\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return;\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getPointValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelLeafReader#getDimensionalValues().mjava","sourceNew":"  @Override\n  public PointValues getPointValues() {\n    return new PointValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return;\n        }\n        PointValues dimValues = reader.getPointValues();\n        if (dimValues == null) {\n          return;\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        PointValues dimValues = reader.getPointValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        PointValues dimValues = reader.getPointValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        PointValues dimValues = reader.getPointValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        PointValues dimValues = reader.getPointValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DimensionalValues getDimensionalValues() {\n    return new DimensionalValues() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return;\n        }\n        dimValues.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return null;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return null;\n        }\n        return dimValues.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        LeafReader reader = fieldToReader.get(fieldName);\n        if (reader == null) {\n          return 0;\n        }\n        DimensionalValues dimValues = reader.getDimensionalValues();\n        if (dimValues == null) {\n          return 0;\n        }\n        return dimValues.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}