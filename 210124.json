{"path":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    try {\n      stats.forEach((k, v) -> {\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    try {\n      stats.forEach((k, v) -> {\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    jmxAttributes.forEach((k, v) -> {\n      attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n          null, true, false, false));\n    });\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes.containsKey(k)) {\n          return;\n        }\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    try {\n      stats.forEach((k, v) -> {\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    jmxAttributes.forEach((k, v) -> {\n      attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n          null, true, false, false));\n    });\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes.containsKey(k)) {\n          return;\n        }\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    try {\n      stats.forEach((k, v) -> {\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    jmxAttributes.forEach((k, v) -> {\n      attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n          null, true, false, false));\n    });\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes.containsKey(k)) {\n          return;\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        Class type = v.getClass();\n        @SuppressWarnings({\"rawtypes\"})\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    jmxAttributes.forEach((k, v) -> {\n      attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n          null, true, false, false));\n    });\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes.containsKey(k)) {\n          return;\n        }\n        Class type = v.getClass();\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricsMap#getMBeanInfo().mjava","sourceNew":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    if (jmxAttributes != null) {\n      jmxAttributes.forEach((k, v) -> {\n        attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n            null, true, false, false));\n      });\n    }\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes != null && jmxAttributes.containsKey(k)) {\n          return;\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        Class type = v.getClass();\n        @SuppressWarnings({\"rawtypes\"})\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","sourceOld":"  @Override\n  public MBeanInfo getMBeanInfo() {\n    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();\n    Map<String,Object> stats = getValue(true);\n    if (useCachedStatsBetweenGetMBeanInfoCalls) {\n      cachedValue = stats;\n    }\n    jmxAttributes.forEach((k, v) -> {\n      attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n          null, true, false, false));\n    });\n    try {\n      stats.forEach((k, v) -> {\n        if (jmxAttributes.containsKey(k)) {\n          return;\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        Class type = v.getClass();\n        @SuppressWarnings({\"rawtypes\"})\n        OpenType typeBox = determineType(type);\n        if (type.equals(String.class) || typeBox == null) {\n          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),\n              null, true, false, false));\n        } else {\n          attrInfoList.add(new OpenMBeanAttributeInfoSupport(\n              k, k, typeBox, true, false, false));\n        }\n      });\n    } catch (Exception e) {\n      // don't log issue if the core is closing\n      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))\n        log.warn(\"Could not get attributes of MetricsMap: {}\", this, e);\n    }\n    MBeanAttributeInfo[] attrInfoArr = attrInfoList\n        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n    return new MBeanInfo(getClass().getName(), \"MetricsMap\", attrInfoArr, null, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["122c889ac8944e19f984ba4306b02a8742e914a7"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"816521ebaad5add9cb96bb88c577394e2938c40b":["122c889ac8944e19f984ba4306b02a8742e914a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}