{"path":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","commits":[{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTF = fieldInfo.omitTf;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTF = fieldInfo.omitTf;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d736930237c54e1516a9e3bae803c92ff19ec4e5","date":1245789156,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["d736930237c54e1516a9e3bae803c92ff19ec4e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"d736930237c54e1516a9e3bae803c92ff19ec4e5":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["d736930237c54e1516a9e3bae803c92ff19ec4e5"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"d736930237c54e1516a9e3bae803c92ff19ec4e5":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}