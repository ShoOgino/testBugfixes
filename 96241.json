{"path":"lucene/core/src/test/org/apache/lucene/search/TestXYPointDistanceSort#doRandomTest(int,int).mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestXYPointDistanceSort#doRandomTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();    \n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // else seeds may not to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", i));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      if (random().nextInt(10) > 7) {\n        float x = ShapeTestUtil.nextFloat(random());\n        float y = ShapeTestUtil.nextFloat(random());\n\n        doc.add(new XYDocValuesField(\"field\", x, y));\n        doc.add(new StoredField(\"x\", x));\n        doc.add(new StoredField(\"y\", y));\n      } // otherwise \"missing\"\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      float x = ShapeTestUtil.nextFloat(random());\n      float y = ShapeTestUtil.nextFloat(random());\n      double missingValue = Double.POSITIVE_INFINITY;\n\n      Result expected[] = new Result[reader.maxDoc()];\n      \n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        Document targetDoc = reader.document(doc);\n        final double distance;\n        if (targetDoc.getField(\"x\") == null) {\n          distance = missingValue; // missing\n        } else {\n          double docX = targetDoc.getField(\"x\").numericValue().floatValue();\n          double docY = targetDoc.getField(\"y\").numericValue().floatValue();\n          distance = cartesianDistance(x, y, docX, docY);\n        }\n        int id = targetDoc.getField(\"id\").numericValue().intValue();\n        expected[doc] = new Result(id, distance);\n      }\n      \n      Arrays.sort(expected);\n      \n      // randomize the topN a bit\n      int topN = TestUtil.nextInt(random(), 1, reader.maxDoc());\n      // sort by distance, then ID\n      SortField distanceSort = XYDocValuesField.newDistanceSort(\"field\", x, y);\n      distanceSort.setMissingValue(missingValue);\n      Sort sort = new Sort(distanceSort, \n                           new SortField(\"id\", SortField.Type.INT));\n\n      TopDocs topDocs = searcher.search(new MatchAllDocsQuery(), topN, sort);\n      for (int resultNumber = 0; resultNumber < topN; resultNumber++) {\n        FieldDoc fieldDoc = (FieldDoc) topDocs.scoreDocs[resultNumber];\n        Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n        assertEquals(expected[resultNumber], actual);\n      }\n\n      // get page2 with searchAfter()\n      if (topN < reader.maxDoc()) {\n        int page2 = TestUtil.nextInt(random(), 1, reader.maxDoc() - topN);\n        TopDocs topDocs2 = searcher.searchAfter(topDocs.scoreDocs[topN - 1], new MatchAllDocsQuery(), page2, sort);\n        for (int resultNumber = 0; resultNumber < page2; resultNumber++) {\n          FieldDoc fieldDoc = (FieldDoc) topDocs2.scoreDocs[resultNumber];\n          Result actual = new Result((Integer) fieldDoc.fields[1], (Double) fieldDoc.fields[0]);\n          assertEquals(expected[topN + resultNumber], actual);\n        }\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}