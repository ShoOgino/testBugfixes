{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","commits":[{"id":"b58bd8dd457a9b46b007c641d5b6e747afb8904a","date":1393616676,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupAffix(FST[IntsRef],char[],int,int).mjava","sourceNew":"  // TODO: this is pretty stupid, considering how the stemming algorithm works\n  // we can speed it up to be significantly faster!\n  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  // TODO: this is pretty stupid, considering how the stemming algorithm works\n  // we can speed it up to be significantly faster!\n  IntsRef lookupAffix(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db","date":1397463062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","sourceNew":"  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  // TODO: this is pretty stupid, considering how the stemming algorithm works\n  // we can speed it up to be significantly faster!\n  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":["26c5ee01d8657497f54f46447208768acc949d51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","sourceNew":"  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output() != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output());\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output() != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output());\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookup(FST[IntsRef],char[],int,int).mjava","sourceNew":"  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output() != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output());\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output() != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output());\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  IntsRef lookup(FST<IntsRef> fst, char word[], int offset, int length) {\n    if (fst == null) {\n      return null;\n    }\n    final FST.BytesReader bytesReader = fst.getBytesReader();\n    final FST.Arc<IntsRef> arc = fst.getFirstArc(new FST.Arc<IntsRef>());\n    // Accumulate output as we go\n    final IntsRef NO_OUTPUT = fst.outputs.getNoOutput();\n    IntsRef output = NO_OUTPUT;\n    \n    int l = offset + length;\n    try {\n      for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n        cp = Character.codePointAt(word, i, l);\n        if (fst.findTargetArc(cp, arc, arc, bytesReader) == null) {\n          return null;\n        } else if (arc.output != NO_OUTPUT) {\n          output = fst.outputs.add(output, arc.output);\n        }\n      }\n      if (fst.findTargetArc(FST.END_LABEL, arc, arc, bytesReader) == null) {\n        return null;\n      } else if (arc.output != NO_OUTPUT) {\n        return fst.outputs.add(output, arc.output);\n      } else {\n        return output;\n      }\n    } catch (IOException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db"],"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}