{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove().mjava","commits":[{"id":"0a7c6b3c53318581ef3ddb386d90298695de120d","date":1550591901,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove().mjava","sourceNew":"  //Two shared point with MBR -> [MinLat, MaxLon], [MaxLat, MinLon], third point above\n  public void testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove() {\n    double alat = 2.0;\n    double alon = 0.0;\n    double blat = 0.0;\n    double blon = 2.0;\n    double clat = 1.75;\n    double clon = 1.25;\n    int alatEnc = GeoEncodingUtils.encodeLatitude(alat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blatEnc = GeoEncodingUtils.encodeLatitude(blat);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    int clatEnc = GeoEncodingUtils.encodeLatitude(clat);\n    int clonEnc = GeoEncodingUtils.encodeLongitude(clon);\n    verifyEncodingPermutations(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == alatEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == blatEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == clatEnc);\n    assertTrue(encoded[5] == clonEnc);\n  }\n\n","sourceOld":"  //Two shared point with MBR -> [MinLat, MaxLon], [MaxLat, MinLon], third point above\n  public void testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove() {\n    double alat = 2.0;\n    double alon = 0.0;\n    double blat = 0.0;\n    double blon = 2.0;\n    double clat = 1.75;\n    double clon = 1.25;\n    int alatEnc = GeoEncodingUtils.encodeLatitude(alat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blatEnc = GeoEncodingUtils.encodeLatitude(blat);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    int clatEnc = GeoEncodingUtils.encodeLatitude(clat);\n    int clonEnc = GeoEncodingUtils.encodeLongitude(clon);\n    verifyEncodingPermutations(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == alatEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == blatEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == clatEnc);\n    assertTrue(encoded[5] == clonEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove().mjava","sourceNew":null,"sourceOld":"  //Two shared point with MBR -> [MinLat, MaxLon], [MaxLat, MinLon], third point above\n  public void testPolygonEncodingMinLatMaxLonMaxLatMinLonAbove() {\n    double alat = 2.0;\n    double alon = 0.0;\n    double blat = 0.0;\n    double blon = 2.0;\n    double clat = 1.75;\n    double clon = 1.25;\n    int alatEnc = GeoEncodingUtils.encodeLatitude(alat);\n    int alonEnc = GeoEncodingUtils.encodeLongitude(alon);\n    int blatEnc = GeoEncodingUtils.encodeLatitude(blat);\n    int blonEnc = GeoEncodingUtils.encodeLongitude(blon);\n    int clatEnc = GeoEncodingUtils.encodeLatitude(clat);\n    int clonEnc = GeoEncodingUtils.encodeLongitude(clon);\n    verifyEncodingPermutations(alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, alatEnc, alonEnc, blatEnc, blonEnc, clatEnc, clonEnc);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    assertTrue(encoded[0] == alatEnc);\n    assertTrue(encoded[1] == alonEnc);\n    assertTrue(encoded[2] == blatEnc);\n    assertTrue(encoded[3] == blonEnc);\n    assertTrue(encoded[4] == clatEnc);\n    assertTrue(encoded[5] == clonEnc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}