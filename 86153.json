{"path":"solr/core/src/java/org/apache/solr/response/JSONResponseWriter.ArrayOfNameTypeValueJSONWriter#writeNamedList(String,NamedList).mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONResponseWriter.ArrayOfNameTypeValueJSONWriter#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/ArrayOfNameTypeValueJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null || writeNullName) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"type\":\"str\",\"value\":\"foo\"}</code> portion.\n       */\n      writeTypeAndValueKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAndValueKey) {\n        throw new RuntimeException(\"writeTypeAndValueKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null || writeNullName) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"type\":\"str\",\"value\":\"foo\"}</code> portion.\n       */\n      writeTypeAndValueKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAndValueKey) {\n        throw new RuntimeException(\"writeTypeAndValueKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONResponseWriter.ArrayOfNameTypeValueJSONWriter#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONResponseWriter.ArrayOfNameTypeValueJSONWriter#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, @SuppressWarnings({\"rawtypes\"})NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null || writeNullName) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"type\":\"str\",\"value\":\"foo\"}</code> portion.\n       */\n      writeTypeAndValueKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAndValueKey) {\n        throw new RuntimeException(\"writeTypeAndValueKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null || writeNullName) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"type\":\"str\",\"value\":\"foo\"}</code> portion.\n       */\n      writeTypeAndValueKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAndValueKey) {\n        throw new RuntimeException(\"writeTypeAndValueKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}