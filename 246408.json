{"path":"src/java/org/apache/lucene/store/Lock.With#run().mjava","commits":[{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"/dev/null","sourceNew":"    /** Calls {@link #doBody} while <it>lock</it> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n\tlocked = lock.obtain();\n\tint sleepCount = 0;\n\twhile (!locked) {\n\t  if (++sleepCount == maxSleeps) {\n\t    throw new IOException(\"Timed out waiting for: \" + lock);\n\t  }\n\t  try {\n\t    Thread.sleep(sleepInterval);\n\t  } catch (InterruptedException e) {\n\t    throw new IOException(e.toString());\n\t  }\n\t  locked = lock.obtain();\n\t}\n\n\treturn doBody();\n\t\n      } finally {\n\tif (locked)\n\t  lock.release();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce2d38fca9678b74e922c3d472944968909f7799","date":1013648326,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n\tlocked = lock.obtain();\n\tint sleepCount = 0;\n\twhile (!locked) {\n\t  if (++sleepCount == maxSleeps) {\n\t    throw new IOException(\"Timed out waiting for: \" + lock);\n\t  }\n\t  try {\n\t    Thread.sleep(sleepInterval);\n\t  } catch (InterruptedException e) {\n\t    throw new IOException(e.toString());\n\t  }\n\t  locked = lock.obtain();\n\t}\n\n\treturn doBody();\n\t\n      } finally {\n\tif (locked)\n\t  lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <it>lock</it> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n\tlocked = lock.obtain();\n\tint sleepCount = 0;\n\twhile (!locked) {\n\t  if (++sleepCount == maxSleeps) {\n\t    throw new IOException(\"Timed out waiting for: \" + lock);\n\t  }\n\t  try {\n\t    Thread.sleep(sleepInterval);\n\t  } catch (InterruptedException e) {\n\t    throw new IOException(e.toString());\n\t  }\n\t  locked = lock.obtain();\n\t}\n\n\treturn doBody();\n\t\n      } finally {\n\tif (locked)\n\t  lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"693a4c06f749274d170a2e87d4afb2709a810f46","date":1060700703,"type":3,"author":"Scott Ganyo","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n\tlocked = lock.obtain();\n\tint sleepCount = 0;\n\twhile (!locked) {\n\t  if (++sleepCount == maxSleeps) {\n\t    throw new IOException(\"Timed out waiting for: \" + lock);\n\t  }\n\t  try {\n\t    Thread.sleep(sleepInterval);\n\t  } catch (InterruptedException e) {\n\t    throw new IOException(e.toString());\n\t  }\n\t  locked = lock.obtain();\n\t}\n\n\treturn doBody();\n\t\n      } finally {\n\tif (locked)\n\t  lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":["0fcdcf196523675146a4df3193e91413533857ab","1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits. */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":["693a4c06f749274d170a2e87d4afb2709a810f46","3a10198efba39d45c46f8714efe9a15616f9c79d"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"693a4c06f749274d170a2e87d4afb2709a810f46":["ce2d38fca9678b74e922c3d472944968909f7799"],"1b54a9bc667895a2095a886184bf69a3179e63df":["693a4c06f749274d170a2e87d4afb2709a810f46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce2d38fca9678b74e922c3d472944968909f7799":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["ce2d38fca9678b74e922c3d472944968909f7799"],"693a4c06f749274d170a2e87d4afb2709a810f46":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"ce2d38fca9678b74e922c3d472944968909f7799":["693a4c06f749274d170a2e87d4afb2709a810f46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}