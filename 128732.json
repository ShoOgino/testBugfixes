{"path":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.shutdown();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.shutdown();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random())).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random())).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.shutdown();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.shutdown();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.shutdown();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFiles(Collections.singleton(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen)));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFiles(Collections.singleton(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen)));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n          .setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir))\n          .setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.leaves().size() != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(new MockAnalyzer(random()))\n                 .setOpenMode(OpenMode.APPEND)\n                 .setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertEquals(needsMerging ? 2:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = DirectoryReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = DirectoryReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.APPEND)\n              .setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","b470f36a9372c97283360b1304eacbde22df6c0d"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"b470f36a9372c97283360b1304eacbde22df6c0d":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["70790b11e79a0366b21b2cc5b82d03b6fddcef81","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}