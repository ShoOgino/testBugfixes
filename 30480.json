{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"/dev/null","sourceNew":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":null,"sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"/dev/null","sourceNew":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"017c035439201490351b0f5f3d33a393c6c24551","date":1305551986,"type":4,"author":"Stanisław Osiński","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"017c035439201490351b0f5f3d33a393c6c24551":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["70ad682703b8585f5d0a637efec044d57ec05efb","017c035439201490351b0f5f3d33a393c6c24551"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["1da8d55113b689b06716246649de6f62430f15c0","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a5684446f7742dfb07c42296decc5e4d6515a0fe","017c035439201490351b0f5f3d33a393c6c24551"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["017c035439201490351b0f5f3d33a393c6c24551"]},"commit2Childs":{"017c035439201490351b0f5f3d33a393c6c24551":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70ad682703b8585f5d0a637efec044d57ec05efb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["017c035439201490351b0f5f3d33a393c6c24551","70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a3776dccca01c11e7046323cfad46a3b4a471233"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","a5684446f7742dfb07c42296decc5e4d6515a0fe","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}