{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","commits":[{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\n            entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","sourceNew":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\n            entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","sourceNew":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = _TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = _TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","sourceNew":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<String,String>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c4acf6c6dc6f38399387394d76427f40a125763","date":1416232421,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestStemmerOverrideFilter#testRandomRealisticKeyword().mjava","sourceNew":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    // This test might fail if ignoreCase is true since the map might have twice the same key, once\n    // lowercased and once uppercased\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(false);\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomRealisticKeyword() throws IOException {\n    Map<String,String> map = new HashMap<>();\n    int numTerms = atLeast(50);\n    for (int i = 0; i < numTerms; i++) {\n      String randomRealisticUnicodeString = TestUtil\n          .randomRealisticUnicodeString(random());\n      if (randomRealisticUnicodeString.length() > 0) {\n        String value = TestUtil.randomSimpleString(random());\n        map.put(randomRealisticUnicodeString,\n            value.isEmpty() ? \"a\" : value);\n      }\n    }\n    if (map.isEmpty()) {\n      map.put(\"booked\", \"books\");\n    }\n    StemmerOverrideFilter.Builder builder = new StemmerOverrideFilter.Builder(random().nextBoolean());\n    Set<Entry<String,String>> entrySet = map.entrySet();\n    for (Entry<String,String> entry : entrySet) {\n      builder.add(entry.getKey(), entry.getValue());\n    }\n    StemmerOverrideMap build = builder.build();\n    for (Entry<String,String> entry : entrySet) {\n      if (random().nextBoolean()) {\n        Tokenizer tokenizer = new KeywordTokenizer();\n        tokenizer.setReader(new StringReader(entry.getKey()));\n        TokenStream stream = new PorterStemFilter(new StemmerOverrideFilter(\n            tokenizer, build));\n        assertTokenStreamContents(stream, new String[] {entry.getValue()});\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7476b30b7c03f9027676c9df28fda37629da2c97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["7476b30b7c03f9027676c9df28fda37629da2c97"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c4acf6c6dc6f38399387394d76427f40a125763":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c4acf6c6dc6f38399387394d76427f40a125763"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8c4acf6c6dc6f38399387394d76427f40a125763"],"7476b30b7c03f9027676c9df28fda37629da2c97":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7476b30b7c03f9027676c9df28fda37629da2c97"],"8c4acf6c6dc6f38399387394d76427f40a125763":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}