{"path":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","commits":[{"id":"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b","date":1225722778,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, 0);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();    \n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa3b356f379bef56d6457517e0158dac118e99e","date":1227476542,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();    \n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, 0);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();    \n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48dd7857ec646cce5ab6c5e7c48a27754559f4be","date":1234349649,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();    \n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d8dceae0594e66ce62ce0f775689af35a2266c","date":1251260302,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#doPerfTest(int,int,int).mjava","sourceNew":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","sourceOld":"  void doPerfTest(int iter, int cacheSize, int maxKey) {\n    long start = System.currentTimeMillis();\n\n    int lowerWaterMark = cacheSize;\n    int upperWaterMark = (int)(lowerWaterMark * 1.1);\n\n    Random r = new Random(0);\n    ConcurrentLRUCache cache = new ConcurrentLRUCache(upperWaterMark, lowerWaterMark, (upperWaterMark+lowerWaterMark)/2, upperWaterMark, false, false, null);\n    boolean getSize=false;\n    int minSize=0,maxSize=0;\n    for (int i=0; i<iter; i++) {\n      cache.put(r.nextInt(maxKey),\"TheValue\");\n      int sz = cache.size();\n      if (!getSize && sz >= cacheSize) {\n        getSize = true;\n        minSize = sz;\n      } else {\n        if (sz < minSize) minSize=sz;\n        else if (sz > maxSize) maxSize=sz;\n      }\n    }\n    cache.destroy();\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \", minSize=\"+minSize+\",maxSize=\"+maxSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["eaa3b356f379bef56d6457517e0158dac118e99e"],"eaa3b356f379bef56d6457517e0158dac118e99e":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["ad94625fb8d088209f46650c8097196fec67f00c"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"eaa3b356f379bef56d6457517e0158dac118e99e":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["eaa3b356f379bef56d6457517e0158dac118e99e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}