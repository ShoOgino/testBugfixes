{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","commits":[{"id":"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa","date":1358521177,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValues.Type).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new LongDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new StrFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValues.Type type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BYTES_FIXED_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        f = new DerefBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        f = new StraightBytesDocValuesField(\"dv\", new BytesRef(), false);\n        break;\n      case FIXED_INTS_8:\n        f = new ByteDocValuesField(\"dv\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        f = new ShortDocValuesField(\"dv\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        f = new IntDocValuesField(\"dv\", 0);\n        break;\n      case FIXED_INTS_64:\n        f = new LongDocValuesField(\"dv\", 0L);\n        break;\n      case VAR_INTS:\n        f = new PackedLongDocValuesField(\"dv\", 0L);\n        break;\n      case FLOAT_32:\n        f = new FloatDocValuesField(\"dv\", 0f);\n        break;\n      case FLOAT_64:\n        f = new DoubleDocValuesField(\"dv\", 0d);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n          vals[i] = _TestUtil.randomFixedByteLengthUnicodeString(random(), 10);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case FIXED_INTS_8:\n          vals[i] = (byte) random().nextInt(256);\n          f.setByteValue((Byte) vals[i]);\n          break;\n        case FIXED_INTS_16:\n          vals[i] = (short) random().nextInt(1 << 16);\n          f.setShortValue((Short) vals[i]);\n          break;\n        case FIXED_INTS_32:\n          vals[i] = random().nextInt();\n          f.setIntValue((Integer) vals[i]);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        case FLOAT_32:\n          vals[i] = random().nextFloat();\n          f.setFloatValue((Float) vals[i]);\n          break;\n        case FLOAT_64:\n          vals[i] = random().nextDouble();\n          f.setDoubleValue((Double) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new NumericDocValuesFieldSource(\"id\", false).getValues(null, leave);\n      final ValueSource vs;\n      final boolean direct = random().nextBoolean();\n      switch (type) {\n        case BYTES_FIXED_DEREF:\n        case BYTES_FIXED_SORTED:\n        case BYTES_FIXED_STRAIGHT:\n        case BYTES_VAR_DEREF:\n        case BYTES_VAR_SORTED:\n        case BYTES_VAR_STRAIGHT:\n          vs = new StrDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FLOAT_32:\n        case FLOAT_64:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n          vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          break;\n        case FIXED_INTS_64:\n        case VAR_INTS:\n          if (random().nextBoolean()) {\n            vs = new NumericDocValuesFieldSource(\"dv\", direct);\n          } else {\n            vs = new DateDocValuesFieldSource(\"dv\", direct);\n          }\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof NumericDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Number);\n          switch (type) {\n            case FIXED_INTS_8:\n              assertTrue(values.objectVal(i) instanceof Byte);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(1, bytes.length);\n              break;\n            case FIXED_INTS_16:\n              assertTrue(values.objectVal(i) instanceof Short);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(2, bytes.length);\n              break;\n            case FIXED_INTS_32:\n              assertTrue(values.objectVal(i) instanceof Integer);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FIXED_INTS_64:\n            case VAR_INTS:\n              assertTrue(values.objectVal(i) instanceof Long);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            case FLOAT_32:\n              assertTrue(values.objectVal(i) instanceof Float);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(4, bytes.length);\n              break;\n            case FLOAT_64:\n              assertTrue(values.objectVal(i) instanceof Double);\n              assertTrue(values.bytesVal(i, bytes));\n              assertEquals(8, bytes.length);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        } else if (vs instanceof DateDocValuesFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Date);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case BYTES_VAR_SORTED:\n          case BYTES_FIXED_SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BYTES_FIXED_DEREF:\n          case BYTES_FIXED_STRAIGHT:\n          case BYTES_VAR_DEREF:\n          case BYTES_VAR_STRAIGHT:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case FLOAT_32:\n            assertEquals(((Number) expected).floatValue(), values.floatVal(i), 0.001);\n            break;\n          case FLOAT_64:\n            assertEquals(((Number) expected).doubleValue(), values.doubleVal(i), 0.001d);\n            break;\n          case FIXED_INTS_8:\n          case FIXED_INTS_16:\n          case FIXED_INTS_32:\n          case FIXED_INTS_64:\n          case VAR_INTS:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8b3ef05d58a3f28ef73c1a91de0f033a76bbdb3","date":1358548005,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new LongDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new LongDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new StrFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof StrFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new IntDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedBytesDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new LongDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d68b012e2c254aa7a4e9c125b76daf501111c8ae","date":1358889889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setIntValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n          assertEquals(8, bytes.length);\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = _TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.shutdown();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.shutdown();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.shutdown();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.shutdown();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRef bytes = new BytesRef();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes);\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":["0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (AtomicReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4","date":1439660917,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomInts.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc453cd9f503b2ba830b15afa27d11dc109c6af","date":1486406649,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      case SORTED_NUMERIC:\n        f = new SortedNumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n        case SORTED_NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        case SORTED_NUMERIC:\n          // Since we are not indexing multiple values, MIN and MAX should work the same way\n          vs = random().nextBoolean()? new MultiValuedLongFieldSource(\"dv\", Type.MIN): new MultiValuedLongFieldSource(\"dv\", Type.MAX);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n          case SORTED_NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d","date":1518457294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      case SORTED_NUMERIC:\n        f = new SortedNumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n        case SORTED_NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        case SORTED_NUMERIC:\n          // Since we are not indexing multiple values, MIN and MAX should work the same way\n          vs = random().nextBoolean()? new MultiValuedLongFieldSource(\"dv\", Type.MIN): new MultiValuedLongFieldSource(\"dv\", Type.MAX);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n          case SORTED_NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      case SORTED_NUMERIC:\n        f = new SortedNumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n        case SORTED_NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        case SORTED_NUMERIC:\n          // Since we are not indexing multiple values, MIN and MAX should work the same way\n          vs = random().nextBoolean()? new MultiValuedLongFieldSource(\"dv\", Type.MIN): new MultiValuedLongFieldSource(\"dv\", Type.MAX);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n          case SORTED_NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestDocValuesFieldSources#test(DocValuesType).mjava","sourceNew":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      case SORTED_NUMERIC:\n        f = new SortedNumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n        case SORTED_NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        case SORTED_NUMERIC:\n          // Since we are not indexing multiple values, MIN and MAX should work the same way\n          vs = random().nextBoolean()? new MultiValuedLongFieldSource(\"dv\", Type.MIN): new MultiValuedLongFieldSource(\"dv\", Type.MAX);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n          case SORTED_NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n          default:\n            throw new AssertionError();\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"fallthrough\")\n  public void test(DocValuesType type) throws IOException {\n    Directory d = newDirectory();\n    IndexWriterConfig iwConfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    final int nDocs = atLeast(50);\n    final Field id = new NumericDocValuesField(\"id\", 0);\n    final Field f;\n    switch (type) {\n      case BINARY:\n        f = new BinaryDocValuesField(\"dv\", new BytesRef());\n        break;\n      case SORTED:\n        f = new SortedDocValuesField(\"dv\", new BytesRef());\n        break;\n      case NUMERIC:\n        f = new NumericDocValuesField(\"dv\", 0);\n        break;\n      case SORTED_NUMERIC:\n        f = new SortedNumericDocValuesField(\"dv\", 0);\n        break;\n      default:\n        throw new AssertionError();\n    }\n    Document document = new Document();\n    document.add(id);\n    document.add(f);\n\n    final Object[] vals = new Object[nDocs];\n\n    RandomIndexWriter iw = new RandomIndexWriter(random(), d, iwConfig);\n    for (int i = 0; i < nDocs; ++i) {\n      id.setLongValue(i);\n      switch (type) {\n        case SORTED:\n        case BINARY:\n          do {\n            vals[i] = TestUtil.randomSimpleString(random(), 20);\n          } while (((String) vals[i]).isEmpty());\n          f.setBytesValue(new BytesRef((String) vals[i]));\n          break;\n        case NUMERIC:\n        case SORTED_NUMERIC:\n          final int bitsPerValue = RandomNumbers.randomIntBetween(random(), 1, 31); // keep it an int\n          vals[i] = (long) random().nextInt((int) PackedInts.maxValue(bitsPerValue));\n          f.setLongValue((Long) vals[i]);\n          break;\n      }\n      iw.addDocument(document);\n      if (random().nextBoolean() && i % 10 == 9) {\n        iw.commit();\n      }\n    }\n    iw.close();\n\n    DirectoryReader rd = DirectoryReader.open(d);\n    for (LeafReaderContext leave : rd.leaves()) {\n      final FunctionValues ids = new LongFieldSource(\"id\").getValues(null, leave);\n      final ValueSource vs;\n      switch (type) {\n        case BINARY:\n        case SORTED:\n          vs = new BytesRefFieldSource(\"dv\");\n          break;\n        case NUMERIC:\n          vs = new LongFieldSource(\"dv\");\n          break;\n        case SORTED_NUMERIC:\n          // Since we are not indexing multiple values, MIN and MAX should work the same way\n          vs = random().nextBoolean()? new MultiValuedLongFieldSource(\"dv\", Type.MIN): new MultiValuedLongFieldSource(\"dv\", Type.MAX);\n          break;\n        default:\n          throw new AssertionError();\n      }\n      final FunctionValues values = vs.getValues(null, leave);\n      BytesRefBuilder bytes = new BytesRefBuilder();\n      for (int i = 0; i < leave.reader().maxDoc(); ++i) {\n        assertTrue(values.exists(i));\n        if (vs instanceof BytesRefFieldSource) {\n          assertTrue(values.objectVal(i) instanceof String);\n        } else if (vs instanceof LongFieldSource) {\n          assertTrue(values.objectVal(i) instanceof Long);\n          assertTrue(values.bytesVal(i, bytes));\n        } else {\n          throw new AssertionError();\n        }\n        \n        Object expected = vals[ids.intVal(i)];\n        switch (type) {\n          case SORTED:\n            values.ordVal(i); // no exception\n            assertTrue(values.numOrd() >= 1);\n            // fall-through\n          case BINARY:\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertEquals(expected, values.objectVal(i));\n            assertEquals(expected, values.strVal(i));\n            assertTrue(values.bytesVal(i, bytes));\n            assertEquals(new BytesRef((String) expected), bytes.get());\n            break;\n          case NUMERIC:\n          case SORTED_NUMERIC:\n            assertEquals(((Number) expected).longValue(), values.longVal(i));\n            break;\n        }\n      }\n    }\n    rd.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["7cc453cd9f503b2ba830b15afa27d11dc109c6af","f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d":["7cc453cd9f503b2ba830b15afa27d11dc109c6af"],"b8b3ef05d58a3f28ef73c1a91de0f033a76bbdb3":["0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa"],"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["6448f67be45147de82a85cd903fec34e8930da75"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d68b012e2c254aa7a4e9c125b76daf501111c8ae"],"6448f67be45147de82a85cd903fec34e8930da75":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4","6448f67be45147de82a85cd903fec34e8930da75"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["b8b3ef05d58a3f28ef73c1a91de0f033a76bbdb3"],"d68b012e2c254aa7a4e9c125b76daf501111c8ae":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3dc707eb4c159b3029aac235f5f36bb3c7b58ee4":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3dc707eb4c159b3029aac235f5f36bb3c7b58ee4"],"f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"b8b3ef05d58a3f28ef73c1a91de0f033a76bbdb3":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"7cc453cd9f503b2ba830b15afa27d11dc109c6af":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","f8aec170a0a7ea13ccd5bbcb73e8d8971ece5a8d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6448f67be45147de82a85cd903fec34e8930da75":["7cc453cd9f503b2ba830b15afa27d11dc109c6af","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"0b0a6e8dd22135bf4d258b5977f896ccb87cd5aa":["b8b3ef05d58a3f28ef73c1a91de0f033a76bbdb3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d68b012e2c254aa7a4e9c125b76daf501111c8ae"],"d68b012e2c254aa7a4e9c125b76daf501111c8ae":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}