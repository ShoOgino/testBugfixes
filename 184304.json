{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40313e824c97bff922ec07766195564b4d2ebff8","date":1133737662,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"013110c74a7d28c3951b7137d450712daa5a28f6","date":1168861504,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            };\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next().mjava","sourceNew":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush(reusableToken);\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush(reusableToken);\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush(reusableToken);\n                }\n                push(c);\n                return flush(reusableToken);\n\n            default:\n                if (length>0) return flush(reusableToken);\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["013110c74a7d28c3951b7137d450712daa5a28f6"],"40313e824c97bff922ec07766195564b4d2ebff8":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"013110c74a7d28c3951b7137d450712daa5a28f6":["40313e824c97bff922ec07766195564b4d2ebff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40313e824c97bff922ec07766195564b4d2ebff8":["013110c74a7d28c3951b7137d450712daa5a28f6"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["40313e824c97bff922ec07766195564b4d2ebff8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"013110c74a7d28c3951b7137d450712daa5a28f6":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}