{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testTerms().mjava","sourceNew":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertArrayEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertArrayEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","sourceOld":"  public void testTerms() {\n    SolrQuery q = new SolrQuery();\n    \n    // check getters\n    assertEquals(false, q.getTerms());\n    assertEquals(null, q.getTermsFields());\n    assertEquals(\"\", q.getTermsLower());\n    assertEquals(\"\", q.getTermsUpper());\n    assertEquals(false, q.getTermsUpperInclusive());\n    assertEquals(true, q.getTermsLowerInclusive());\n    assertEquals(10, q.getTermsLimit());\n    assertEquals(1, q.getTermsMinCount());\n    assertEquals(-1, q.getTermsMaxCount());\n    assertEquals(\"\", q.getTermsPrefix());\n    assertEquals(false, q.getTermsRaw());\n    assertEquals(\"count\", q.getTermsSortString());\n    assertEquals(null, q.getTermsRegex());\n    assertEquals(null, q.getTermsRegexFlags());\n\n    // check setters\n    q.setTerms(true);\n    assertEquals(true, q.getTerms());\n    q.addTermsField(\"testfield\");\n    assertEquals(1, q.getTermsFields().length);\n    assertEquals(\"testfield\", q.getTermsFields()[0]);\n    q.setTermsLower(\"lower\");\n    assertEquals(\"lower\", q.getTermsLower());\n    q.setTermsUpper(\"upper\");\n    assertEquals(\"upper\", q.getTermsUpper());\n    q.setTermsUpperInclusive(true);\n    assertEquals(true, q.getTermsUpperInclusive());\n    q.setTermsLowerInclusive(false);\n    assertEquals(false, q.getTermsLowerInclusive());\n    q.setTermsLimit(5);\n    assertEquals(5, q.getTermsLimit());\n    q.setTermsMinCount(2);\n    assertEquals(2, q.getTermsMinCount());\n    q.setTermsMaxCount(5);\n    assertEquals(5, q.getTermsMaxCount());\n    q.setTermsPrefix(\"prefix\");\n    assertEquals(\"prefix\", q.getTermsPrefix());\n    q.setTermsRaw(true);\n    assertEquals(true, q.getTermsRaw());\n    q.setTermsSortString(\"index\");\n    assertEquals(\"index\", q.getTermsSortString());\n    q.setTermsRegex(\"a.*\");\n    assertEquals(\"a.*\", q.getTermsRegex());\n    q.setTermsRegexFlag(\"case_insensitive\");\n    q.setTermsRegexFlag(\"multiline\");\n    assertEquals(2, q.getTermsRegexFlags().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"]},"commit2Childs":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}