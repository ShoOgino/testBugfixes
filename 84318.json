{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CsvStream#CsvStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9","date":1564497726,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CsvStream#CsvStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CsvStream#CsvStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public CsvStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d60fd4bf1b42425aefd75d8a133d8d7ea41722e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d60fd4bf1b42425aefd75d8a133d8d7ea41722e9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d60fd4bf1b42425aefd75d8a133d8d7ea41722e9","f8061ddd97f3352007d927dae445884a6f3d857b"],"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}