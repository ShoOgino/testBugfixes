{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.FLAG_ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.FLAG_ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.FLAG_ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.FLAG_ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.fields();\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : FieldInfos.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : MultiFields.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : FieldInfos.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    Fields memFields = memIndexReader.getTermVectors(0);\n    for (String field : FieldInfos.getIndexedFields(other)) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = MultiDocValues.getNormValues(other, field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(0, normValues.nextDoc());\n          assertEquals(0, memNormValues.nextDoc());\n          assertEquals(normValues.longValue(), memNormValues.longValue());\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator();\n        TermsEnum memTermsIter = memTerms.iterator();\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null, PostingsEnum.ALL);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null, PostingsEnum.ALL);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n\n                if (iwTerms.hasPayloads()) {\n                  assertEquals(iwDocsAndPos.getPayload(), memDocsAndPos.getPayload());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            PostingsEnum iwDocsAndPos = iwTermsIter.postings(null);\n            PostingsEnum memDocsAndPos = memTermsIter.postings(null);\n            while(iwDocsAndPos.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d77dafd89756a5161d244985903e3487ca109182":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["28288370235ed02234a64753cdbf0c6ec096304a"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"28288370235ed02234a64753cdbf0c6ec096304a":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["d77dafd89756a5161d244985903e3487ca109182"],"761333d77c7f29123c00c93b107b743f32f012e6":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}