{"path":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of hte response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n        \n        \n    String debug = req.getParam(\"debugQuery\");\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new NamedList();          \n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\",req.getQueryString());\n      dbg.add(\"querystring\",userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0452863ee588101738d341e6e97eb87eb010052a","date":1152814944,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,CommonParams).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results,\n                                          CommonParams params)\n    throws IOException {\n        \n    String debug = getParam(req, params.DEBUG_QUERY, params.debugQuery);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new NamedList();          \n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of hte response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n        \n        \n    String debug = req.getParam(\"debugQuery\");\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new NamedList();          \n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\",req.getQueryString());\n      dbg.add(\"querystring\",userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(SolrParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new NamedList();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(SolrParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(SolrParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new NamedList();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(SolrParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParam(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["4145b7b13874de95211223a6edb648da8794a688"],"44f497c313977be641ddf24aab74b30e6de834d8":["0452863ee588101738d341e6e97eb87eb010052a"],"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"0452863ee588101738d341e6e97eb87eb010052a":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"4145b7b13874de95211223a6edb648da8794a688":["44f497c313977be641ddf24aab74b30e6de834d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"44f497c313977be641ddf24aab74b30e6de834d8":["4145b7b13874de95211223a6edb648da8794a688"],"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["0452863ee588101738d341e6e97eb87eb010052a"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"0452863ee588101738d341e6e97eb87eb010052a":["44f497c313977be641ddf24aab74b30e6de834d8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4145b7b13874de95211223a6edb648da8794a688":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}