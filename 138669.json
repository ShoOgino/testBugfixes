{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":"  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","sourceOld":"  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8ec3d9465957ecda8a08f8d15b96f0c745a8b53","date":1358518846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","sourceOld":"  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","sourceOld":"  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n  }\n\n","sourceOld":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n  }\n\n","sourceOld":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n    this.doPackFST = doPackFST;\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#MemoryPostingsFormat(boolean,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create MemoryPostingsFormat, specifying advanced FST options.\n   * @param doPackFST true if a packed FST should be built.\n   *        NOTE: packed FSTs are limited to ~2.1 GB of postings.\n   * @param acceptableOverheadRatio allowable overhead for packed ints\n   *        during FST construction.\n   */\n  public MemoryPostingsFormat(boolean doPackFST, float acceptableOverheadRatio) {\n    super(\"Memory\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8ec3d9465957ecda8a08f8d15b96f0c745a8b53":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","c8ec3d9465957ecda8a08f8d15b96f0c745a8b53"],"24f89e8a6aac05753cde4c83d62a74356098200d":["6244579a467d5f2673ac98265d74bddbea1a8114"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6244579a467d5f2673ac98265d74bddbea1a8114":["c8ec3d9465957ecda8a08f8d15b96f0c745a8b53"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["c8ec3d9465957ecda8a08f8d15b96f0c745a8b53","6244579a467d5f2673ac98265d74bddbea1a8114"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"c8ec3d9465957ecda8a08f8d15b96f0c745a8b53":["c4015cd39dff8d4dec562d909f9766debac53aa6","6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["c8ec3d9465957ecda8a08f8d15b96f0c745a8b53","c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"6244579a467d5f2673ac98265d74bddbea1a8114":["24f89e8a6aac05753cde4c83d62a74356098200d","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}