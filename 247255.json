{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","commits":[{"id":"4a009b1ead486cdd766fc886dccd36621d4f9827","date":1341697311,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","pathOld":"/dev/null","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","sourceNew":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n        buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n        char[] newBuffer = new char[buffer.length * 2];\n        System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n        buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {\t\t\t  // token won't fit in buffer\n      if (buffer == null) {\t\t\t  // first time: alloc buffer\n\tbuffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n\tchar[] newBuffer = new char[buffer.length*2];\n\tSystem.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n\tbuffer = newBuffer;\n      }\n    } else {\t\t\t\t\t  // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;\t\t\t  // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =\t\t\t\t  // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f43184d94158070757ac9bb9d71dc7b72925013","date":1600412010,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/charstream/FastCharStream#refill().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n        buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n        char[] newBuffer = new char[buffer.length * 2];\n        System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n        buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n        input.read(buffer, newPosition, buffer.length - newPosition);\n    if (charsRead == -1)\n      throw READ_PAST_EOF;\n    else\n      bufferLength += charsRead;\n  }\n\n","sourceOld":"  private final void refill() throws IOException {\n    int newPosition = bufferLength - tokenStart;\n\n    if (tokenStart == 0) {        // token won't fit in buffer\n      if (buffer == null) {        // first time: alloc buffer\n        buffer = new char[2048];\n      } else if (bufferLength == buffer.length) { // grow buffer\n        char[] newBuffer = new char[buffer.length * 2];\n        System.arraycopy(buffer, 0, newBuffer, 0, bufferLength);\n        buffer = newBuffer;\n      }\n    } else {            // shift token to front\n      System.arraycopy(buffer, tokenStart, buffer, 0, newPosition);\n    }\n\n    bufferLength = newPosition;        // update state\n    bufferPosition = newPosition;\n    bufferStart += tokenStart;\n    tokenStart = 0;\n\n    int charsRead =          // fill space in buffer\n      input.read(buffer, newPosition, buffer.length-newPosition);\n    if (charsRead == -1)\n      throw new IOException(\"read past eof\");\n    else\n      bufferLength += charsRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a009b1ead486cdd766fc886dccd36621d4f9827":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f43184d94158070757ac9bb9d71dc7b72925013":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a009b1ead486cdd766fc886dccd36621d4f9827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f43184d94158070757ac9bb9d71dc7b72925013"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"4a009b1ead486cdd766fc886dccd36621d4f9827":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5f43184d94158070757ac9bb9d71dc7b72925013":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a009b1ead486cdd766fc886dccd36621d4f9827","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4093b270ba337f9c25a4c0e6cb2ae2c07f697376","46d8ada1fff8d18cb197c38c7983225162599948"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["5f43184d94158070757ac9bb9d71dc7b72925013"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}