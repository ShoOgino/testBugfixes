{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",(random().nextBoolean() ? \"name_s_dv\" : \"*\")+ //\"dept_ss_dv,\n                    \",subq1:[subquery \"\n                +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",(random().nextBoolean() ? \"name_s_dv\" : \"*\")+ //\"dept_ss_dv,\n                    \",subq1:[subquery \"\n                +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",(random().nextBoolean() ? \"name_s_dv\" : \"*\")+ //\"dept_ss_dv,\n                    \",subq1:[subquery \"\n                +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac","date":1467877935,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","sourceNew":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\", (random().nextBoolean() ? \"name_s_dv,dept_ss_dv\" : \"*\") + \n              \",subq1:[subquery \" +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","sourceOld":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\",(random().nextBoolean() ? \"name_s_dv\" : \"*\")+ //\"dept_ss_dv,\n                    \",subq1:[subquery \"\n                +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","bugFix":["561c2351baf6dd64061addef891359954c1a7faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testMultiValue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValue() throws Exception {\n    \n    String [] happyPathAsserts = new String[]{\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys develop stuff'])=\"+\n        (peopleMultiplier * deptMultiplier),\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1']/doc/str[@name='text_t'][.='These guys help customers'])=\"+\n            (peopleMultiplier * deptMultiplier),\n        \"//result[@numFound=\"+peopleMultiplier+\"]\"};\n    Random random1 = random();\n    \n    assertQ(\"dave works at both, whether we set a  default separator or both\",\n        req(new String[]{\"q\",\"name_s:dave\", \"indent\",\"true\",\n        \"fl\", (random().nextBoolean() ? \"name_s_dv,dept_ss_dv\" : \"*\") + \n              \",subq1:[subquery \" +((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"]\", \n        \"rows\",\"\" + peopleMultiplier,\n        \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv \"+((random1.nextBoolean() ? \"\" : \"separator=,\"))+\"}\", \n        \"subq1.fl\",\"text_t\",\n        \"subq1.indent\",\"true\",\n        \"subq1.rows\",\"\"+(deptMultiplier*2),\n        \"subq1.logParamsList\",\"q,fl,rows,row.dept_ss_dv\"}),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even via numbers\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_is_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_i v=$row.dept_is_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n  \n    \n    assertQ(\"even if we set a separator both\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    String [] noMatchAtSubQ = new String[] {\n        \"count(//result/doc/str[@name='name_s_dv'][.='dave']/../result[@name='subq1'][@numFound=0])=\"+\n        (peopleMultiplier),\n    \"//result[@numFound=\"+peopleMultiplier+\"]\" };\n        \n    assertQ(\"different separators, no match\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv separator=\\\" \\\"}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"and no matter where\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!terms f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ\n    );\n    \n    assertQ(\"setting a wrong parser gets you nowhere\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!term f=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n    \n    assertQ(\"but it luckily works with default query parser, but it's not really reliable\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,subq1:[subquery separator=\\\" \\\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        happyPathAsserts        \n            );\n    \n    assertQ(\"even lucene qp can't help at any separator but space\",\n        req(\"q\",\"name_s:dave\", \"indent\",\"true\",\n            \"fl\",\"dept_ss_dv,name_s_dv,\"\n                + \"subq1:[subquery \"+(random().nextBoolean() ? \"\" : \"separator=\" +((random().nextBoolean() ? \"\" : \",\")))+\"]\", \n            \"rows\",\"\" + ( peopleMultiplier),\n            \"subq1.q\",\"{!lucene df=dept_id_s v=$row.dept_ss_dv}\", \n            \"subq1.fl\",\"text_t\",\n            \"subq1.indent\",\"true\",\n            \"subq1.rows\",\"\"+(deptMultiplier*2)),\n        noMatchAtSubQ        \n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["36d6e11f1c5c0002ca3ed3f26c79201e2fce09ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}