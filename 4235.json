{"path":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        Random random = newRandom();\n        performTest(random, 5);\n        performTest(random, 10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(random, 5);\n        performTest(random, 10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        Random random = newRandom();\n        performTest(random, 5);\n        performTest(random, 10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks()\n        // are performed\n        if (!CodecProvider.getDefaultCodec().equals(\"SimpleText\")) {\n          performTest(5);\n          performTest(10);\n        }\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(random, 5);\n        performTest(random, 10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeTrue(!CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks()\n        // are performed\n        if (!CodecProvider.getDefaultCodec().equals(\"SimpleText\")) {\n          performTest(5);\n          performTest(10);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","date":1287243791,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeTrue(!CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeTrue(!CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", getRandomFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", getRandomFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefaultCodec().equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        // test whether only the minimum amount of seeks() are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"Memory\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"Memory\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n        assumeFalse(\"This test cannot run with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"SimpleText\"));\n        assumeFalse(\"This test cannot run with Memory codec\", CodecProvider.getDefault().getFieldCodec(this.field).equals(\"Memory\"));\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        searcher.close();\n        performTest(10);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testLazySkipping().mjava","sourceNew":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","sourceOld":"    public void testLazySkipping() throws IOException {\n      final String fieldFormat = _TestUtil.getPostingsFormat(this.field);\n      assumeFalse(\"This test cannot run with Memory codec\", fieldFormat.equals(\"Memory\"));\n      assumeFalse(\"This test cannot run with SimpleText codec\", fieldFormat.equals(\"SimpleText\"));\n\n        // test whether only the minimum amount of seeks()\n        // are performed\n        performTest(5);\n        performTest(10);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["8d47f68d60cbff5718136b945ba8c55982342f38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"8d47f68d60cbff5718136b945ba8c55982342f38":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"7b91922b55d15444d554721b352861d028eb8278":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["790e1fde4caa765b3faaad3fbcd25c6973450336","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"8d47f68d60cbff5718136b945ba8c55982342f38":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"7b91922b55d15444d554721b352861d028eb8278":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8d47f68d60cbff5718136b945ba8c55982342f38"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["13452165d8bf3d45a72f572aaed3c679735d3af2","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["7b91922b55d15444d554721b352861d028eb8278","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}