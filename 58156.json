{"path":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#exactSimScorer(SimWeight,AtomicReaderContext).mjava","commits":[{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#exactSimScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#exactDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public ExactSimScorer exactSimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final ExactSimScorer sub = sim.exactSimScorer(stats, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n\n      return new ExactSimScorer() {\n        @Override\n        public float score(int doc, int freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public ExactDocScorer exactDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final ExactDocScorer sub = sim.exactDocScorer(stats, fieldName, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n\n      return new ExactDocScorer() {\n        @Override\n        public float score(int doc, int freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#exactSimScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#exactSimScorer(SimWeight,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public ExactSimScorer exactSimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final ExactSimScorer sub = sim.exactSimScorer(stats, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n\n      return new ExactSimScorer() {\n        @Override\n        public float score(int doc, int freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public ExactSimScorer exactSimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final ExactSimScorer sub = sim.exactSimScorer(stats, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n\n      return new ExactSimScorer() {\n        @Override\n        public float score(int doc, int freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}