{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testPullOneTermsEnumPerField().mjava","commits":[{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testPullOneTermsEnumPerField().mjava","pathOld":"/dev/null","sourceNew":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermsQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermsQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnumPerField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testPullOneTermsEnumPerField().mjava","sourceNew":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermInSetQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermsQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermsQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testPullOneTermsEnumPerField().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testPullOneTermsEnumPerField().mjava","sourceNew":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermInSetQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermInSetQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPullOneTermsEnumPerField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"1\", Store.NO));\n    doc.add(new StringField(\"bar\", \"2\", Store.NO));\n    doc.add(new StringField(\"baz\", \"3\", Store.NO));\n    w.addDocument(doc);\n    DirectoryReader reader = w.getReader();\n    w.close();\n    final AtomicInteger counter = new AtomicInteger();\n    DirectoryReader wrapped = new TermsCountingDirectoryReaderWrapper(reader, counter);\n\n    final List<Term> terms = new ArrayList<>();\n    final Set<String> fields = new HashSet<>();\n    // enough terms to avoid the rewrite\n    final int numTerms = TestUtil.nextInt(random(), TermsQuery.BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD + 1, 100);\n    for (int i = 0; i < numTerms; ++i) {\n      final String field = RandomPicks.randomFrom(random(), new String[] {\"foo\", \"bar\", \"baz\"});\n      final BytesRef term = new BytesRef(RandomStrings.randomUnicodeOfCodepointLength(random(), 10));\n      fields.add(field);\n      terms.add(new Term(field, term));\n    }\n\n    new IndexSearcher(wrapped).count(new TermsQuery(terms));\n    assertEquals(fields.size(), counter.get());\n    wrapped.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}