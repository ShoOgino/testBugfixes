{"path":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","commits":[{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"/dev/null","sourceNew":"  public boolean isLocked() {\n    return lock != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  public synchronized boolean isLocked() {\n    return lock != null;\n  }\n\n","sourceOld":"  public boolean isLocked() {\n    return lock != null;\n  }\n\n","bugFix":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  public synchronized boolean isLocked() {\n    return lock != null;\n  }\n\n","bugFix":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b","0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#isLocked().mjava","sourceNew":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","sourceOld":"  @Override\n  public synchronized boolean isLocked() {\n    // The test for is isLocked is not directly possible with native file locks:\n    \n    // First a shortcut, if a lock reference in this instance is available\n    if (lockExists()) return true;\n    \n    // Look if lock file is present; if not, there can definitely be no lock!\n    if (!path.exists()) return false;\n    \n    // Try to obtain and release (if was locked) the lock\n    try {\n      boolean obtained = obtain();\n      if (obtained) release();\n      return !obtained;\n    } catch (IOException ioe) {\n      return false;\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["67006a60923e2124212d3baa0d29b444bcbd8373"],"8a9e385641d717e641408d8fbbc62be8fc766357":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"67006a60923e2124212d3baa0d29b444bcbd8373":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["8a9e385641d717e641408d8fbbc62be8fc766357"],"67006a60923e2124212d3baa0d29b444bcbd8373":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["67006a60923e2124212d3baa0d29b444bcbd8373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}