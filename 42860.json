{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldIndexDirs.get(name));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      w.close();\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldIndexDirs.get(name));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      w.close();\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldIndexDirs.get(name));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      w.close();\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldIndexDirs.get(name));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      w.close();\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97ba94eef1fc33c5451259a7aa2ac682646c1af","date":1488285427,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(oldDir).getIndexCreatedVersion();\n\n      Directory targetDir = newDirectory();\n      // Simulate writing into an index that was created on the same version\n      new SegmentInfos(indexCreatedVersion).commit(targetDir);\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      // Now check that we forbid calling addIndexes with a different version\n      targetDir = newDirectory();\n      IndexWriter oldWriter = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> oldWriter.addIndexes(oldDir));\n      assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      oldWriter.close();\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory targetDir = newDirectory();\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldIndexDirs.get(name));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      w.close();\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n\n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        // both indexes are not compatible\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> w.addIndexes(oldDir));\n        assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(oldDir).getIndexCreatedVersion();\n\n      Directory targetDir = newDirectory();\n      // Simulate writing into an index that was created on the same version\n      new SegmentInfos(indexCreatedVersion).commit(targetDir);\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      // Now check that we forbid calling addIndexes with a different version\n      targetDir = newDirectory();\n      IndexWriter oldWriter = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> oldWriter.addIndexes(oldDir));\n      assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      oldWriter.close();\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n\n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        // both indexes are not compatible\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> w.addIndexes(oldDir));\n        assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      Version indexCreatedVersion = SegmentInfos.readLatestCommit(oldDir).getIndexCreatedVersion();\n\n      Directory targetDir = newDirectory();\n      // Simulate writing into an index that was created on the same version\n      new SegmentInfos(indexCreatedVersion).commit(targetDir);\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      // Now check that we forbid calling addIndexes with a different version\n      targetDir = newDirectory();\n      IndexWriter oldWriter = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> oldWriter.addIndexes(oldDir));\n      assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      oldWriter.close();\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testAddOldIndexes().mjava","sourceNew":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n\n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        // both indexes are not compatible\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> w.addIndexes(oldDir));\n        assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n\n      SegmentInfos si = SegmentInfos.readLatestCommit(targetDir);\n      assertNull(\"none of the segments should have been upgraded\",\n          si.asList().stream().filter( // depending on the MergePolicy we might see these segments merged away\n              sci -> sci.getId() != null && sci.info.getVersion().onOrAfter(Version.LUCENE_8_6_0) == false\n          ).findAny().orElse(null));\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      \n      targetDir.close();\n    }\n  }\n\n","sourceOld":"  public void testAddOldIndexes() throws IOException {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: old index \" + name);\n      }\n      Directory oldDir = oldIndexDirs.get(name);\n      SegmentInfos infos = SegmentInfos.readLatestCommit(oldDir);\n\n      Directory targetDir = newDirectory();\n      if (infos.getCommitLuceneVersion().major != Version.LATEST.major) {\n        // both indexes are not compatible\n        Directory targetDir2 = newDirectory();\n        IndexWriter w = new IndexWriter(targetDir2, newIndexWriterConfig(new MockAnalyzer(random())));\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> w.addIndexes(oldDir));\n        assertTrue(e.getMessage(), e.getMessage().startsWith(\"Cannot use addIndexes(Directory) with indexes that have been created by a different Lucene version.\"));\n        w.close();\n        targetDir2.close();\n\n        // for the next test, we simulate writing to an index that was created on the same major version\n        new SegmentInfos(infos.getIndexCreatedVersionMajor()).commit(targetDir);\n      }\n\n      IndexWriter w = new IndexWriter(targetDir, newIndexWriterConfig(new MockAnalyzer(random())));\n      w.addIndexes(oldDir);\n      w.close();\n      targetDir.close();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: done adding indices; now close\");\n      }\n      \n      targetDir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}