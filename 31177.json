{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","commits":[{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new StandardFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new StandardFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","date":1385332359,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link FacetsAccumulator} for the given facet requests. This\n   * method supports {@link RangeAccumulator} and\n   * {@link TaxonomyFacetsAccumulator} by dividing the facet requests into\n   * {@link RangeFacetRequest} and the rest.\n   * <p>\n   * If both types of facet requests are used, it returns a\n   * {@link MultiFacetsAccumulator} and the facet results returned from\n   * {@link #accumulate(List)} may not be in the same order as the given facet\n   * requests.\n   * \n   * @param fsp\n   *          the search params define the facet requests and the\n   *          {@link FacetIndexingParams}\n   * @param indexReader\n   *          the {@link IndexReader} used for search\n   * @param taxoReader\n   *          the {@link TaxonomyReader} used for search\n   * @param arrays\n   *          the {@link FacetArrays} which the accumulator should use to store\n   *          the categories weights in. Can be {@code null}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader, \n      FacetArrays arrays) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new OldFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    }\n    \n    List<FacetRequest> rangeRequests = new ArrayList<FacetRequest>();\n    List<FacetRequest> nonRangeRequests = new ArrayList<FacetRequest>();\n    for (FacetRequest fr : fsp.facetRequests) {\n      if (fr instanceof RangeFacetRequest) {\n        rangeRequests.add(fr);\n      } else {\n        nonRangeRequests.add(fr);\n      }\n    }\n\n    if (rangeRequests.isEmpty()) {\n      return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader, arrays);\n    } else if (nonRangeRequests.isEmpty()) {\n      return new RangeAccumulator(rangeRequests);\n    } else {\n      FacetSearchParams searchParams = new FacetSearchParams(fsp.indexingParams, nonRangeRequests);\n      FacetsAccumulator accumulator = new TaxonomyFacetsAccumulator(searchParams, indexReader, taxoReader, arrays);\n      RangeAccumulator rangeAccumulator = new RangeAccumulator(rangeRequests);\n      return MultiFacetsAccumulator.wrap(accumulator, rangeAccumulator);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"d33e19a97046248623a7591aeaa6547233fd15e2":["5ec3bb9046a73ab9aea7b2a07d53ca9b71904990"],"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["d33e19a97046248623a7591aeaa6547233fd15e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}