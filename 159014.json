{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","sourceNew":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length+1);\n    final int[] states = savedStates.ints;\n    states[0] = runAutomaton.getInitialState();\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = states[pos]; pos < seekBytesRef.length; pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.bytes[pos] & 0xff);\n        if (nextState == -1)\n          break;\n        states[pos+1] = nextState;\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(states[pos], seekBytesRef.bytes[pos] & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length+1);\n    final int[] states = savedStates.ints;\n    states[0] = runAutomaton.getInitialState();\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = states[pos]; pos < seekBytesRef.length; pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.bytes[pos] & 0xff);\n        if (nextState == -1)\n          break;\n        states[pos+1] = nextState;\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(states[pos], seekBytesRef.bytes[pos] & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","sourceNew":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, runAutomaton.getInitialState());\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length+1);\n    final int[] states = savedStates.ints;\n    states[0] = runAutomaton.getInitialState();\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = states[pos]; pos < seekBytesRef.length; pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.bytes[pos] & 0xff);\n        if (nextState == -1)\n          break;\n        states[pos+1] = nextState;\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(states[pos], seekBytesRef.bytes[pos] & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","bugFix":["705cdca081fbf23193d7ff6db22fedef9dd7c54f","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","sourceNew":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, 0);\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, runAutomaton.getInitialState());\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","sourceNew":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, 0);\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, runAutomaton.getInitialState());\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","date":1582882926,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#nextString().mjava","sourceNew":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, 0);\n    \n    while (true) {\n      if (!finite && ++curGen == 0) {\n        // Clear the visited states every time curGen wraps (so very infrequently to not impact average perf).\n        Arrays.fill(visited, (short) -1);\n      }\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        setVisited(state);\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!linear && isVisited(nextState)) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the byte buffer to the next String in binary order after s that will not put\n   * the machine into a reject state. If such a string does not exist, returns\n   * false.\n   * \n   * The correctness of this method depends upon the automaton being deterministic,\n   * and having no transitions to dead states.\n   * \n   * @return true if more possible solutions exist for the DFA\n   */\n  private boolean nextString() {\n    int state;\n    int pos = 0;\n    savedStates.grow(seekBytesRef.length()+1);\n    savedStates.setIntAt(0, 0);\n    \n    while (true) {\n      curGen++;\n      linear = false;\n      // walk the automaton until a character is rejected.\n      for (state = savedStates.intAt(pos); pos < seekBytesRef.length(); pos++) {\n        visited[state] = curGen;\n        int nextState = runAutomaton.step(state, seekBytesRef.byteAt(pos) & 0xff);\n        if (nextState == -1)\n          break;\n        savedStates.setIntAt(pos+1, nextState);\n        // we found a loop, record it for faster enumeration\n        if (!finite && !linear && visited[nextState] == curGen) {\n          setLinear(pos);\n        }\n        state = nextState;\n      }\n\n      // take the useful portion, and the last non-reject state, and attempt to\n      // append characters that will match.\n      if (nextString(state, pos)) {\n        return true;\n      } else { /* no more solutions exist from this useful portion, backtrack */\n        if ((pos = backtrack(pos)) < 0) /* no more solutions at all */\n          return false;\n        final int newState = runAutomaton.step(savedStates.intAt(pos), seekBytesRef.byteAt(pos) & 0xff);\n        if (newState >= 0 && runAutomaton.isAccept(newState))\n          /* String is good to go as-is */\n          return true;\n        /* else advance further */\n        // TODO: paranoia? if we backtrack thru an infinite DFA, the loop detection is important!\n        // for now, restart from scratch for all infinite DFAs \n        if (!finite) pos = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["b7543e96e2d4820e09334d36a699b998ed963f4f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14"]},"commit2Childs":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}