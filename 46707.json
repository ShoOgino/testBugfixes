{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).info.getDocCount() < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4853751884e55469b8cc1abab8fa0788eab240c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4853751884e55469b8cc1abab8fa0788eab240c9"]},"commit2Childs":{"4853751884e55469b8cc1abab8fa0788eab240c9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4853751884e55469b8cc1abab8fa0788eab240c9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}