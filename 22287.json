{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","sourceNew":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.getArraysLength();\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","sourceOld":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.getArraysLength();\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","sourceNew":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.arrayLength;\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","sourceOld":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.getArraysLength();\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","sourceNew":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.arrayLength;\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","sourceOld":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.getArraysLength();\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/partitions/search/PartitionsFacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetResultsHandler#isSelfPartition(int,FacetArrays,int).mjava","sourceNew":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.arrayLength;\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","sourceOld":"  /**\n   * Check if an array contains the partition which contains ordinal\n   * \n   * @param ordinal\n   *          checked facet\n   * @param facetArrays\n   *          facet arrays for the certain partition\n   * @param offset\n   *          offset in input arrays where partition starts\n   */\n  protected boolean isSelfPartition (int ordinal, FacetArrays facetArrays, int offset) {\n    int partitionSize = facetArrays.arrayLength;\n    return ordinal / partitionSize == offset / partitionSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}