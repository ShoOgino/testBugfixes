{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testPositionIncrementsWithOrig().mjava","commits":[{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testPositionIncrementsWithOrig().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#testPositionIncrementsWithOrig().mjava","sourceNew":"  public void testPositionIncrementsWithOrig() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = true;\n    boolean merge = true;\n\n    // test that generated tokens start at the same offset as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 0, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 0, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 5, 0, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 0, 0, 2 });\n  }\n\n","sourceOld":"  public void testPositionIncrementsWithOrig() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = true;\n    boolean merge = true;\n\n    // test that generated tokens start at the same offset as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 0, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 0, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 5, 0, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 0, 0, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testPositionIncrementsWithOrig().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testPositionIncrementsWithOrig().mjava","sourceNew":"  public void testPositionIncrementsWithOrig() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = true;\n    boolean merge = true;\n\n    // test that generated tokens start at the same offset as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 0, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 0, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 5, 0, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 0, 0, 2 });\n  }\n\n","sourceOld":"  public void testPositionIncrementsWithOrig() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = true;\n    boolean merge = true;\n\n    // test that generated tokens start at the same offset as the original\n    map.add(strings(\"a\"), tokens(\"aa\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"a,5\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"a,0\"),\n        new String[] { \"a\", \"aa\" },\n        new int[] { 0, 0 });\n\n    // test that offset of first replacement is ignored (always takes the orig offset)\n    map.add(strings(\"b\"), tokens(\"bb,100\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"b,5\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 5, 0 });\n    assertTokenizesTo(map, tokens(\"b,0\"),\n        new String[] { \"b\", \"bb\" },\n        new int[] { 0, 0 });\n\n    // test that subsequent tokens are adjusted accordingly\n    map.add(strings(\"c\"), tokens(\"cc,100 c2,2\"), orig, merge);\n    assertTokenizesTo(map, tokens(\"c,5\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 5, 0, 2 });\n    assertTokenizesTo(map, tokens(\"c,0\"),\n        new String[] { \"c\", \"cc\", \"c2\" },\n        new int[] { 0, 0, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}