{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c34e07420c03a037d73169b35f349c2ad6fd8c7","date":1412304383,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     IndexFileNames.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    if (UndeadNormsProducer.isUndeadArmy(state.fieldInfos)) {\n      return UndeadNormsProducer.INSTANCE;\n    } else {\n      return new Lucene40NormsReader(state, filename);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    if (UndeadNormsProducer.isUndeadArmy(state.fieldInfos)) {\n      return UndeadNormsProducer.INSTANCE;\n    } else {\n      return new Lucene40NormsReader(state, filename);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    return new Lucene40NormsReader(state, filename);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40NormsFormat#normsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NormsProducer normsProducer(SegmentReadState state) throws IOException {\n    String filename = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     \"nrm\", \n                                                     Lucene40CompoundFormat.COMPOUND_FILE_EXTENSION);\n    if (UndeadNormsProducer.isUndeadArmy(state.fieldInfos)) {\n      return UndeadNormsProducer.INSTANCE;\n    } else {\n      return new Lucene40NormsReader(state, filename);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["9c34e07420c03a037d73169b35f349c2ad6fd8c7","05da2d758a6089e737cdfc230e57a51b472b94b6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"9c34e07420c03a037d73169b35f349c2ad6fd8c7":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","71387d8cb6923eb831b17a8b734608ba2e21c653"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"9bb9a29a5e71a90295f175df8919802993142c9a":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"9c34e07420c03a037d73169b35f349c2ad6fd8c7":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9bb9a29a5e71a90295f175df8919802993142c9a","9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}