{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c12bd5aa06553085d5db3011d2f3906ccadd0ac","date":1337939866,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        //Nested documents\n        while( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          int event = parser.next();\n          if (event == XMLStreamConstants.END_ELEMENT) { //Doc ends\n            return doc;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["87405ce5d9e414377a5dcdcd407fc75c4454a19e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87405ce5d9e414377a5dcdcd407fc75c4454a19e","date":1500683157,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        if ( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          depth--; // (nested) readDocument clears out the (nested) 'endElement'\n          continue; // may be more child docs, or other fields\n        }\n\n        // other then nested documents, all other possible nested elements require a name...\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        //Nested documents\n        while( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          int event = parser.next();\n          if (event == XMLStreamConstants.END_ELEMENT) { //Doc ends\n            return doc;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        if ( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          depth--; // (nested) readDocument clears out the (nested) 'endElement'\n          continue; // may be more child docs, or other fields\n        }\n\n        // other then nested documents, all other possible nested elements require a name...\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        //Nested documents\n        while( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          int event = parser.next();\n          if (event == XMLStreamConstants.END_ELEMENT) { //Doc ends\n            return doc;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        if ( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          depth--; // (nested) readDocument clears out the (nested) 'endElement'\n          continue; // may be more child docs, or other fields\n        }\n\n        // other then nested documents, all other possible nested elements require a name...\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        //Nested documents\n        while( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          int event = parser.next();\n          if (event == XMLStreamConstants.END_ELEMENT) { //Doc ends\n            return doc;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n\n    // just eat up the events...\n    int depth = 0;\n    while( true )\n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n\n        if ( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          depth--; // (nested) readDocument clears out the (nested) 'endElement'\n          continue; // may be more child docs, or other fields\n        }\n\n        // other then nested documents, all other possible nested elements require a name...\n\n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n\n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--;\n        } else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n\n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        if ( type == KnownType.DOC) {\n          doc.addChildDocument(readDocument(parser));\n          depth--; // (nested) readDocument clears out the (nested) 'endElement'\n          continue; // may be more child docs, or other fields\n        }\n\n        // other then nested documents, all other possible nested elements require a name...\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        } else if( type == KnownType.LST ) {\n            doc.addField( name, readNamedList( parser ) );\n          depth--; \n        } else if( !type.isLeaf ) {\n          System.out.println(\"nbot leaf!:\" + type);\n          \n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","87405ce5d9e414377a5dcdcd407fc75c4454a19e"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2c12bd5aa06553085d5db3011d2f3906ccadd0ac"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2c12bd5aa06553085d5db3011d2f3906ccadd0ac","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"2c12bd5aa06553085d5db3011d2f3906ccadd0ac":["c26f00b574427b55127e869b935845554afde1fa"],"46d8ada1fff8d18cb197c38c7983225162599948":["2c12bd5aa06553085d5db3011d2f3906ccadd0ac","2acf500f78aa12b92e371fd89c719291986b6b90"],"a52341299179de5479672f7cf518bf4b173f34b3":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","87405ce5d9e414377a5dcdcd407fc75c4454a19e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c12bd5aa06553085d5db3011d2f3906ccadd0ac","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87405ce5d9e414377a5dcdcd407fc75c4454a19e":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["2c12bd5aa06553085d5db3011d2f3906ccadd0ac"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","87405ce5d9e414377a5dcdcd407fc75c4454a19e"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c12bd5aa06553085d5db3011d2f3906ccadd0ac":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"a52341299179de5479672f7cf518bf4b173f34b3":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"87405ce5d9e414377a5dcdcd407fc75c4454a19e":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}