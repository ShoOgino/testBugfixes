{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","sourceNew":"  @Test\n  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryRand().mjava","sourceNew":"  @Test\n  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryRand() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test extremes, bounded on both ends\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n\n    // unbounded\n\n    result = search.search(csrq(\"rand\", minRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"rand\", null, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"rand\", minRP, minRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"rand\", maxRP, maxRP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"rand\", minRP, minRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", null, minRP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"rand\", maxRP, maxRP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"rand\", maxRP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}