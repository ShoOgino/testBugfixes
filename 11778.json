{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n\n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        flags[i] = (char) Integer.parseInt(rawFlagParts[i].replaceAll(\"[^0-9]\", \"\"));\n      }\n\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = ArrayUtil.copyOfSubArray(flags, 0, upto);\n      }\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = ArrayUtil.copyOfSubArray(flags, 0, upto);\n      }\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = ArrayUtil.copyOfSubArray(flags, 0, upto);\n      }\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n      int upto = 0;\n      \n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        String replacement = rawFlagParts[i].replaceAll(\"[^0-9]\", \"\");\n        // note, ignoring empty flags (this happens in danish, for example)\n        if (replacement.isEmpty()) {\n          continue;\n        }\n        flags[upto++] = (char) Integer.parseInt(replacement);\n      }\n\n      if (upto < flags.length) {\n        flags = Arrays.copyOf(flags, upto);\n      }\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ba791bce8103c79e38f957e9c5a53a75871bd918","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ba791bce8103c79e38f957e9c5a53a75871bd918","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}