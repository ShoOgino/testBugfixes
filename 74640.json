{"path":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","commits":[{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"197bbedf08450ade98a11f4a0001448059666bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}