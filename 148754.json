{"path":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,Searcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, (IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,Searcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(random, searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        (random, (IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHitCollector(Query,String,Searcher,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Query query, String defaultFieldName,\n                                       Searcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapSearcher(searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Searcher \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n                        \n    if ( ! ( searcher instanceof IndexSearcher ) ) return;\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      QueryUtils.wrapUnderlyingReader\n        ((IndexSearcher)searcher, i).search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}