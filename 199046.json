{"path":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","commits":[{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testMatchAll().mjava","sourceNew":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits.value);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMatchAll() throws Exception {\n    Directory directory = newDirectory();\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"field\", Field.Store.YES));\n    writer.addDocument(doc);\n\n    IndexReader reader = writer.getReader();\n\n    PrefixQuery query = new PrefixQuery(new Term(\"field\", \"\"));\n    IndexSearcher searcher = newSearcher(reader);\n\n    assertEquals(1, searcher.search(query, 1000).totalHits);\n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}