{"path":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","commits":[{"id":"f8da75c64a26663199511eef8db650621ed89107","date":1251204606,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB);\n    searchers[1] = new IndexSearcher(indexStoreA);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB);\n    searchers[1] = new IndexSearcher(indexStoreA);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB);\n    searchers[1] = new IndexSearcher(indexStoreA);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(\"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["f8da75c64a26663199511eef8db650621ed89107"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"f8da75c64a26663199511eef8db650621ed89107":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["f8da75c64a26663199511eef8db650621ed89107","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"f8da75c64a26663199511eef8db650621ed89107":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8da75c64a26663199511eef8db650621ed89107"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}