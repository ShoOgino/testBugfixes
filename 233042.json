{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","commits":[{"id":"10d2f7af0975ac83900a2c970a62fe4c8667176b","date":1282358169,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"/dev/null","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    search(query, luceneFilter, MultiCollector.wrap(collectors));\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      groupResult.add(\"matches\", collector.getMatches());\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, topDocs.getMaxScore());\n        nl.add(\"doclist\", docs);\n\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n      qr.groupedResults = grouped;\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71f160a09c8926e48290b7f4342a47eab588a11d","date":1284584360,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      groupResult.add(\"matches\", collector.getMatches());\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, topDocs.getMaxScore());\n        nl.add(\"doclist\", docs);\n\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n      qr.groupedResults = grouped;\n\n    }\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    search(query, luceneFilter, MultiCollector.wrap(collectors));\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      groupResult.add(\"matches\", collector.getMatches());\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, topDocs.getMaxScore());\n        nl.add(\"doclist\", docs);\n\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n      qr.groupedResults = grouped;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be","date":1284660971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      groupResult.add(\"matches\", collector.getMatches());\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, topDocs.getMaxScore());\n        nl.add(\"doclist\", docs);\n\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n      qr.groupedResults = grouped;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4794c296bd2c2d028cb0c217981cb94f9314b5a9","date":1284757850,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc instanceof GroupSortCommand) {\n          GroupSortCommand sortGc = (GroupSortCommand) gc;\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, sortGc.sort, last);  \n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort;\n        if (gc instanceof GroupSortCommand) {\n          collectorSort = ((GroupSortCommand) gc).sort;\n        } else {\n          collectorSort = sort;\n        }\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9916984e99244c407152f6cfc2c3bf89a30bc8","date":1284760018,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors);\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (GroupCommand groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof GroupCommandFunc) {\n        GroupCommandFunc gc = (GroupCommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      GroupCommand groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCommandFunc groupCommandFunc = (GroupCommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4723db11f8550520912d26e73d0d91869f9eedd2","date":1284919173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, groupCommand.docsPerGroup, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = (GroupCollector)collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, groupCommand.docsPerGroup);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    // TODO: make this a generic collector list\n    List<TopGroupCollector> collectors = new ArrayList<TopGroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = collectors.get(cmdnum);\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = collector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, groupCommand.docsPerGroup, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, groupCommand.docsPerGroup);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, groupCommand.docsPerGroup, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = (GroupCollector)collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, groupCommand.docsPerGroup);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddd83ce02b85f7d0c728af48e14e0eeb42de813a","date":1288533972,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int maxDoc = maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n\n        int groupsToCollect = gc.numGroups<0 ? maxDoc : gc.offset + gc.numGroups;\n        if (groupsToCollect < 0 || groupsToCollect > maxDoc) groupsToCollect = maxDoc;\n\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, groupsToCollect);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, groupsToCollect);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, docsToCollect, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, docsToCollect, needScores, groupCommand.offset);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, docsToCollect);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(groupCommand.groupOffset, Math.max(0, ids.length - groupCommand.groupOffset), ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          DocIterator iter = docs.iterator();\n          while (iter.hasNext())\n            idSet.add(iter.nextDoc());\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = groupCommand.offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, docsToCollect);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(groupCommand.groupOffset, Math.max(0, ids.length - groupCommand.groupOffset), ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          DocIterator iter = docs.iterator();\n          while (iter.hasNext())\n            idSet.add(iter.nextDoc());\n        }\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, groupCommand.docsPerGroup, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, groupCommand.docsPerGroup);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bf528aa2b9571ce1ec892ecf726201ef1e404e3","date":1288732150,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":null,"sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int maxDoc = maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n\n        int groupsToCollect = gc.numGroups<0 ? maxDoc : gc.offset + gc.numGroups;\n        if (groupsToCollect < 0 || groupsToCollect > maxDoc) groupsToCollect = maxDoc;\n\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, groupsToCollect);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, groupsToCollect);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, docsToCollect, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, docsToCollect, needScores, groupCommand.offset);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, docsToCollect);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(groupCommand.groupOffset, Math.max(0, ids.length - groupCommand.groupOffset), ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          DocIterator iter = docs.iterator();\n          while (iter.hasNext())\n            idSet.add(iter.nextDoc());\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      int skipCount = groupCommand.offset;\n      for (SearchGroup group : collector.orderedGroups) {\n        if (skipCount > 0) {\n          skipCount--;\n          continue;\n        }\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        int docsToCollect = groupCommand.docsPerGroup<0 ? maxDoc : groupCommand.groupOffset + groupCommand.docsPerGroup;\n        if (docsToCollect < 0 || docsToCollect > maxDoc) docsToCollect = maxDoc;\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, docsToCollect);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(groupCommand.groupOffset, Math.max(0, ids.length - groupCommand.groupOffset), ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          DocIterator iter = docs.iterator();\n          while (iter.hasNext())\n            idSet.add(iter.nextDoc());\n        }\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#groupBy(QueryResult,QueryCommand).mjava","sourceNew":null,"sourceOld":"  private void groupBy(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocListAndSet out = new DocListAndSet();\n    qr.setDocListAndSet(out);\n\n    DocSet filter = cmd.getFilter()!=null ? cmd.getFilter() : getDocSet(cmd.getFilterList());\n\n    int last = cmd.getOffset() + cmd.getLen();\n    if (last < 0 || last > maxDoc()) last=maxDoc();\n\n    boolean needScores = (cmd.getFlags() & GET_SCORES) != 0;\n    boolean getDocSet = (cmd.getFlags() & GET_DOCSET) != 0;\n    boolean getDocList = (cmd.getFlags() & GET_DOCLIST) != 0; // doclist needed for debugging or highlighting\n    Query query = QueryUtils.makeQueryable(cmd.getQuery());\n\n    final Filter luceneFilter = filter==null ? null : filter.getTopFilter();\n\n    Sort sort = cmd.getSort();\n    if (sort == null) sort = new Sort();\n\n    List<GroupCollector> collectors = new ArrayList<GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      // TODO: perhaps use some methods rather than instanceof\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Map context = ValueSource.newContext();\n        gc.groupBy.createWeight(context, this);\n        TopGroupCollector collector;\n        if (gc.groupSort != null && gc.groupSort != sort) {\n          collector = new TopGroupSortCollector(gc.groupBy, context, sort, gc.groupSort, last);\n        } else {\n          collector = new TopGroupCollector(gc.groupBy, context, sort, last);\n        }\n        collectors.add(collector);\n\n        // for next phase\n        gc.context = context;\n        gc.collector = collector;\n      }\n\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        DocSet groupFilt = getDocSet(((Grouping.CommandQuery)groupCommand).query);\n        TopFieldCollector collector = TopFieldCollector.create(groupCommand.groupSort==null ? sort : groupCommand.groupSort, groupCommand.docsPerGroup, false, needScores, needScores, true);\n        collectors.add(new FilterCollector(groupFilt, collector));\n      }\n    }\n\n    Collector allCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n    DocSetCollector setCollector = null;\n    if (getDocSet) {\n      // TODO: can callCollectors be zero length?\n      setCollector = new DocSetDelegateCollector(maxDoc()>>6, maxDoc(), allCollectors);\n      allCollectors = setCollector;\n    }\n\n    search(query, luceneFilter, allCollectors);\n\n    if (getDocSet) {\n      qr.docListAndSet.docSet = setCollector.getDocSet();\n    }\n\n    // TODO: make this a generic collector list\n    int numPhase2 = 0;\n    List<Phase2GroupCollector> phase2Collectors = new ArrayList<Phase2GroupCollector>(cmd.groupCommands.size());\n    for (Grouping.Command groupCommand : cmd.groupCommands) {\n      if (groupCommand instanceof Grouping.CommandFunc) {\n        Grouping.CommandFunc gc = (Grouping.CommandFunc)groupCommand;\n        Sort collectorSort = gc.groupSort == null ? sort : gc.groupSort;\n        Phase2GroupCollector collector = new Phase2GroupCollector((TopGroupCollector)gc.collector, gc.groupBy, gc.context, collectorSort, gc.docsPerGroup, needScores);\n        phase2Collectors.add(collector);\n        numPhase2++;\n      } else if (groupCommand instanceof Grouping.CommandQuery) {\n        phase2Collectors.add(null);\n      } else {\n        phase2Collectors.add(null);        \n      }\n    }\n\n    // TODO: optionally cache docs and feed them back through rather than re-searching\n    if (numPhase2 > 0)\n      search(query, luceneFilter, MultiCollector.wrap(phase2Collectors.toArray(new Collector[phase2Collectors.size()])));\n\n    Set<Integer> idSet = new LinkedHashSet<Integer>();  // used for tracking unique docs when we need a doclist\n    int maxMatches = 0;\n    float maxScore = Float.NEGATIVE_INFINITY;\n\n    NamedList grouped = new SimpleOrderedMap();\n    for (int cmdnum=0; cmdnum<cmd.groupCommands.size(); cmdnum++) {\n      Grouping.Command groupCommand = cmd.groupCommands.get(cmdnum);\n      GroupCollector gcollector = collectors.get(cmdnum);\n\n      NamedList groupResult = new SimpleOrderedMap();\n      grouped.add(groupCommand.key, groupResult);  // grouped={ key={\n\n      int this_matches = gcollector.getMatches();\n      groupResult.add(\"matches\", this_matches);\n      maxMatches = Math.max(maxMatches, this_matches);\n\n      // TODO: refactor this\n      if (groupCommand instanceof Grouping.CommandQuery) {\n        TopDocs topDocs = ((FilterCollector)gcollector).getTopFieldCollector().topDocs(0, groupCommand.docsPerGroup);\n\n        // TODO: refactor\n\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        groupResult.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        continue;\n      }\n\n      Grouping.CommandFunc groupCommandFunc = (Grouping.CommandFunc)groupCommand;\n      TopGroupCollector collector = (TopGroupCollector)gcollector;\n      Phase2GroupCollector collector2 = phase2Collectors.get(cmdnum);\n\n      if (collector.orderedGroups == null) collector.buildSet();\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        // grouped={ key={ groups=[\n\n      for (SearchGroup group : collector.orderedGroups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         // grouped={ key={ groups=[ {\n\n        nl.add(\"groupValue\", group.groupValue.toObject());\n\n        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);\n        // nl.add(\"matches\", groupDocs.matches);  // redundant with doclist.numFound from the doc list\n\n        TopDocs topDocs = groupDocs.collector.topDocs(0, groupCommandFunc.docsPerGroup);\n        //topDocs.totalHits\n        int ids[] = new int[topDocs.scoreDocs.length];\n        float[] scores = needScores ? new float[topDocs.scoreDocs.length] : null;\n        for (int i=0; i<ids.length; i++) {\n          ids[i] = topDocs.scoreDocs[i].doc;\n          if (scores != null)\n            scores[i] = topDocs.scoreDocs[i].score;\n        }\n\n        float score = topDocs.getMaxScore();\n        maxScore = Math.max(maxScore, score);\n        DocSlice docs = new DocSlice(0, ids.length, ids, scores, topDocs.totalHits, score);\n        nl.add(\"doclist\", docs);\n\n        if (getDocList) {\n          for (int id : ids)\n            idSet.add(id);\n        }\n\n        /*** values from stage 1\n         DocSlice docs = new DocSlice(0, 1, new int[] {group.topDoc}, null, 1, 0);\n         nl.add(\"docs\", docs);\n\n         Object[] vals = new Object[collector.comparators.length];\n         for (int i=0; i<vals.length; i++) {\n         vals[i] = collector.comparators[i].value(group.comparatorSlot);\n         }\n         nl.add(\"groupSortValue\", vals);\n         groupResult.add(nl);\n         ***/\n      }\n    }\n\n    qr.groupedResults = grouped;    \n\n    if (getDocList) {\n      int sz = idSet.size();\n      int[] ids = new int[sz];\n      int idx = 0;\n      for (int val : idSet) {\n        ids[idx++] = val;\n      }\n      qr.docListAndSet.docList = new DocSlice(0, sz, ids, null, maxMatches, maxScore);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["4723db11f8550520912d26e73d0d91869f9eedd2"],"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be":["71f160a09c8926e48290b7f4342a47eab588a11d"],"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["4794c296bd2c2d028cb0c217981cb94f9314b5a9"],"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["ddd83ce02b85f7d0c728af48e14e0eeb42de813a"],"10d2f7af0975ac83900a2c970a62fe4c8667176b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4723db11f8550520912d26e73d0d91869f9eedd2":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"71f160a09c8926e48290b7f4342a47eab588a11d":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"ddd83ce02b85f7d0c728af48e14e0eeb42de813a":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"4794c296bd2c2d028cb0c217981cb94f9314b5a9":["6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["85a883878c0af761245ab048babc63d099f835f3","ddd83ce02b85f7d0c728af48e14e0eeb42de813a"],"6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be":["4794c296bd2c2d028cb0c217981cb94f9314b5a9"],"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["4723db11f8550520912d26e73d0d91869f9eedd2"],"4bf528aa2b9571ce1ec892ecf726201ef1e404e3":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10d2f7af0975ac83900a2c970a62fe4c8667176b":["71f160a09c8926e48290b7f4342a47eab588a11d"],"4723db11f8550520912d26e73d0d91869f9eedd2":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10d2f7af0975ac83900a2c970a62fe4c8667176b"],"85a883878c0af761245ab048babc63d099f835f3":[],"71f160a09c8926e48290b7f4342a47eab588a11d":["6d7a4063d87c3c1f313aef4c02d5d02c3d2e18be"],"ddd83ce02b85f7d0c728af48e14e0eeb42de813a":["4bf528aa2b9571ce1ec892ecf726201ef1e404e3"],"4794c296bd2c2d028cb0c217981cb94f9314b5a9":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}