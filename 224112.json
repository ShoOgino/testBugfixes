{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"/dev/null","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"/dev/null","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n    assertAuthMetricsMinimums(16, 8, 0, 8, 0, 0);\n  }\n\n","sourceOld":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":["b11987928068249b275ba9d322b48872b5cea81a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b11987928068249b275ba9d322b48872b5cea81a","date":1557425626,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n    assertAuthMetricsMinimums(14, 8, 0, 6, 0, 0);\n  }\n\n","sourceOld":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n    assertAuthMetricsMinimums(16, 8, 0, 8, 0, 0);\n  }\n\n","bugFix":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    assertAuthMetricsMinimums(14, 8, 0, 6, 0, 0);\n  }\n\n","sourceOld":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, true, 330);\n    assertAuthMetricsMinimums(14, 8, 0, 6, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    // cookie was used to avoid re-authentication\n    assertAuthMetricsMinimums(13, 8, 0, 5, 0, 0);  }\n\n","sourceOld":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    assertAuthMetricsMinimums(14, 8, 0, 6, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestSolrCloudWithHadoopAuthPlugin#testCollectionCreateSearchDelete().mjava","sourceNew":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(4, 2, 0, 2, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(8, 4, 0, 4, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    // cookie was used to avoid re-authentication\n    assertAuthMetricsMinimums(11, 7, 0, 4, 0, 0);  }\n\n","sourceOld":"  protected void testCollectionCreateSearchDelete() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String collectionName = \"testkerberoscollection\";\n\n    // create collection\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, \"conf1\",\n        NUM_SHARDS, REPLICATION_FACTOR);\n    create.process(solrClient);\n    // The metrics counter for wrong credentials here really just means  \n    assertAuthMetricsMinimums(6, 3, 0, 3, 0, 0);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    solrClient.add(collectionName, doc);\n    solrClient.commit(collectionName);\n    assertAuthMetricsMinimums(10, 5, 0, 5, 0, 0);\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = solrClient.query(collectionName, query);\n    assertEquals(1, rsp.getResults().getNumFound());\n\n    CollectionAdminRequest.Delete deleteReq = CollectionAdminRequest.deleteCollection(collectionName);\n    deleteReq.process(solrClient);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName,\n        solrClient.getZkStateReader(), true, 330);\n    // cookie was used to avoid re-authentication\n    assertAuthMetricsMinimums(13, 8, 0, 5, 0, 0);  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"3f504512a03d978990cbff30db0522b354e846db":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["29887daf839649150d96855b142b76f5c45d60d2"],"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["b11987928068249b275ba9d322b48872b5cea81a"],"b11987928068249b275ba9d322b48872b5cea81a":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["b11987928068249b275ba9d322b48872b5cea81a"],"29887daf839649150d96855b142b76f5c45d60d2":["85397dd93927c17347c6bf89800cd0fc566c2d03","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"b11987928068249b275ba9d322b48872b5cea81a":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}