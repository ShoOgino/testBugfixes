{"path":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","commits":[{"id":"8214b336ced6e39dbcfceabae6e22ae97cb02b4c","date":1475245801,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f","date":1477377788,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#leaderRecoverFromLogOnStartupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","sourceNew":"  @Test\n  public void leaderRecoverFromLogOnStartupTest() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = countReplayLog::incrementAndGet;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"1\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"2\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"3\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(COLLECTION, params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), COLLECTION, 120000));\n\n    resp = cloudClient.query(COLLECTION, params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#leaderRecoverFromLogOnStartupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","sourceNew":"  @Test\n  public void leaderRecoverFromLogOnStartupTest() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = countReplayLog::incrementAndGet;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"1\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"2\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"3\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(COLLECTION, params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), COLLECTION, 120000));\n\n    resp = cloudClient.query(COLLECTION, params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#leaderRecoverFromLogOnStartupTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderRecoverFromLogOnStartup#test().mjava","sourceNew":"  @Test\n  public void leaderRecoverFromLogOnStartupTest() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = countReplayLog::incrementAndGet;\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"1\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"2\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"3\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(COLLECTION, params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(cluster.getJettySolrRunners());\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), COLLECTION, 120000));\n\n    resp = cloudClient.query(COLLECTION, params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    AtomicInteger countReplayLog = new AtomicInteger(0);\n    DirectUpdateHandler2.commitOnClose = false;\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        countReplayLog.incrementAndGet();\n      }\n    };\n\n    String testCollectionName = \"testCollection\";\n    createCollection(testCollectionName, 2, 2, 1);\n    waitForRecoveriesToFinish(false);\n\n    cloudClient.setDefaultCollection(testCollectionName);\n    cloudClient.add(sdoc(\"id\", \"1\"));\n    cloudClient.add(sdoc(\"id\", \"2\"));\n    cloudClient.add(sdoc(\"id\", \"3\"));\n    cloudClient.add(sdoc(\"id\", \"4\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"*:*\");\n    QueryResponse resp = cloudClient.query(params);\n    assertEquals(0, resp.getResults().getNumFound());\n\n    ChaosMonkey.stop(jettys);\n    ChaosMonkey.stop(controlJetty);\n    assertTrue(\"Timeout waiting for all not live\", ClusterStateUtil.waitForAllReplicasNotLive(cloudClient.getZkStateReader(), 45000));\n    ChaosMonkey.start(jettys);\n    ChaosMonkey.start(controlJetty);\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cloudClient.getZkStateReader(), testCollectionName, 120000));\n\n    cloudClient.commit();\n    resp = cloudClient.query(params);\n    assertEquals(4, resp.getResults().getNumFound());\n    // Make sure all nodes is recover from tlog\n    assertEquals(4, countReplayLog.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","40b4f9867bcb3a1cf45f8a02b05af0bdf552746f"],"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8214b336ced6e39dbcfceabae6e22ae97cb02b4c"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"8214b336ced6e39dbcfceabae6e22ae97cb02b4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40b4f9867bcb3a1cf45f8a02b05af0bdf552746f":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","40b4f9867bcb3a1cf45f8a02b05af0bdf552746f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","8214b336ced6e39dbcfceabae6e22ae97cb02b4c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"8214b336ced6e39dbcfceabae6e22ae97cb02b4c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}