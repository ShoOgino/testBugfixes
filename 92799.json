{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peek(long).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peek(long).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws Exception {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws Exception {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#peek(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws Exception {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}