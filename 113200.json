{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax, fieldInfo);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfc24eeacea277c182acfad3a446cf9137f791d","date":1403022573,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = LegacyNumericRangeQuery.newDoubleRange(field_minY, getPrecisionStep(), null, bbox.getMinY(), false, true);\n    Query qMaxY = LegacyNumericRangeQuery.newDoubleRange(field_maxY, getPrecisionStep(), bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(BooleanClause.Occur.MUST, qMinY, qMaxY);\n\n    // X conditions\n    Query xConditions;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qMaxX = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(BooleanClause.Occur.MUST, qMinX, qMaxX);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      if (!ctx.isGeo()) {\n        xConditions = qNonXDL;\n      } else {\n        // X Conditions for documents that cross the date line,\n        // the left portion of the document contains the min X of the query\n        // OR the right portion of the document contains the max X of the query,\n        // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n        Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n        Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n        Query qXDLLeftRight = this.makeQuery(BooleanClause.Occur.SHOULD, qXDLLeft, qXDLRight);\n        Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n        Query qEdgeDL = null;\n        if (bbox.getMinX() == bbox.getMaxX() && Math.abs(bbox.getMinX()) == 180) {\n          double edge = bbox.getMinX() * -1;//opposite dateline edge\n          qEdgeDL = makeQuery(BooleanClause.Occur.SHOULD,\n              makeNumberTermQuery(field_minX, edge), makeNumberTermQuery(field_maxX, edge));\n        }\n\n        // apply the non-XDL and XDL conditions\n        xConditions = this.makeQuery(BooleanClause.Occur.SHOULD, qNonXDL, qXDL, qEdgeDL);\n      }\n    } else {\n      // queries that cross the date line\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = LegacyNumericRangeQuery.newDoubleRange(field_minX, getPrecisionStep(), null, bbox.getMinX(), false, true);\n      Query qXDLRight = LegacyNumericRangeQuery.newDoubleRange(field_maxX, getPrecisionStep(), bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeXDL(true, this.makeQuery(BooleanClause.Occur.MUST, qXDLLeft, qXDLRight));\n\n      Query qWorld = makeQuery(BooleanClause.Occur.MUST,\n          makeNumberTermQuery(field_minX, -180), makeNumberTermQuery(field_maxX, 180));\n\n      xConditions = makeQuery(BooleanClause.Occur.SHOULD, qXDLLeftRight, qWorld);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(BooleanClause.Occur.MUST, xConditions, yConditions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4dfc24eeacea277c182acfad3a446cf9137f791d":["0415a016b37e58a017fed0a91234f733ab359971"],"af2638813028b254a88b418ebeafb541afb49653":["770342641f7b505eaa8dccdc666158bff2419109","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["0415a016b37e58a017fed0a91234f733ab359971","4dfc24eeacea277c182acfad3a446cf9137f791d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["4dfc24eeacea277c182acfad3a446cf9137f791d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["4dfc24eeacea277c182acfad3a446cf9137f791d","e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4dfc24eeacea277c182acfad3a446cf9137f791d":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"770342641f7b505eaa8dccdc666158bff2419109":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}