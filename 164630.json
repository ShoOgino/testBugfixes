{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<Clause>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val.toString();\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n      \n      // full phrase and shingles\n      for (FieldParams phraseField: allPhraseFields) {\n        Map<String,Float> pf = new HashMap<String,Float>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<Clause>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val.toString();\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n      \n      // full phrase and shingles\n      for (FieldParams phraseField: allPhraseFields) {\n        Map<String,Float> pf = new HashMap<String,Float>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val.toString();\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n      \n      // full phrase and shingles\n      for (FieldParams phraseField: allPhraseFields) {\n        Map<String,Float> pf = new HashMap<>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n      \n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<Clause>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val.toString();\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n      \n      // full phrase and shingles\n      for (FieldParams phraseField: allPhraseFields) {\n        Map<String,Float> pf = new HashMap<String,Float>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acb10061e140a7f3d5035b8be54d966ebcb672ad","date":1407934573,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val.toString();\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n      \n      // full phrase and shingles\n      for (FieldParams phraseField: allPhraseFields) {\n        Map<String,Float> pf = new HashMap<>(1);\n        pf.put(phraseField.getField(),phraseField.getBoost());\n        addShingledPhraseQueries(query, normalClauses, pf,   \n            phraseField.getWordGrams(),config.tiebreaker, phraseField.getSlop());\n      }\n      \n    }\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7e79e31f55cbb444e3023d430a340658755aa31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery.Builder,List[Clause],ExtendedDismaxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#addPhraseFieldQueries(BooleanQuery,List[Clause],ExtendedDismaxConfiguration).mjava","sourceNew":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery.Builder query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds shingled phrase queries to all the fields specified in the pf, pf2 anf pf3 parameters\n   * \n   */\n  protected void addPhraseFieldQueries(BooleanQuery query, List<Clause> clauses,\n      ExtendedDismaxConfiguration config) throws SyntaxError {\n\n    // sloppy phrase queries for proximity\n    List<FieldParams> allPhraseFields = config.getAllPhraseFields();\n    \n    if (allPhraseFields.size() > 0) {\n      // find non-field clauses\n      List<Clause> normalClauses = new ArrayList<>(clauses.size());\n      for (Clause clause : clauses) {\n        if (clause.field != null || clause.isPhrase) continue;\n        // check for keywords \"AND,OR,TO\"\n        if (clause.isBareWord()) {\n          String s = clause.val;\n          // avoid putting explicit operators in the phrase query\n          if (\"OR\".equals(s) || \"AND\".equals(s) || \"NOT\".equals(s) || \"TO\".equals(s)) continue;\n        }\n        normalClauses.add(clause);\n      }\n\n      // create a map of {wordGram, [phraseField]}\n      Multimap<Integer, FieldParams> phraseFieldsByWordGram = Multimaps.index(allPhraseFields, WORD_GRAM_EXTRACTOR);\n\n      // for each {wordGram, [phraseField]} entry, create and add shingled field queries to the main user query\n      for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsByWordGramEntry : phraseFieldsByWordGram.asMap().entrySet()) {\n\n        // group the fields within this wordGram collection by their associated slop (it's possible that the same\n        // field appears multiple times for the same wordGram count but with different slop values. In this case, we\n        // should take the *sum* of those phrase queries, rather than the max across them).\n        Multimap<Integer, FieldParams> phraseFieldsBySlop = Multimaps.index(phraseFieldsByWordGramEntry.getValue(), PHRASE_SLOP_EXTRACTOR);\n        for (Map.Entry<Integer, Collection<FieldParams>> phraseFieldsBySlopEntry : phraseFieldsBySlop.asMap().entrySet()) {\n          addShingledPhraseQueries(query, normalClauses, phraseFieldsBySlopEntry.getValue(),\n              phraseFieldsByWordGramEntry.getKey(), config.tiebreaker, phraseFieldsBySlopEntry.getKey());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7e79e31f55cbb444e3023d430a340658755aa31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acb10061e140a7f3d5035b8be54d966ebcb672ad":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"acb10061e140a7f3d5035b8be54d966ebcb672ad":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c7e79e31f55cbb444e3023d430a340658755aa31":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}