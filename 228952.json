{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testRandomNumerics().mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testRandomNumerics().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testRandomNumerics().mjava","sourceNew":"  /**\n   * This test doesn't validate the correctness of results, it just compares the response of the same request\n   * when asking for Trie fields vs Point fields. Can be removed once Trie fields are no longer supported\n   */\n  @Test\n  @SuppressForbidden(reason=\"using new Date(time) to create random dates\")\n  public void testRandomNumerics() throws Exception {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT);\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    List<String> trieFields = new ArrayList<String>();\n    List<String> pointFields = new ArrayList<String>();\n    for (String mv:new String[]{\"s\", \"\"}) {\n      for (String indexed:new String[]{\"_ni\", \"\"}) {\n        for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n          String field = \"number_\" + type + mv + indexed;\n          SchemaField sf = h.getCore().getLatestSchema().getField(field + \"_t\");\n          assertTrue(sf.hasDocValues());\n          assertTrue(sf.getType().getNumberType() != null);\n          \n          sf = h.getCore().getLatestSchema().getField(field + \"_p\");\n          assertTrue(sf.hasDocValues());\n          assertTrue(sf.getType().getNumberType() != null);\n          assertTrue(sf.getType().isPointField());\n          \n          trieFields.add(field + \"_t\");\n          pointFields.add(field + \"_p\");\n        }\n      }\n    }\n    for (int i = 0; i < atLeast(100); i++) {\n      if (random().nextInt(20) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(20) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      \n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      addInt(doc, random().nextInt(), false);\n      addLong(doc, random().nextLong(), false);\n      addFloat(doc, random().nextFloat() * 3000 * (random().nextBoolean()?1:-1), false);\n      addDouble(doc, random().nextDouble() * 3000 * (random().nextBoolean()?1:-1), false);\n      addDate(doc, dateFormat.format(new Date()), false);\n\n      // MV need to be unique in order to be the same in Trie vs Points\n      Set<Integer> ints = new HashSet<>();\n      Set<Long> longs = new HashSet<>();\n      Set<Float> floats = new HashSet<>();\n      Set<Double> doubles = new HashSet<>();\n      Set<String> dates = new HashSet<>();\n      for (int j=0; j < random().nextInt(20); j++) {\n        ints.add(random().nextInt());\n        longs.add(random().nextLong());\n        floats.add(random().nextFloat() * 3000 * (random().nextBoolean()?1:-1));\n        doubles.add(random().nextDouble() * 3000 * (random().nextBoolean()?1:-1));\n        dates.add(dateFormat.format(new Date(System.currentTimeMillis() + random().nextInt())));\n      }\n      ints.stream().forEach((val)->addInt(doc, val, true));\n      longs.stream().forEach((val)->addLong(doc, val, true));\n      floats.stream().forEach((val)->addFloat(doc, val, true));\n      doubles.stream().forEach((val)->addDouble(doc, val, true));\n      dates.stream().forEach((val)->addDate(doc, val, true));\n      \n      assertU(adoc(doc));\n      if (random().nextInt(20) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n    doTestQuery(\"id:1\", trieFields, pointFields);\n    doTestQuery(\"*:*\", trieFields, pointFields);\n    doTestQuery(\"id:[0 TO 2]\", trieFields, pointFields);// \"id\" field is really a string, this is not a numeric range query\n    doTestQuery(\"id:[0 TO 9]\", trieFields, pointFields);\n    doTestQuery(\"id:DOES_NOT_EXIST\", trieFields, pointFields);\n  }\n\n","sourceOld":"  /**\n   * This test doesn't validate the correctness of results, it just compares the response of the same request\n   * when asking for Trie fields vs Point fields. Can be removed once Trie fields are no longer supported\n   */\n  @Test\n  @SuppressForbidden(reason=\"using new Date(time) to create random dates\")\n  public void testRandomNumerics() throws Exception {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT);\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    List<String> trieFields = new ArrayList<String>();\n    List<String> pointFields = new ArrayList<String>();\n    for (String mv:new String[]{\"s\", \"\"}) {\n      for (String indexed:new String[]{\"_ni\", \"\"}) {\n        for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n          String field = \"number_\" + type + mv + indexed;\n          SchemaField sf = h.getCore().getLatestSchema().getField(field + \"_t\");\n          assertTrue(sf.hasDocValues());\n          assertTrue(sf.getType().getNumberType() != null);\n          \n          sf = h.getCore().getLatestSchema().getField(field + \"_p\");\n          assertTrue(sf.hasDocValues());\n          assertTrue(sf.getType().getNumberType() != null);\n          assertTrue(sf.getType().isPointField());\n          \n          trieFields.add(field + \"_t\");\n          pointFields.add(field + \"_p\");\n        }\n      }\n    }\n    for (int i = 0; i < atLeast(100); i++) {\n      if (random().nextInt(20) == 0) {\n        //have some empty docs\n        assertU(adoc(\"id\", String.valueOf(i)));\n        continue;\n      }\n\n      if (random().nextInt(20) == 0 && i > 0) {\n        //delete some docs\n        assertU(delI(String.valueOf(i - 1)));\n      }\n      \n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      addInt(doc, random().nextInt(), false);\n      addLong(doc, random().nextLong(), false);\n      addFloat(doc, random().nextFloat() * 3000 * (random().nextBoolean()?1:-1), false);\n      addDouble(doc, random().nextDouble() * 3000 * (random().nextBoolean()?1:-1), false);\n      addDate(doc, dateFormat.format(new Date()), false);\n\n      // MV need to be unique in order to be the same in Trie vs Points\n      Set<Integer> ints = new HashSet<>();\n      Set<Long> longs = new HashSet<>();\n      Set<Float> floats = new HashSet<>();\n      Set<Double> doubles = new HashSet<>();\n      Set<String> dates = new HashSet<>();\n      for (int j=0; j < random().nextInt(20); j++) {\n        ints.add(random().nextInt());\n        longs.add(random().nextLong());\n        floats.add(random().nextFloat() * 3000 * (random().nextBoolean()?1:-1));\n        doubles.add(random().nextDouble() * 3000 * (random().nextBoolean()?1:-1));\n        dates.add(dateFormat.format(new Date(System.currentTimeMillis() + random().nextInt())));\n      }\n      ints.stream().forEach((val)->addInt(doc, val, true));\n      longs.stream().forEach((val)->addLong(doc, val, true));\n      floats.stream().forEach((val)->addFloat(doc, val, true));\n      doubles.stream().forEach((val)->addDouble(doc, val, true));\n      dates.stream().forEach((val)->addDate(doc, val, true));\n      \n      assertU(adoc(doc));\n      if (random().nextInt(20) == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n    doTestQuery(\"id:1\", trieFields, pointFields);\n    doTestQuery(\"*:*\", trieFields, pointFields);\n    doTestQuery(\"id:[0 TO 2]\", trieFields, pointFields);// \"id\" field is really a string, this is not a numeric range query\n    doTestQuery(\"id:[0 TO 9]\", trieFields, pointFields);\n    doTestQuery(\"id:DOES_NOT_EXIST\", trieFields, pointFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}