{"path":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName) {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n        getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue != null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      } else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      } else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      } else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName) {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n        getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue != null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      } else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      } else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      } else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":null,"sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName) {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n        getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue != null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      } else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      } else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      } else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":null,"sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName) {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n        getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue != null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      } else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      } else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      } else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":null,"sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName) {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n        getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue != null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      } else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      } else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      } else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b89678825b68eccaf09e6ab71675fc0b0af1e099","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8c9a6ea78b00a421744e770568d8c2aab262e4cd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}