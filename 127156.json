{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<URL>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["437e65c578cab603d9201916b0e285f3d68aff45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<URL>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<URL>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<URL>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","sourceOld":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          String rawXml = os.toString(\"UTF-8\");\n          Document d = makeDom(rawXml, \"UTF-8\");\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml, \"UTF-8\");\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"437e65c578cab603d9201916b0e285f3d68aff45","date":1427831677,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      return l;\n    }\n\n","sourceOld":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#getLinksFromWebPage(URL,InputStream,String,URL).mjava","sourceNew":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      return l;\n    }\n\n","sourceOld":"    /**\n     * Finds links on a web page, using /extract?extractOnly=true\n     * @param u the URL of the web page\n     * @param is the input stream of the page\n     * @param type the content-type\n     * @param postUrl the URL (typically /solr/extract) in order to pull out links\n     * @return a set of URLs parsed from the page\n     */\n    protected Set<URL> getLinksFromWebPage(URL u, InputStream is, String type, URL postUrl) {\n      Set<URL> l = new HashSet<>();\n      URL url = null;\n      try {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        URL extractUrl = new URL(appendParam(postUrl.toString(), \"extractOnly=true\"));\n        boolean success = postData(is, null, os, type, extractUrl);\n        if(success) {\n          Document d = makeDom(os.toByteArray());\n          String innerXml = getXP(d, \"/response/str/text()[1]\", false);\n          d = makeDom(innerXml.getBytes(StandardCharsets.UTF_8));\n          NodeList links = getNodesFromXP(d, \"/html/body//a/@href\");\n          for(int i = 0; i < links.getLength(); i++) {\n            String link = links.item(i).getTextContent();\n            link = computeFullUrl(u, link);\n            if(link == null)\n              continue;\n            url = new URL(link);\n            if(url.getAuthority() == null || !url.getAuthority().equals(u.getAuthority()))\n              continue;\n            l.add(url);\n          }\n        }\n      } catch (MalformedURLException e) {\n        warn(\"Malformed URL \"+url);\n      } catch (IOException e) {\n        warn(\"IOException opening URL \"+url+\": \"+e.getMessage());\n      } catch (Exception e) {\n        throw new RuntimeException();\n      }\n      return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c2c3a504730329ae644b009dee43024116605d47"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"437e65c578cab603d9201916b0e285f3d68aff45":["9d3d365762604952e436b51980101dfc84cc1b3e"],"fab172655716b96f7e42376116235017a922de3a":["9d3d365762604952e436b51980101dfc84cc1b3e","437e65c578cab603d9201916b0e285f3d68aff45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["437e65c578cab603d9201916b0e285f3d68aff45"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","437e65c578cab603d9201916b0e285f3d68aff45","fab172655716b96f7e42376116235017a922de3a"],"c2c3a504730329ae644b009dee43024116605d47":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"437e65c578cab603d9201916b0e285f3d68aff45":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}