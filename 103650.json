{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","sourceNew":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key cannot be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key cannot be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","sourceNew":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value value to set\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key cannot be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key cannot be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig#[T]_set(ConfigurationKey[T],T).mjava","sourceNew":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value value to set\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key must not be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Sets a key and its value.\n   * \n   * @param <T> the value's type\n   * @param key the key, cannot be <code>null</code>\n   * @param value value to set\n   */\n  public <T> void set(ConfigurationKey<T> key, T value) {\n    \n    if (key == null) {\n      throw new IllegalArgumentException(\"key cannot be null!\");\n    }\n    \n    if (value == null) {\n      unset(key);\n      \n    } else {\n      this.configMap.put(key, value);\n    }\n    \n  }\n\n","bugFix":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}