{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testCustomFrequecy().mjava","commits":[{"id":"f3ff85fc12f4290c14ae4652270f0216b9cec578","date":1556640829,"type":0,"author":"Olli Kuonanoja","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testCustomFrequecy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomFrequecy() throws IOException {\n    // define an analyzer with delimited term frequency, e.g. \"foo|2 bar|3\"\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false, 100);\n        MockTokenFilter filt = new MockTokenFilter(tokenizer, MockTokenFilter.EMPTY_STOPSET);\n        return new TokenStreamComponents(tokenizer, addCustomTokenFilter(filt));\n      }\n\n      TokenStream addCustomTokenFilter(TokenStream input) {\n        return new TokenFilter(input) {\n          final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          final TermFrequencyAttribute tfAtt = addAttribute(TermFrequencyAttribute.class);\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (input.incrementToken()) {\n              final char[] buffer = termAtt.buffer();\n              final int length = termAtt.length();\n              for (int i = 0; i < length; i++) {\n                if (buffer[i] == '|') {\n                  termAtt.setLength(i);\n                  i++;\n                  tfAtt.setTermFrequency(ArrayUtil.parseInt(buffer, i, length - i));\n                  return true;\n                }\n              }\n              return true;\n            }\n            return false;\n          }\n        };\n      }\n    };\n\n    mlt.setAnalyzer(analyzer);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n\n    final double boost10 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|10 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    final double boost1 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|1 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    // mlt should use the custom frequencies provided by the analyzer so \"lucene|10\" should be boosted more than \"lucene|1\"\n    assertTrue(String.format(\"%s should be grater than %s\", boost10, boost1), boost10 > boost1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abfaf3712e13f45966f0d985fa11400a1fbe6678","date":1556735502,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testCustomFrequecy().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testCustomFrequecy().mjava","sourceNew":"  public void testCustomFrequecy() throws IOException {\n    // define an analyzer with delimited term frequency, e.g. \"foo|2 bar|3\"\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false, 100);\n        MockTokenFilter filt = new MockTokenFilter(tokenizer, MockTokenFilter.EMPTY_STOPSET);\n        return new TokenStreamComponents(tokenizer, addCustomTokenFilter(filt));\n      }\n\n      TokenStream addCustomTokenFilter(TokenStream input) {\n        return new TokenFilter(input) {\n          final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          final TermFrequencyAttribute tfAtt = addAttribute(TermFrequencyAttribute.class);\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (input.incrementToken()) {\n              final char[] buffer = termAtt.buffer();\n              final int length = termAtt.length();\n              for (int i = 0; i < length; i++) {\n                if (buffer[i] == '|') {\n                  termAtt.setLength(i);\n                  i++;\n                  tfAtt.setTermFrequency(ArrayUtil.parseInt(buffer, i, length - i));\n                  return true;\n                }\n              }\n              return true;\n            }\n            return false;\n          }\n        };\n      }\n    };\n\n    mlt.setAnalyzer(analyzer);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n\n    final double boost10 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|10 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    final double boost1 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|1 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    // mlt should use the custom frequencies provided by the analyzer so \"lucene|10\" should be boosted more than \"lucene|1\"\n    assertTrue(String.format(Locale.ROOT, \"%s should be grater than %s\", boost10, boost1), boost10 > boost1);\n  }\n\n","sourceOld":"  public void testCustomFrequecy() throws IOException {\n    // define an analyzer with delimited term frequency, e.g. \"foo|2 bar|3\"\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false, 100);\n        MockTokenFilter filt = new MockTokenFilter(tokenizer, MockTokenFilter.EMPTY_STOPSET);\n        return new TokenStreamComponents(tokenizer, addCustomTokenFilter(filt));\n      }\n\n      TokenStream addCustomTokenFilter(TokenStream input) {\n        return new TokenFilter(input) {\n          final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          final TermFrequencyAttribute tfAtt = addAttribute(TermFrequencyAttribute.class);\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (input.incrementToken()) {\n              final char[] buffer = termAtt.buffer();\n              final int length = termAtt.length();\n              for (int i = 0; i < length; i++) {\n                if (buffer[i] == '|') {\n                  termAtt.setLength(i);\n                  i++;\n                  tfAtt.setTermFrequency(ArrayUtil.parseInt(buffer, i, length - i));\n                  return true;\n                }\n              }\n              return true;\n            }\n            return false;\n          }\n        };\n      }\n    };\n\n    mlt.setAnalyzer(analyzer);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n\n    final double boost10 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|10 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    final double boost1 = ((BooleanQuery) mlt.like(\"text\", new StringReader(\"lucene|1 release|1\")))\n        .clauses()\n        .stream()\n        .map(BooleanClause::getQuery)\n        .map(BoostQuery.class::cast)\n        .filter(x -> ((TermQuery) x.getQuery()).getTerm().text().equals(\"lucene\"))\n        .mapToDouble(BoostQuery::getBoost)\n        .sum();\n\n    // mlt should use the custom frequencies provided by the analyzer so \"lucene|10\" should be boosted more than \"lucene|1\"\n    assertTrue(String.format(\"%s should be grater than %s\", boost10, boost1), boost10 > boost1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3ff85fc12f4290c14ae4652270f0216b9cec578":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abfaf3712e13f45966f0d985fa11400a1fbe6678":["f3ff85fc12f4290c14ae4652270f0216b9cec578"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abfaf3712e13f45966f0d985fa11400a1fbe6678"]},"commit2Childs":{"f3ff85fc12f4290c14ae4652270f0216b9cec578":["abfaf3712e13f45966f0d985fa11400a1fbe6678"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3ff85fc12f4290c14ae4652270f0216b9cec578"],"abfaf3712e13f45966f0d985fa11400a1fbe6678":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}