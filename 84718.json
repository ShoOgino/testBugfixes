{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","commits":[{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"/dev/null","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"testquery\", DoubleValuesSource.fromQuery(new TermQuery(new Term(TEXT_FIELD, \"rechecking\"))));\n    Expression expr = JavascriptCompiler.compile(\"score + (testquery * 100)\");\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(q, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{  6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4016d158b4de63a6bee48c193507e736737121","date":1515144725,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"testquery\", DoubleValuesSource.fromQuery(new TermQuery(new Term(TEXT_FIELD, \"rechecking\"))));\n    Expression expr = JavascriptCompiler.compile(\"score + (testquery * 100)\");\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(q, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{  6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"testquery\", DoubleValuesSource.fromQuery(new TermQuery(new Term(TEXT_FIELD, \"rechecking\"))));\n    Expression expr = JavascriptCompiler.compile(\"score + (testquery * 100)\");\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(q, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{  6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa21040dd19564fdcf4d807ed15fbc5de3c74df0","date":1528970850,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 6);\n    assertTrue(expl.toString().contains(\"rechecking\"));\n    assertTrue(expl.toString().contains(\"text\"));\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","bugFix":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 6);\n    assertTrue(expl.toString().contains(\"rechecking\"));\n    assertTrue(expl.toString().contains(\"text\"));\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 6);\n    assertTrue(expl.toString().contains(\"rechecking\"));\n    assertTrue(expl.toString().contains(\"text\"));\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testCombiningMultipleQueryScores().mjava","sourceNew":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits.value, docs.totalHits.value);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 6);\n    assertTrue(expl.toString().contains(\"rechecking\"));\n    assertTrue(expl.toString().contains(\"text\"));\n  }\n\n","sourceOld":"  // BoostingQuery equivalent\n  public void testCombiningMultipleQueryScores() throws Exception {\n\n    TermQuery q = new TermQuery(new Term(TEXT_FIELD, \"text\"));\n    TopDocs plain = searcher.search(q, 1);\n\n    FunctionScoreQuery fq\n        = FunctionScoreQuery.boostByQuery(q, new TermQuery(new Term(TEXT_FIELD, \"rechecking\")), 100f);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 6, 1, 0, 2, 8 };\n    TopDocs docs = searcher.search(fq, 20);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 6);\n    assertTrue(expl.toString().contains(\"rechecking\"));\n    assertTrue(expl.toString().contains(\"text\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["62f3efc82b1ead830448bb27e2af9f89417401ea","3e4016d158b4de63a6bee48c193507e736737121"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"fa21040dd19564fdcf4d807ed15fbc5de3c74df0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"3e4016d158b4de63a6bee48c193507e736737121":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","fa21040dd19564fdcf4d807ed15fbc5de3c74df0"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fa21040dd19564fdcf4d807ed15fbc5de3c74df0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fa21040dd19564fdcf4d807ed15fbc5de3c74df0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["b94236357aaa22b76c10629851fe4e376e0cea82","3e4016d158b4de63a6bee48c193507e736737121"],"3e4016d158b4de63a6bee48c193507e736737121":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}