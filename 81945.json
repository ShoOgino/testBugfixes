{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    synchronized(indexWriter) {\n      if (!hasDeletes())\n        return false;\n  \n      final long t0 = System.currentTimeMillis();\n  \n      if (infoStream != null) {\n        message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n                +infos.size() + \" segments.\");\n      }\n  \n      final int infosEnd = infos.size();\n  \n      boolean any = false;\n      for (int i = 0; i < infosEnd; i++) {\n  \n        // Make sure we never attempt to apply deletes to\n        // segment in external dir\n        assert infos.info(i).dir == directory;\n  \n        SegmentInfo si = infos.info(i);\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n  \n      if (infoStream != null) {\n        message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n      }\n  \n      return any;\n    }\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","sourceOld":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    synchronized(indexWriter) {\n      if (!hasDeletes())\n        return false;\n  \n      final long t0 = System.currentTimeMillis();\n  \n      if (infoStream != null) {\n        message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n                +infos.size() + \" segments.\");\n      }\n  \n      final int infosEnd = infos.size();\n  \n      boolean any = false;\n      for (int i = 0; i < infosEnd; i++) {\n  \n        // Make sure we never attempt to apply deletes to\n        // segment in external dir\n        assert infos.info(i).dir == directory;\n  \n        SegmentInfo si = infos.info(i);\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n  \n      if (infoStream != null) {\n        message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n      }\n  \n      return any;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    synchronized(indexWriter) {\n      if (!hasDeletes())\n        return false;\n  \n      final long t0 = System.currentTimeMillis();\n  \n      if (infoStream != null) {\n        message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n                +infos.size() + \" segments.\");\n      }\n  \n      final int infosEnd = infos.size();\n  \n      boolean any = false;\n      for (int i = 0; i < infosEnd; i++) {\n  \n        // Make sure we never attempt to apply deletes to\n        // segment in external dir\n        assert infos.info(i).dir == directory;\n  \n        SegmentInfo si = infos.info(i);\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n  \n      if (infoStream != null) {\n        message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n      }\n  \n      return any;\n    }\n  }\n\n","sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null) {\n      message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n              +infos.size() + \" segments.\");\n    }\n\n    final int infosEnd = infos.size();\n\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == indexWriter.getDirectory();\n\n      SegmentInfo si = infos.info(i);\n      // we have to synchronize here, because we need a write lock on\n      // the segment in order to apply deletes\n      synchronized (indexWriter) {\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n    }\n\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","sourceOld":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    synchronized(indexWriter) {\n      if (!hasDeletes())\n        return false;\n  \n      final long t0 = System.currentTimeMillis();\n  \n      if (infoStream != null) {\n        message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n                +infos.size() + \" segments.\");\n      }\n  \n      final int infosEnd = infos.size();\n  \n      boolean any = false;\n      for (int i = 0; i < infosEnd; i++) {\n  \n        // Make sure we never attempt to apply deletes to\n        // segment in external dir\n        assert infos.info(i).dir == directory;\n  \n        SegmentInfo si = infos.info(i);\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n  \n      if (infoStream != null) {\n        message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n      }\n  \n      return any;\n    }\n  }\n\n","bugFix":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","8fe956d65251358d755c56f14fe8380644790e47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  synchronized boolean applyDeletes(SegmentInfos infos) throws IOException {\n\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null)\n      message(\"apply \" + deletesFlushed.numTerms + \" buffered deleted terms and \" +\n              deletesFlushed.docIDs.size() + \" deleted docIDs and \" +\n              deletesFlushed.queries.size() + \" deleted queries on \" +\n              + infos.size() + \" segments.\");\n\n    final int infosEnd = infos.size();\n\n    int docStart = 0;\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == directory;\n\n      SegmentReader reader = writer.readerPool.get(infos.info(i), false);\n      try {\n        any |= applyDeletes(reader, docStart);\n        docStart += reader.maxDoc();\n      } finally {\n        writer.readerPool.release(reader);\n      }\n    }\n\n    deletesFlushed.clear();\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis()-t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyDeletes(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  boolean applyDeletes(SegmentInfos infos) throws IOException {\n    if (!hasDeletes())\n      return false;\n\n    final long t0 = System.currentTimeMillis();\n\n    if (infoStream != null) {\n      message(\"apply \" + deletesInRAM.getNumDeletes() + \" buffered deletes on \" +\n              +infos.size() + \" segments.\");\n    }\n\n    final int infosEnd = infos.size();\n\n    boolean any = false;\n    for (int i = 0; i < infosEnd; i++) {\n\n      // Make sure we never attempt to apply deletes to\n      // segment in external dir\n      assert infos.info(i).dir == indexWriter.getDirectory();\n\n      SegmentInfo si = infos.info(i);\n      // we have to synchronize here, because we need a write lock on\n      // the segment in order to apply deletes\n      synchronized (indexWriter) {\n        SegmentReader reader = indexWriter.readerPool.get(si, false);\n        try {\n          any |= applyDeletes(reader, si.getMinSequenceID(), si.getMaxSequenceID(), null);\n        } finally {\n          indexWriter.readerPool.release(reader);\n        }\n      }\n    }\n\n    if (infoStream != null) {\n      message(\"apply deletes took \" + (System.currentTimeMillis() - t0) + \" msec\");\n    }\n\n    return any;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}