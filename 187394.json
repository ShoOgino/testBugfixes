{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","sourceNew":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","sourceOld":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e623f9a0e45508ab149c2fb3e0fd0c2503f98186","date":1295889977,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MergeState.CheckAbort#work(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","sourceNew":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","sourceOld":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MergeState.CheckAbort#work(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","sourceNew":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","sourceOld":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MergeState.CheckAbort#work(double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger.CheckAbort#work(double).mjava","sourceNew":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","sourceOld":"    /**\n     * Records the fact that roughly units amount of work\n     * have been done since this method was last called.\n     * When adding time-consuming code into SegmentMerger,\n     * you should test different values for units to ensure\n     * that the time in between calls to merge.checkAborted\n     * is up to ~ 1 second.\n     */\n    public void work(double units) throws MergePolicy.MergeAbortedException {\n      workCount += units;\n      if (workCount >= 10000.0) {\n        merge.checkAborted(dir);\n        workCount = 0;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e623f9a0e45508ab149c2fb3e0fd0c2503f98186"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e623f9a0e45508ab149c2fb3e0fd0c2503f98186":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e623f9a0e45508ab149c2fb3e0fd0c2503f98186"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e623f9a0e45508ab149c2fb3e0fd0c2503f98186"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e623f9a0e45508ab149c2fb3e0fd0c2503f98186":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e623f9a0e45508ab149c2fb3e0fd0c2503f98186","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}