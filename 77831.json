{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","commits":[{"id":"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec","date":1398363135,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","sourceNew":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","sourceOld":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","sourceNew":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","sourceOld":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/complexPhrase/TestComplexPhraseQuery#testHashcodeEquals().mjava","sourceNew":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","sourceOld":"  public void testHashcodeEquals() throws Exception {\n    ComplexPhraseQueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    qp.setInOrder(true);\n    qp.setFuzzyPrefixLength(1);\n\n    String qString = \"\\\"aaa* bbb*\\\"\";\n\n    Query q = qp.parse(qString);\n    Query q2 = qp.parse(qString);\n\n    assertEquals(q.hashCode(), q2.hashCode());\n    assertEquals(q, q2);\n\n    qp.setInOrder(false); // SOLR-6011\n\n    q2 = qp.parse(qString);\n\n    // although the general contract of hashCode can't guarantee different values, if we only change one thing\n    // about a single query, it normally should result in a different value (and will with the current\n    // implementation in ComplexPhraseQuery)\n    assertTrue(q.hashCode() != q2.hashCode());\n    assertTrue(!q.equals(q2));\n    assertTrue(!q2.equals(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c10121be7f9dc2db5f9d4adc9ee6d30c6ad5ec":["ff4227bb146f97aabae888091c19e48c88dbb0db","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}