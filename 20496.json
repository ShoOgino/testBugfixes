{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","commits":[{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testMoveMetrics().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = TestUtil.randomSimpleString(r, 1, 10);\n    String toName = TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoveMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = TestUtil.randomSimpleString(r, 1, 10);\n    String toName = TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size() + metrics2.size(), metricManager.registry(fromName).getMetrics().size());\n\n    // move metrics1\n    metricManager.moveMetrics(fromName, toName, new SolrMetricManager.PrefixFilter(\"metrics1\"));\n    // check the remaining metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    // check the moved metrics\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n\n    // move all remaining metrics\n    metricManager.moveMetrics(fromName, toName, null);\n    fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(0, fromMetrics.size());\n    toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size() + metrics2.size(), toMetrics.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testMoveMetrics().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = TestUtil.randomSimpleString(r, 1, 10);\n    String toName = TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMoveMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = TestUtil.randomSimpleString(r, 1, 10);\n    String toName = TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size() + metrics2.size(), metricManager.registry(fromName).getMetrics().size());\n\n    // move metrics1\n    metricManager.moveMetrics(fromName, toName, new SolrMetricManager.PrefixFilter(\"metrics1\"));\n    // check the remaining metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    // check the moved metrics\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n\n    // move all remaining metrics\n    metricManager.moveMetrics(fromName, toName, null);\n    fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(0, fromMetrics.size());\n    toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size() + metrics2.size(), toMetrics.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149","date":1488616286,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = TestUtil.randomSimpleString(r, 1, 10);\n    String toName = TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.registerMetric(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.registerMetric(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testSwapRegistries().mjava","sourceNew":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.registerMetric(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.registerMetric(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSwapRegistries() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics1 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    Map<String, Counter> metrics2 = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String fromName = \"from-\" + TestUtil.randomSimpleString(r, 1, 10);\n    String toName = \"to-\" + TestUtil.randomSimpleString(r, 1, 10);\n    // register test metrics\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      metricManager.register(null, fromName, entry.getValue(), false, entry.getKey(), \"metrics1\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      metricManager.register(null, toName, entry.getValue(), false, entry.getKey(), \"metrics2\");\n    }\n    assertEquals(metrics1.size(), metricManager.registry(fromName).getMetrics().size());\n    assertEquals(metrics2.size(), metricManager.registry(toName).getMetrics().size());\n\n    // swap\n    metricManager.swapRegistries(fromName, toName);\n    // check metrics\n    Map<String, Metric> fromMetrics = metricManager.registry(fromName).getMetrics();\n    assertEquals(metrics2.size(), fromMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics2.entrySet()) {\n      Object value = fromMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics2\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n    Map<String, Metric> toMetrics = metricManager.registry(toName).getMetrics();\n    assertEquals(metrics1.size(), toMetrics.size());\n    for (Map.Entry<String, Counter> entry : metrics1.entrySet()) {\n      Object value = toMetrics.get(SolrMetricManager.mkName(entry.getKey(), \"metrics1\"));\n      assertNotNull(value);\n      assertEquals(entry.getValue(), value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149"],"d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a30bfa174128ad6cb3bcf568080886729e347fe9"],"816521ebaad5add9cb96bb88c577394e2938c40b":["d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["d6d5ddeb2f0eae12a14deaf6f2bf714ddb3d6149","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a30bfa174128ad6cb3bcf568080886729e347fe9","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}