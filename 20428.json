{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testNumericFieldJumpTables().mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testNumericFieldJumpTables().mjava","pathOld":"/dev/null","sourceNew":"  // The LUCENE-8585 jump-tables enables O(1) skipping of IndexedDISI blocks, DENSE block lookup\n  // and numeric multi blocks. This test focuses on testing these jumps.\n  @Slow\n  public void testNumericFieldJumpTables() throws Exception {\n    // IndexedDISI block skipping only activated if target >= current+2, so we need at least 5 blocks to\n    // trigger consecutive block skips\n    final int maxDoc = atLeast(5*65536);\n\n    Directory dir = newDirectory();\n    IndexWriter iw = createFastIndexWriter(dir, maxDoc);\n\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    for (int i = 0 ; i < maxDoc ; i++) {\n      Document doc = new Document();\n      idField.setStringValue(Integer.toBinaryString(i));\n      doc.add(idField);\n      if (random().nextInt(100) > 10) { // Skip 10% to make DENSE blocks\n        int value = random().nextInt(100000);\n        storedField.setStringValue(Integer.toString(value));\n        doc.add(storedField);\n        dvField.setLongValue(value);\n        doc.add(dvField);\n      }\n      iw.addDocument(doc);\n    }\n    iw.flush();\n    iw.forceMerge(1, true); // Single segment to force large enough structures\n    iw.commit();\n    iw.close();\n\n    assertDVIterate(dir);\n    assertDVAdvance(dir, rarely() ? 1 : 7); // 1 is heavy (~20 s), so we do it rarely. 7 is a lot faster (8 s)\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testNumericFieldJumpTables().mjava","pathOld":"/dev/null","sourceNew":"  // The LUCENE-8585 jump-tables enables O(1) skipping of IndexedDISI blocks, DENSE block lookup\n  // and numeric multi blocks. This test focuses on testing these jumps.\n  @Slow\n  public void testNumericFieldJumpTables() throws Exception {\n    // IndexedDISI block skipping only activated if target >= current+2, so we need at least 5 blocks to\n    // trigger consecutive block skips\n    final int maxDoc = atLeast(5*65536);\n\n    Directory dir = newDirectory();\n    IndexWriter iw = createFastIndexWriter(dir, maxDoc);\n\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    for (int i = 0 ; i < maxDoc ; i++) {\n      Document doc = new Document();\n      idField.setStringValue(Integer.toBinaryString(i));\n      doc.add(idField);\n      if (random().nextInt(100) > 10) { // Skip 10% to make DENSE blocks\n        int value = random().nextInt(100000);\n        storedField.setStringValue(Integer.toString(value));\n        doc.add(storedField);\n        dvField.setLongValue(value);\n        doc.add(dvField);\n      }\n      iw.addDocument(doc);\n    }\n    iw.flush();\n    iw.forceMerge(1, true); // Single segment to force large enough structures\n    iw.commit();\n    iw.close();\n\n    assertDVIterate(dir);\n    assertDVAdvance(dir, rarely() ? 1 : 7); // 1 is heavy (~20 s), so we do it rarely. 7 is a lot faster (8 s)\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testNumericFieldJumpTables().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testNumericFieldJumpTables().mjava","sourceNew":"  // The LUCENE-8585 jump-tables enables O(1) skipping of IndexedDISI blocks, DENSE block lookup\n  // and numeric multi blocks. This test focuses on testing these jumps.\n  @Nightly\n  public void testNumericFieldJumpTables() throws Exception {\n    // IndexedDISI block skipping only activated if target >= current+2, so we need at least 5 blocks to\n    // trigger consecutive block skips\n    final int maxDoc = atLeast(5*65536);\n\n    Directory dir = newDirectory();\n    IndexWriter iw = createFastIndexWriter(dir, maxDoc);\n\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    for (int i = 0 ; i < maxDoc ; i++) {\n      Document doc = new Document();\n      idField.setStringValue(Integer.toBinaryString(i));\n      doc.add(idField);\n      if (random().nextInt(100) > 10) { // Skip 10% to make DENSE blocks\n        int value = random().nextInt(100000);\n        storedField.setStringValue(Integer.toString(value));\n        doc.add(storedField);\n        dvField.setLongValue(value);\n        doc.add(dvField);\n      }\n      iw.addDocument(doc);\n    }\n    iw.flush();\n    iw.forceMerge(1, true); // Single segment to force large enough structures\n    iw.commit();\n    iw.close();\n\n    assertDVIterate(dir);\n    assertDVAdvance(dir, rarely() ? 1 : 7); // 1 is heavy (~20 s), so we do it rarely. 7 is a lot faster (8 s)\n\n    dir.close();\n  }\n\n","sourceOld":"  // The LUCENE-8585 jump-tables enables O(1) skipping of IndexedDISI blocks, DENSE block lookup\n  // and numeric multi blocks. This test focuses on testing these jumps.\n  @Slow\n  public void testNumericFieldJumpTables() throws Exception {\n    // IndexedDISI block skipping only activated if target >= current+2, so we need at least 5 blocks to\n    // trigger consecutive block skips\n    final int maxDoc = atLeast(5*65536);\n\n    Directory dir = newDirectory();\n    IndexWriter iw = createFastIndexWriter(dir, maxDoc);\n\n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    Field storedField = newStringField(\"stored\", \"\", Field.Store.YES);\n    Field dvField = new NumericDocValuesField(\"dv\", 0);\n\n    for (int i = 0 ; i < maxDoc ; i++) {\n      Document doc = new Document();\n      idField.setStringValue(Integer.toBinaryString(i));\n      doc.add(idField);\n      if (random().nextInt(100) > 10) { // Skip 10% to make DENSE blocks\n        int value = random().nextInt(100000);\n        storedField.setStringValue(Integer.toString(value));\n        doc.add(storedField);\n        dvField.setLongValue(value);\n        doc.add(dvField);\n      }\n      iw.addDocument(doc);\n    }\n    iw.flush();\n    iw.forceMerge(1, true); // Single segment to force large enough structures\n    iw.commit();\n    iw.close();\n\n    assertDVIterate(dir);\n    assertDVAdvance(dir, rarely() ? 1 : 7); // 1 is heavy (~20 s), so we do it rarely. 7 is a lot faster (8 s)\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["03e17b020972a0d6e8d6823f545571a66646a167"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}