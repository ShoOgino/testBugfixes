{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final InvertedFields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final InvertedFields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ed55563ddbb365606dd561360472978ec2115f","date":1335981033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (termInstances == 0) {\n      return null;\n    }\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28dbdccfa460fb41c33b6d23411572298d589b99","date":1399839432,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds#getOrdTermsEnum(AtomicReader).mjava","sourceNew":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","sourceOld":"  /** Returns a TermsEnum that implements ord.  If the\n   *  provided reader supports ord, we just return its\n   *  TermsEnum; if it does not, we build a \"private\" terms\n   *  index internally (WARNING: consumes RAM) and use that\n   *  index to implement ord.  This also enables ord on top\n   *  of a composite reader.  The returned TermsEnum is\n   *  unpositioned.  This returns null if there are no terms.\n   *\n   *  <p><b>NOTE</b>: you must pass the same reader that was\n   *  used when creating this class */\n  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {\n    if (indexedTermsArray == null) {\n      //System.out.println(\"GET normal enum\");\n      final Fields fields = reader.fields();\n      if (fields == null) {\n        return null;\n      }\n      final Terms terms = fields.terms(field);\n      if (terms == null) {\n        return null;\n      } else {\n        return terms.iterator(null);\n      }\n    } else {\n      //System.out.println(\"GET wrapped enum ordBase=\" + ordBase);\n      return new OrdWrappedTermsEnum(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28dbdccfa460fb41c33b6d23411572298d589b99":["e6ed55563ddbb365606dd561360472978ec2115f"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["e6ed55563ddbb365606dd561360472978ec2115f","28dbdccfa460fb41c33b6d23411572298d589b99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6ed55563ddbb365606dd561360472978ec2115f":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["e6ed55563ddbb365606dd561360472978ec2115f","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"28dbdccfa460fb41c33b6d23411572298d589b99":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"e6ed55563ddbb365606dd561360472978ec2115f":["28dbdccfa460fb41c33b6d23411572298d589b99","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["e6ed55563ddbb365606dd561360472978ec2115f"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}