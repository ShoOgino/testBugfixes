{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","commits":[{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fe21c514098be354a174a3bd1f657d6a2c28060","date":1231032556,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * <p><b>NOTE</b>: autoCommit (see <a\n   * href=\"#autoCommit\">above</a>) is set to false with this\n   * constructor.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, false, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31).setAnalyzer(a)\n        .setOpenMode(OpenMode.APPEND).setMaxFieldLength(mfl.getLimit())\n        .setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31).setAnalyzer(a)\n        .setOpenMode(OpenMode.APPEND).setMaxFieldLength(mfl.getLimit())\n        .setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a)\n        .setOpenMode(OpenMode.APPEND).setMaxFieldLength(mfl.getLimit())\n        .setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a)\n        .setOpenMode(OpenMode.APPEND).setMaxFieldLength(mfl.getLimit())\n        .setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   *  @deprecated use {@link #IndexWriter(Directory, IndexWriterConfig)} instead\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    this(d, new IndexWriterConfig(Version.LUCENE_31, a)\n        .setOpenMode(OpenMode.APPEND).setMaxFieldLength(mfl.getLimit())\n        .setIndexDeletionPolicy(deletionPolicy).setIndexCommit(commit));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["4fe21c514098be354a174a3bd1f657d6a2c28060"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"4fe21c514098be354a174a3bd1f657d6a2c28060":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4fe21c514098be354a174a3bd1f657d6a2c28060":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["4fe21c514098be354a174a3bd1f657d6a2c28060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}