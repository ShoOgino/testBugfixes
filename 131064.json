{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"    public void test1() throws IOException {\n        ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(ir1);\n        pr.add(ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a","date":1329841033,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    FieldsEnum fe = pr.fields().iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fe.terms(), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertNull(fe.next());\n  }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    FieldsEnum fe = pr.fields().iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fe.terms(), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertNull(fe.next());\n  }\n\n","sourceOld":"    public void test1() throws IOException {\n        ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n        Bits liveDocs = pr.getLiveDocs();\n\n        FieldsEnum fe = pr.fields().iterator();\n\n        String f = fe.next();\n        assertEquals(\"field0\", f);\n        f = fe.next();\n        assertEquals(\"field1\", f);\n\n        Terms terms = fe.terms();\n        TermsEnum te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        DocsEnum td = _TestUtil.docs(random, te, liveDocs, null, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field2\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"brown\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"quick\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n        f = fe.next();\n        assertEquals(\"field3\", f);\n        terms = fe.terms();\n        assertNotNull(terms);\n        te = terms.iterator(null);\n\n        assertEquals(\"dog\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"fox\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"jumps\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"lazy\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"over\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertEquals(\"the\", te.next().utf8ToString());\n        td = _TestUtil.docs(random, te, liveDocs, td, false);\n        assertTrue(td.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(0, td.docID());\n        assertEquals(td.nextDoc(), DocsEnum.NO_MORE_DOCS);\n\n        assertNull(te.next());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    FieldsEnum fe = pr.fields().iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fe.terms(), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertNull(fe.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    FieldsEnum fe = pr.fields().iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fe.terms(), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertNull(fe.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    FieldsEnum fe = pr.fields().iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fe.terms(), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fe.terms(), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertNull(fe.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Bits liveDocs = pr.getLiveDocs();\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), liveDocs, \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), liveDocs, \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    assertEquals(3, pr.getFieldInfos().size());\n\n    checkTerms(pr.terms(\"field1\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field2\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field3\"), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    assertEquals(3, pr.getFieldInfos().size());\n\n    checkTerms(pr.terms(\"field1\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field2\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field3\"), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelTermEnum#test1().mjava","sourceNew":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    assertEquals(3, pr.getFieldInfos().size());\n\n    checkTerms(pr.terms(\"field1\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field2\"), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n    checkTerms(pr.terms(\"field3\"), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n  }\n\n","sourceOld":"  public void test1() throws IOException {\n    ParallelLeafReader pr = new ParallelLeafReader(ir1, ir2);\n\n    Fields fields = pr.fields();\n    Iterator<String> fe = fields.iterator();\n\n    String f = fe.next();\n    assertEquals(\"field1\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field2\", f);\n    checkTerms(fields.terms(f), \"brown\", \"fox\", \"jumps\", \"quick\", \"the\");\n\n    f = fe.next();\n    assertEquals(\"field3\", f);\n    checkTerms(fields.terms(f), \"dog\", \"fox\", \"jumps\", \"lazy\", \"over\", \"the\");\n\n    assertFalse(fe.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6e09a3a223be07d75777515a717312813221fe58","d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"6e09a3a223be07d75777515a717312813221fe58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f4464508ee83288c8c4585b533f9faaa93aa314","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["6e09a3a223be07d75777515a717312813221fe58"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0f4464508ee83288c8c4585b533f9faaa93aa314","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d85ecdb6c60e4c2edb5455f39169bb2c4550c99a","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e09a3a223be07d75777515a717312813221fe58"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["19275ba31e621f6da1b83bf13af75233876fd3d4","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6e09a3a223be07d75777515a717312813221fe58":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d85ecdb6c60e4c2edb5455f39169bb2c4550c99a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d85ecdb6c60e4c2edb5455f39169bb2c4550c99a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fb07ab105350b80ed9d63ca64b117084ed7391bc","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}