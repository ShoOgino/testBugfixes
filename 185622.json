{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"q\", \"dummy\", \"indent\",\"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"q\", \"dummy\", \"indent\",\"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"q\", \"dummy\", \"indent\",\"off\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}