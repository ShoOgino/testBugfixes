{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/TermBytes#computeMdpLength(BytesRef,BytesRef).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/TermBytes#computeMdpLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes the length of the minimal distinguishing prefix (MDP) between\n   * a current term and its previous term (terms are alphabetically sorted).\n   * <p>\n   * Example: If previous=\"car\" and current=\"cartridge\", then MDP length is\n   * 4. It is the length of the minimal prefix distinguishing \"cartridge\" from\n   * \"car\", that is, the length of \"cart\".\n   *\n   * @see TermBytes\n   */\n  public static int computeMdpLength(BytesRef previousTerm, BytesRef currentTerm) {\n    int mdpLength = previousTerm == null ? 1 : StringHelper.sortKeyLength(previousTerm, currentTerm);\n    return Math.min(mdpLength, currentTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}