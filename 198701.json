{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","commits":[{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","sourceNew":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName(), DistributedUpdateProcessor.MAX_RETRIES_ON_FORWARD_DEAULT);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName());\n  }\n\n","bugFix":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#getLeaderNode(String,Slice).mjava","sourceNew":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName(), DistributedUpdateProcessor.MAX_RETRIES_ON_FORWARD_DEAULT);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node getLeaderNode(String collection, Slice slice) {\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.ForwardNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, slice.getName(), DistributedUpdateProcessor.MAX_RETRIES_ON_FORWARD_DEAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}