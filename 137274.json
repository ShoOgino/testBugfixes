{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","sourceNew":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata\n        .makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata\n        .makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","sourceNew":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata.makeEmptyLight());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata\n        .makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","sourceNew":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), Automata.makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata.makeEmptyLight());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","sourceNew":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), Automata.makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), BasicAutomata\n        .makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEmptyOptimization().mjava","sourceNew":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), Automata.makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","sourceOld":"  /**\n   * Test handling of the empty language\n   */\n  public void testEmptyOptimization() throws IOException {\n    AutomatonQuery aq = new AutomatonQuery(newTerm(\"bogus\"), Automata.makeEmpty());\n    // not yet available: assertTrue(aq.getEnum(searcher.getIndexReader())\n    // instanceof EmptyTermEnum);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), FN);\n    assertSame(TermsEnum.EMPTY, aq.getTermsEnum(terms));\n    assertEquals(0, automatonQueryNrHits(aq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}