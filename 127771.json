{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockDirectoryWrapper.Failure).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockDirectoryWrapper.Failure failure) throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n      .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testSingleThreadFailure(MockRAMDirectory.Failure).mjava","sourceNew":null,"sourceOld":"  // Runs test, with one thread, using the specific failure\n  // to trigger an IOException\n  public void _testSingleThreadFailure(MockRAMDirectory.Failure failure) throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n    for(int i=0;i<6;i++)\n      writer.addDocument(doc);\n\n    dir.failOn(failure);\n    failure.setDoFail();\n    try {\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      writer.commit();\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n    }\n    failure.clearDoFail();\n    writer.addDocument(doc);\n    writer.close(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a05409176bd65129d67a785ee70e881e238a9aef"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}