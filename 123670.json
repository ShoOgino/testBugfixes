{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, acceptDocs, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n\n          collector.reset();\n          candidate.collect(collector);\n          Collection<byte[]> collected = collector.getPayloads();\n\n          if (match instanceof SpanNearQuery) {\n            return checkCompositePayloads(collected);\n          }\n          else {\n            return checkOrderedPayloads(collected);\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3","date":1434444713,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, acceptDocs, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, acceptDocs, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n\n          collector.reset();\n          candidate.collect(collector);\n          Collection<byte[]> collected = collector.getPayloads();\n\n          if (match instanceof SpanNearQuery) {\n            return checkCompositePayloads(collected);\n          }\n          else {\n            return checkOrderedPayloads(collected);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.SpanPayloadCheckWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n      final PayloadSpanCollector collector = new PayloadSpanCollector();\n      Spans matchSpans = matchWeight.getSpans(context, acceptDocs, requiredPostings.atLeast(Postings.PAYLOADS));\n      return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          collector.reset();\n          candidate.collect(collector);\n          return checkPayloads(collector.getPayloads());\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["29aea3139c4326c0501d75d51059855463220279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3"],"b649647f7eb503bd662a5cdc7736a2cf2b2fb4a3":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}