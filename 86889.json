{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"foo\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"0.34\".toCharArray());\n    });\n\n    int test = ArrayUtil.parseInt(\"1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = ArrayUtil.parseInt(\"1923\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = ArrayUtil.parseInt(\"-1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    int test;\n    try {\n      test = ArrayUtil.parseInt(\"\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"foo\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n    try {\n      test = ArrayUtil.parseInt(\"0.34\".toCharArray());\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n      //expected\n    }\n\n    try {\n      test = ArrayUtil.parseInt(\"1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1, test == 1);\n      test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n      test = ArrayUtil.parseInt(\"1923\".toCharArray());\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n      test = ArrayUtil.parseInt(\"-1\".toCharArray());\n      assertTrue(test + \" does not equal: \" + -1, test == -1);\n      test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n      assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    } catch (NumberFormatException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":["7d17e89cf704a29ea5d627f86a66bb0ad595ee2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"foo\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(String.valueOf(Long.MAX_VALUE));\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"0.34\");\n    });\n\n    int test = parseInt(\"1\");\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = parseInt(\"-10000\");\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = parseInt(\"1923\");\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = parseInt(\"-1\");\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"foo\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"0.34\".toCharArray());\n    });\n\n    int test = ArrayUtil.parseInt(\"1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = ArrayUtil.parseInt(\"1923\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = ArrayUtil.parseInt(\"-1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"foo\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(String.valueOf(Long.MAX_VALUE));\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"0.34\");\n    });\n\n    int test = parseInt(\"1\");\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = parseInt(\"-10000\");\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = parseInt(\"1923\");\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = parseInt(\"-1\");\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"foo\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"0.34\".toCharArray());\n    });\n\n    int test = ArrayUtil.parseInt(\"1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = ArrayUtil.parseInt(\"1923\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = ArrayUtil.parseInt(\"-1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"foo\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(String.valueOf(Long.MAX_VALUE));\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"0.34\");\n    });\n\n    int test = parseInt(\"1\");\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = parseInt(\"-10000\");\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = parseInt(\"1923\");\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = parseInt(\"-1\");\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"foo\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"0.34\".toCharArray());\n    });\n\n    int test = ArrayUtil.parseInt(\"1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = ArrayUtil.parseInt(\"1923\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = ArrayUtil.parseInt(\"-1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testParseInt().mjava","sourceNew":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"foo\");\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(String.valueOf(Long.MAX_VALUE));\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      parseInt(\"0.34\");\n    });\n\n    int test = parseInt(\"1\");\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = parseInt(\"-10000\");\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = parseInt(\"1923\");\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = parseInt(\"-1\");\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","sourceOld":"  public void testParseInt() throws Exception {\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"foo\".toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(String.valueOf(Long.MAX_VALUE).toCharArray());\n    });\n\n    expectThrows(NumberFormatException.class, () -> {\n      ArrayUtil.parseInt(\"0.34\".toCharArray());\n    });\n\n    int test = ArrayUtil.parseInt(\"1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1, test == 1);\n    test = ArrayUtil.parseInt(\"-10000\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -10000, test == -10000);\n    test = ArrayUtil.parseInt(\"1923\".toCharArray());\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n    test = ArrayUtil.parseInt(\"-1\".toCharArray());\n    assertTrue(test + \" does not equal: \" + -1, test == -1);\n    test = ArrayUtil.parseInt(\"foo 1923 bar\".toCharArray(), 4, 4);\n    assertTrue(test + \" does not equal: \" + 1923, test == 1923);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["05fe562aa248790944d43cdd478f512572835ba0"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["05fe562aa248790944d43cdd478f512572835ba0","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83870855d82aba6819217abeff5a40779dbb28b4":["05fe562aa248790944d43cdd478f512572835ba0","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}