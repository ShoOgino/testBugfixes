{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"/dev/null","sourceNew":"    // main entry point\r\n    void print(String path) throws IOException\r\n    {\r\n      if (zkClient == null) {\r\n        return;\r\n      }\r\n  \r\n      // normalize path\r\n      if (path == null) {\r\n        path = \"/\";\r\n      }\r\n      else {\r\n        path.trim();\r\n        if (path.length() == 0)\r\n        {\r\n          path = \"/\";\r\n        }\r\n      }\r\n      \r\n      if (path.endsWith(\"/\") && path.length() > 1)\r\n      {\r\n        path = path.substring(0, path.length() - 1);\r\n      }\r\n  \r\n      int idx = path.lastIndexOf('/');\r\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\r\n      if (parent.length() == 0)\r\n      {\r\n        parent = \"/\";\r\n      }\r\n  \r\n      out.println(\"{\");\r\n  \r\n      if (detail)\r\n      {\r\n        printZnode(path);\r\n        out.println(\", \");\r\n      }\r\n  \r\n      out.println(\"\\\"tree\\\" : [\");\r\n      printTree(path);\r\n      out.println(\"]\");\r\n  \r\n      out.println(\"}\");\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\r\n    void print(String path) throws IOException {\r\n      if (zkClient == null) {\r\n        return;\r\n      }\r\n\r\n      // normalize path\r\n      if (path == null) {\r\n        path = \"/\";\r\n      } else {\r\n        path.trim();\r\n        if (path.length() == 0) {\r\n          path = \"/\";\r\n        }\r\n      }\r\n\r\n      if (path.endsWith(\"/\") && path.length() > 1) {\r\n        path = path.substring(0, path.length() - 1);\r\n      }\r\n\r\n      int idx = path.lastIndexOf('/');\r\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\r\n      if (parent.length() == 0) {\r\n        parent = \"/\";\r\n      }\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter json = new JSONWriter(chars, 2);\r\n      json.startObject();\r\n\r\n      if (detail) {\r\n        if (!printZnode(json, path)) {\r\n          return;\r\n        }\r\n        json.writeValueSeparator();\r\n      }\r\n\r\n      json.writeString(\"tree\");\r\n      json.writeNameSeparator();\r\n      json.startArray();\r\n      if (!printTree(json, path)) {\r\n        return; // there was an error\r\n      }\r\n      json.endArray();\r\n      json.endObject();\r\n      out.println(chars.toString());\r\n    }\r\n\n","sourceOld":"    // main entry point\r\n    void print(String path) throws IOException\r\n    {\r\n      if (zkClient == null) {\r\n        return;\r\n      }\r\n  \r\n      // normalize path\r\n      if (path == null) {\r\n        path = \"/\";\r\n      }\r\n      else {\r\n        path.trim();\r\n        if (path.length() == 0)\r\n        {\r\n          path = \"/\";\r\n        }\r\n      }\r\n      \r\n      if (path.endsWith(\"/\") && path.length() > 1)\r\n      {\r\n        path = path.substring(0, path.length() - 1);\r\n      }\r\n  \r\n      int idx = path.lastIndexOf('/');\r\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\r\n      if (parent.length() == 0)\r\n      {\r\n        parent = \"/\";\r\n      }\r\n  \r\n      out.println(\"{\");\r\n  \r\n      if (detail)\r\n      {\r\n        printZnode(path);\r\n        out.println(\", \");\r\n      }\r\n  \r\n      out.println(\"\\\"tree\\\" : [\");\r\n      printTree(path);\r\n      out.println(\"]\");\r\n  \r\n      out.println(\"}\");\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"/dev/null","sourceNew":"    // main entry point\r\n    void print(String path) throws IOException {\r\n      if (zkClient == null) {\r\n        return;\r\n      }\r\n\r\n      // normalize path\r\n      if (path == null) {\r\n        path = \"/\";\r\n      } else {\r\n        path.trim();\r\n        if (path.length() == 0) {\r\n          path = \"/\";\r\n        }\r\n      }\r\n\r\n      if (path.endsWith(\"/\") && path.length() > 1) {\r\n        path = path.substring(0, path.length() - 1);\r\n      }\r\n\r\n      int idx = path.lastIndexOf('/');\r\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\r\n      if (parent.length() == 0) {\r\n        parent = \"/\";\r\n      }\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter json = new JSONWriter(chars, 2);\r\n      json.startObject();\r\n\r\n      if (detail) {\r\n        if (!printZnode(json, path)) {\r\n          return;\r\n        }\r\n        json.writeValueSeparator();\r\n      }\r\n\r\n      json.writeString(\"tree\");\r\n      json.writeNameSeparator();\r\n      json.startArray();\r\n      if (!printTree(json, path)) {\r\n        return; // there was an error\r\n      }\r\n      json.endArray();\r\n      json.endObject();\r\n      out.println(chars.toString());\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.println(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\r\n    void print(String path) throws IOException {\r\n      if (zkClient == null) {\r\n        return;\r\n      }\r\n\r\n      // normalize path\r\n      if (path == null) {\r\n        path = \"/\";\r\n      } else {\r\n        path.trim();\r\n        if (path.length() == 0) {\r\n          path = \"/\";\r\n        }\r\n      }\r\n\r\n      if (path.endsWith(\"/\") && path.length() > 1) {\r\n        path = path.substring(0, path.length() - 1);\r\n      }\r\n\r\n      int idx = path.lastIndexOf('/');\r\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\r\n      if (parent.length() == 0) {\r\n        parent = \"/\";\r\n      }\r\n\r\n      CharArr chars = new CharArr();\r\n      JSONWriter json = new JSONWriter(chars, 2);\r\n      json.startObject();\r\n\r\n      if (detail) {\r\n        if (!printZnode(json, path)) {\r\n          return;\r\n        }\r\n        json.writeValueSeparator();\r\n      }\r\n\r\n      json.writeString(\"tree\");\r\n      json.writeNameSeparator();\r\n      json.startArray();\r\n      if (!printTree(json, path)) {\r\n        return; // there was an error\r\n      }\r\n      json.endArray();\r\n      json.endObject();\r\n      out.println(chars.toString());\r\n    }\r\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.println(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.println(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed50f3a078906ca255e2b84cf0d368ee84911b9","date":1394305524,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path, boolean all) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path,all)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String,boolean).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path, boolean all) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path,all)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#print(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#print(String).mjava","sourceNew":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","sourceOld":"    // main entry point\n    void print(String path) throws IOException {\n      if (zkClient == null) {\n        return;\n      }\n\n      // normalize path\n      if (path == null) {\n        path = \"/\";\n      } else {\n        path = path.trim();\n        if (path.length() == 0) {\n          path = \"/\";\n        }\n      }\n\n      if (path.endsWith(\"/\") && path.length() > 1) {\n        path = path.substring(0, path.length() - 1);\n      }\n\n      int idx = path.lastIndexOf('/');\n      String parent = idx >= 0 ? path.substring(0, idx) : path;\n      if (parent.length() == 0) {\n        parent = \"/\";\n      }\n\n      CharArr chars = new CharArr();\n      JSONWriter json = new JSONWriter(chars, 2);\n      json.startObject();\n\n      if (detail) {\n        if (!printZnode(json, path)) {\n          return;\n        }\n        json.writeValueSeparator();\n      }\n\n      json.writeString(\"tree\");\n      json.writeNameSeparator();\n      json.startArray();\n      if (!printTree(json, path)) {\n        return; // there was an error\n      }\n      json.endArray();\n      json.endObject();\n      out.write(chars.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["c7d0565444d6381434fbff66cecf07da249f2bb4","0ed50f3a078906ca255e2b84cf0d368ee84911b9"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"0ed50f3a078906ca255e2b84cf0d368ee84911b9":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["0ed50f3a078906ca255e2b84cf0d368ee84911b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","0ed50f3a078906ca255e2b84cf0d368ee84911b9"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"0ed50f3a078906ca255e2b84cf0d368ee84911b9":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}