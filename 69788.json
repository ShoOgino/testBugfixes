{"path":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","pathOld":"/dev/null","sourceNew":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          if (line.contains(\"QTime=\")) {\n            return parseQueryRecord(line);\n          } else if (line.contains(\"Registered new searcher\")) {\n            return parseNewSearch(line);\n          } else if (line.contains(\"path=/update\")) {\n            return parseUpdate(line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            return parseError(line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            return parseCommit(line);\n          } else {\n            continue;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","pathOld":"/dev/null","sourceNew":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          if (line.contains(\"QTime=\")) {\n            return parseQueryRecord(line);\n          } else if (line.contains(\"Registered new searcher\")) {\n            return parseNewSearch(line);\n          } else if (line.contains(\"path=/update\")) {\n            return parseUpdate(line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            return parseError(line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            return parseCommit(line);\n          } else {\n            continue;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d88c78a6e027961754c0e6eb0b3690771ecb8f0","date":1579192571,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","sourceNew":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          if (line.contains(\"Registered new searcher\")) {\n            return parseNewSearch(line);\n          } else if (line.contains(\"path=/update\")) {\n            return parseUpdate(line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            return parseError(line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            return parseCommit(line);\n          } else if(line.contains(\"QTime=\")) {\n            return parseQueryRecord(line);\n          } else {\n            continue;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          if (line.contains(\"QTime=\")) {\n            return parseQueryRecord(line);\n          } else if (line.contains(\"Registered new searcher\")) {\n            return parseNewSearch(line);\n          } else if (line.contains(\"path=/update\")) {\n            return parseUpdate(line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            return parseError(line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            return parseCommit(line);\n          } else {\n            continue;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f07b50374365285458b916c56586bd62bf3905d","date":1592310084,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogPostTool.LogRecordReader#readRecord().mjava","sourceNew":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          SolrInputDocument lineDoc = new SolrInputDocument();\n          lineDoc.setField(\"date_dt\", parseDate(line));\n          lineDoc.setField(\"line_t\", line);\n          lineDoc.setField(\"type_s\", \"other\"); // Overridden by known types below\n\n          if (line.contains(\"Registered new searcher\")) {\n            parseNewSearch(lineDoc, line);\n          } else if (line.contains(\"path=/update\")) {\n            parseUpdate(lineDoc, line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            parseError(lineDoc, line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            parseCommit(lineDoc, line);\n          } else if(line.contains(\"QTime=\")) {\n            parseQueryRecord(lineDoc, line);\n          }\n\n          return lineDoc;\n        } else {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    public SolrInputDocument readRecord() throws IOException {\n      while(true) {\n        String line = null;\n\n        if(finished) {\n          return null;\n        }\n\n        if(pushedBack != null) {\n          line = pushedBack;\n          pushedBack = null;\n        } else {\n          line = bufferedReader.readLine();\n        }\n\n        if (line != null) {\n          if (line.contains(\"Registered new searcher\")) {\n            return parseNewSearch(line);\n          } else if (line.contains(\"path=/update\")) {\n            return parseUpdate(line);\n          } else if (line.contains(\" ERROR \")) {\n            this.cause = null;\n            return parseError(line, readTrace());\n          } else if (line.contains(\"start commit\")) {\n            return parseCommit(line);\n          } else if(line.contains(\"QTime=\")) {\n            return parseQueryRecord(line);\n          } else {\n            continue;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f07b50374365285458b916c56586bd62bf3905d":["4d88c78a6e027961754c0e6eb0b3690771ecb8f0"],"4d88c78a6e027961754c0e6eb0b3690771ecb8f0":["2e38054de362483189e0fdd850b779ed766aa7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e38054de362483189e0fdd850b779ed766aa7aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f07b50374365285458b916c56586bd62bf3905d"]},"commit2Childs":{"1f07b50374365285458b916c56586bd62bf3905d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d88c78a6e027961754c0e6eb0b3690771ecb8f0":["1f07b50374365285458b916c56586bd62bf3905d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["4d88c78a6e027961754c0e6eb0b3690771ecb8f0","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}