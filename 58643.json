{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++) {\n        decRef((List) lastFiles.get(i));\n      }\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++) {\n        decRef((List) lastFiles.get(i));\n      }\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++) {\n        decRef((List) lastFiles.get(i));\n      }\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n    if (docWriter != null)\n      incRef(docWriter.files());\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++)\n        decRef((List) lastFiles.get(i));\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriter != null)\n        lastFiles.add(docWriter.files());\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++) {\n        decRef((List) lastFiles.get(i));\n      }\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n    final List docWriterFiles;\n    if (docWriter != null) {\n      docWriterFiles = docWriter.files();\n      if (docWriterFiles != null)\n        incRef(docWriterFiles);\n    } else\n      docWriterFiles = null;\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++)\n        decRef((List) lastFiles.get(i));\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n    if (docWriterFiles != null)\n      lastFiles.add(docWriterFiles);\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    if (deletable != null) {\n      List oldDeletable = deletable;\n      deletable = null;\n      int size = oldDeletable.size();\n      for(int i=0;i<size;i++) {\n        deleteFile((String) oldDeletable.get(i));\n      }\n    }\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n    if (docWriter != null)\n      incRef(docWriter.files());\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++)\n        decRef((List) lastFiles.get(i));\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriter != null)\n        lastFiles.add(docWriter.files());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.files();\n        if (docWriterFiles != null)\n          // We must incRef thes files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n    final List docWriterFiles;\n    if (docWriter != null) {\n      docWriterFiles = docWriter.files();\n      if (docWriterFiles != null)\n        incRef(docWriterFiles);\n    } else\n      docWriterFiles = null;\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    }\n\n    // DecRef old files from the last checkpoint, if any:\n    int size = lastFiles.size();\n    if (size > 0) {\n      for(int i=0;i<size;i++)\n        decRef((List) lastFiles.get(i));\n      lastFiles.clear();\n    }\n\n    if (!isCommit) {\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n    }\n    if (docWriterFiles != null)\n      lastFiles.add(docWriterFiles);\n  }\n\n","bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.files();\n        if (docWriterFiles != null)\n          // We must incRef thes files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.files();\n        if (docWriterFiles != null)\n          // We must incRef thes files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.files();\n        if (docWriterFiles != null)\n          // We must incRef thes files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((Collection) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((List) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      size = segmentInfos.size();\n      for(int i=0;i<size;i++) {\n        SegmentInfo segmentInfo = segmentInfos.info(i);\n        if (segmentInfo.dir == directory) {\n          lastFiles.add(segmentInfo.files());\n        }\n      }\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef((Collection) lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#checkpoint(SegmentInfos,boolean).mjava","sourceNew":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","sourceOld":"  /**\n   * For definition of \"check point\" see IndexWriter comments:\n   * \"Clarification: Check Points (and commits)\".\n   * \n   * Writer calls this when it has made a \"consistent\n   * change\" to the index, meaning new files are written to\n   * the index and the in-memory SegmentInfos have been\n   * modified to point to those files.\n   *\n   * This may or may not be a commit (segments_N may or may\n   * not have been written).\n   *\n   * We simply incref the files referenced by the new\n   * SegmentInfos and decref the files we had previously\n   * seen (if any).\n   *\n   * If this is a commit, we also call the policy to give it\n   * a chance to remove other commits.  If any commits are\n   * removed, we decref their files as well.\n   */\n  public void checkpoint(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n\n    if (infoStream != null) {\n      message(\"now checkpoint \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\" [\" + segmentInfos.size() + \" segments \" + \"; isCommit = \" + isCommit + \"]\");\n    }\n\n    // Try again now to delete any previously un-deletable\n    // files (because they were in use, on Windows):\n    deletePendingFiles();\n\n    // Incref the files:\n    incRef(segmentInfos, isCommit);\n\n    if (isCommit) {\n      // Append to our commits list:\n      commits.add(new CommitPoint(commitsToDelete, directory, segmentInfos));\n\n      // Tell policy so it can remove commits:\n      policy.onCommit(commits);\n\n      // Decref files for commits that were deleted by the policy:\n      deleteCommits();\n    } else {\n\n      final List<String> docWriterFiles;\n      if (docWriter != null) {\n        docWriterFiles = docWriter.openFiles();\n        if (docWriterFiles != null)\n          // We must incRef these files before decRef'ing\n          // last files to make sure we don't accidentally\n          // delete them:\n          incRef(docWriterFiles);\n      } else\n        docWriterFiles = null;\n\n      // DecRef old files from the last checkpoint, if any:\n      int size = lastFiles.size();\n      if (size > 0) {\n        for(int i=0;i<size;i++)\n          decRef(lastFiles.get(i));\n        lastFiles.clear();\n      }\n\n      // Save files so we can decr on next checkpoint/commit:\n      lastFiles.add(segmentInfos.files(directory, false));\n\n      if (docWriterFiles != null)\n        lastFiles.add(docWriterFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["e82780afe6097066eb5befb86e9432f077667e3d"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"0f44610301174bfb430443d89a88dc1c502feea1":["5350389bf83287111f7760b9e3db3af8e3648474"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8b6187898fc4413ccd18229711786550a280383c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0f44610301174bfb430443d89a88dc1c502feea1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["5350389bf83287111f7760b9e3db3af8e3648474"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["e82780afe6097066eb5befb86e9432f077667e3d"],"0f44610301174bfb430443d89a88dc1c502feea1":["ef82ff03e4016c705811b2658e81471a645c0e49"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"e82780afe6097066eb5befb86e9432f077667e3d":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"8b6187898fc4413ccd18229711786550a280383c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"5350389bf83287111f7760b9e3db3af8e3648474":["0f44610301174bfb430443d89a88dc1c502feea1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}