{"path":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    MockRAMDirectory dirA = new MockRAMDirectory();\n    MockRAMDirectory dirB = new MockRAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    dirA = newDirectory(random);\n    dirB = newDirectory(random);\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    MockRAMDirectory dirA = new MockRAMDirectory();\n    MockRAMDirectory dirB = new MockRAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    dirA = newDirectory(random);\n    dirB = newDirectory(random);\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    RAMDirectory dirA = new RAMDirectory();\n    RAMDirectory dirB = new RAMDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(new IndexReader[] { readerA, readerB });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA);\n    readerB = IndexReader.open(dirB);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA);\n    readerB = IndexReader.open(dirB);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA);\n    readerB = IndexReader.open(dirB);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA, true);\n    readerB = IndexReader.open(dirB, true);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf0f6e62f1b52e3c166ff00d766463e0da8ef96","date":1327865982,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA);\n    readerB = IndexReader.open(dirB);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55153442ba124ec8bfc6ced0be967e411947ec3b","date":1327867200,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    DirectoryReader rA = DirectoryReader.open(dirA);\n    readerA = SlowCompositeReaderWrapper.wrap(rA);\n    readerAclone = SlowCompositeReaderWrapper.wrap(rA);\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    DirectoryReader rA = DirectoryReader.open(dirA);\n    readerA = SlowCompositeReaderWrapper.wrap(rA);\n    readerAclone = SlowCompositeReaderWrapper.wrap(rA);\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    readerA = IndexReader.open(dirA);\n    readerB = IndexReader.open(dirB);\n    readerX = new MultiReader(readerA, readerB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    DirectoryReader rA = DirectoryReader.open(dirA);\n    readerA = SlowCompositeReaderWrapper.wrap(rA);\n    readerAclone = SlowCompositeReaderWrapper.wrap(rA);\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dirA = newDirectory();\n    dirB = newDirectory();\n\n    IndexWriter wA = new IndexWriter(dirA, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexWriter wB = new IndexWriter(dirB, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (0 == i % 3) {\n        wA.addDocument(doc);\n      } else {\n        wB.addDocument(doc);\n      }\n    }\n    wA.close();\n    wB.close();\n    DirectoryReader rA = DirectoryReader.open(dirA);\n    readerA = SlowCompositeReaderWrapper.wrap(rA);\n    readerAclone = SlowCompositeReaderWrapper.wrap(rA);\n    readerA = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirA));\n    readerB = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dirB));\n    readerX = SlowCompositeReaderWrapper.wrap(new MultiReader(readerA, readerB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","55153442ba124ec8bfc6ced0be967e411947ec3b"],"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55153442ba124ec8bfc6ced0be967e411947ec3b":["abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"3bb13258feba31ab676502787ab2e1779f129b7a":["43b04c27924fe393e38e9f0986e32c634f261859","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["43b04c27924fe393e38e9f0986e32c634f261859"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"43b04c27924fe393e38e9f0986e32c634f261859":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["55153442ba124ec8bfc6ced0be967e411947ec3b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"55153442ba124ec8bfc6ced0be967e411947ec3b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}