{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int[] idToNum = new int[numDocs];\n    int maxValue = TestUtil.nextInt(random(), 10, 1000000);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      int numTokens = TestUtil.nextInt(random(), 1, 10);\n      StringBuilder b = new StringBuilder();\n      for(int j=0;j<numTokens;j++) {\n        b.append(\"a \");\n      }\n      doc.add(newTextField(\"field\", b.toString(), Field.Store.NO));\n      idToNum[i] = random().nextInt(maxValue);\n      doc.add(new NumericDocValuesField(\"num\", idToNum[i]));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    int numHits = TestUtil.nextInt(random(), 1, numDocs);\n    boolean reverse = random().nextBoolean();\n\n    TopDocs hits = s.search(new TermQuery(new Term(\"field\", \"a\")), numHits);\n\n    Rescorer rescorer = new SortRescorer(new Sort(new SortField(\"num\", SortField.Type.INT, reverse)));\n    TopDocs hits2 = rescorer.rescore(s, hits, numHits);\n\n    Integer[] expected = new Integer[numHits];\n    for(int i=0;i<numHits;i++) {\n      expected[i] = hits.scoreDocs[i].doc;\n    }\n\n    final int reverseInt = reverse ? -1 : 1;\n\n    Arrays.sort(expected,\n                new Comparator<Integer>() {\n                  @Override\n                  public int compare(Integer a, Integer b) {\n                    try {\n                      int av = idToNum[Integer.parseInt(r.document(a).get(\"id\"))];\n                      int bv = idToNum[Integer.parseInt(r.document(b).get(\"id\"))];\n                      if (av < bv) {\n                        return -reverseInt;\n                      } else if (bv < av) {\n                        return reverseInt;\n                      } else {\n                        // Tie break by docID\n                        return a - b;\n                      }\n                    } catch (IOException ioe) {\n                      throw new RuntimeException(ioe);\n                    }\n                  }\n                });\n\n    boolean fail = false;\n    for(int i=0;i<numHits;i++) {\n      fail |= expected[i].intValue() != hits2.scoreDocs[i].doc;\n    }\n    assertFalse(fail);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int[] idToNum = new int[numDocs];\n    int maxValue = TestUtil.nextInt(random(), 10, 1000000);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      int numTokens = TestUtil.nextInt(random(), 1, 10);\n      StringBuilder b = new StringBuilder();\n      for(int j=0;j<numTokens;j++) {\n        b.append(\"a \");\n      }\n      doc.add(newTextField(\"field\", b.toString(), Field.Store.NO));\n      idToNum[i] = random().nextInt(maxValue);\n      doc.add(new NumericDocValuesField(\"num\", idToNum[i]));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    IndexSearcher s = newSearcher(r);\n    int numHits = TestUtil.nextInt(random(), 1, numDocs);\n    boolean reverse = random().nextBoolean();\n\n    TopDocs hits = s.search(new TermQuery(new Term(\"field\", \"a\")), numHits);\n\n    Rescorer rescorer = new SortRescorer(new Sort(new SortField(\"num\", SortField.Type.INT, reverse)));\n    TopDocs hits2 = rescorer.rescore(s, hits, numHits);\n\n    Integer[] expected = new Integer[numHits];\n    for(int i=0;i<numHits;i++) {\n      expected[i] = hits.scoreDocs[i].doc;\n    }\n\n    final int reverseInt = reverse ? -1 : 1;\n\n    Arrays.sort(expected,\n                new Comparator<Integer>() {\n                  @Override\n                  public int compare(Integer a, Integer b) {\n                    try {\n                      int av = idToNum[Integer.parseInt(r.document(a).get(\"id\"))];\n                      int bv = idToNum[Integer.parseInt(r.document(b).get(\"id\"))];\n                      if (av < bv) {\n                        return -reverseInt;\n                      } else if (bv < av) {\n                        return reverseInt;\n                      } else {\n                        // Tie break by docID\n                        return a - b;\n                      }\n                    } catch (IOException ioe) {\n                      throw new RuntimeException(ioe);\n                    }\n                  }\n                });\n\n    boolean fail = false;\n    for(int i=0;i<numHits;i++) {\n      fail |= expected[i].intValue() != hits2.scoreDocs[i].doc;\n    }\n    assertFalse(fail);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int[] idToNum = new int[numDocs];\n    int maxValue = TestUtil.nextInt(random(), 10, 1000000);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      int numTokens = TestUtil.nextInt(random(), 1, 10);\n      StringBuilder b = new StringBuilder();\n      for(int j=0;j<numTokens;j++) {\n        b.append(\"a \");\n      }\n      doc.add(newTextField(\"field\", b.toString(), Field.Store.NO));\n      idToNum[i] = random().nextInt(maxValue);\n      doc.add(new NumericDocValuesField(\"num\", idToNum[i]));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    int numHits = TestUtil.nextInt(random(), 1, numDocs);\n    boolean reverse = random().nextBoolean();\n\n    TopDocs hits = s.search(new TermQuery(new Term(\"field\", \"a\")), numHits);\n\n    Rescorer rescorer = new SortRescorer(new Sort(new SortField(\"num\", SortField.Type.INT, reverse)));\n    TopDocs hits2 = rescorer.rescore(s, hits, numHits);\n\n    Integer[] expected = new Integer[numHits];\n    for(int i=0;i<numHits;i++) {\n      expected[i] = hits.scoreDocs[i].doc;\n    }\n\n    final int reverseInt = reverse ? -1 : 1;\n\n    Arrays.sort(expected,\n                new Comparator<Integer>() {\n                  @Override\n                  public int compare(Integer a, Integer b) {\n                    try {\n                      int av = idToNum[Integer.parseInt(r.document(a).get(\"id\"))];\n                      int bv = idToNum[Integer.parseInt(r.document(b).get(\"id\"))];\n                      if (av < bv) {\n                        return -reverseInt;\n                      } else if (bv < av) {\n                        return reverseInt;\n                      } else {\n                        // Tie break by docID\n                        return a - b;\n                      }\n                    } catch (IOException ioe) {\n                      throw new RuntimeException(ioe);\n                    }\n                  }\n                });\n\n    boolean fail = false;\n    for(int i=0;i<numHits;i++) {\n      fail |= expected[i].intValue() != hits2.scoreDocs[i].doc;\n    }\n    assertFalse(fail);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRescorer#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int[] idToNum = new int[numDocs];\n    int maxValue = TestUtil.nextInt(random(), 10, 1000000);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      int numTokens = TestUtil.nextInt(random(), 1, 10);\n      StringBuilder b = new StringBuilder();\n      for(int j=0;j<numTokens;j++) {\n        b.append(\"a \");\n      }\n      doc.add(newTextField(\"field\", b.toString(), Field.Store.NO));\n      idToNum[i] = random().nextInt(maxValue);\n      doc.add(new NumericDocValuesField(\"num\", idToNum[i]));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    int numHits = TestUtil.nextInt(random(), 1, numDocs);\n    boolean reverse = random().nextBoolean();\n\n    TopDocs hits = s.search(new TermQuery(new Term(\"field\", \"a\")), numHits);\n\n    Rescorer rescorer = new SortRescorer(new Sort(new SortField(\"num\", SortField.Type.INT, reverse)));\n    TopDocs hits2 = rescorer.rescore(s, hits, numHits);\n\n    Integer[] expected = new Integer[numHits];\n    for(int i=0;i<numHits;i++) {\n      expected[i] = hits.scoreDocs[i].doc;\n    }\n\n    final int reverseInt = reverse ? -1 : 1;\n\n    Arrays.sort(expected,\n                new Comparator<Integer>() {\n                  @Override\n                  public int compare(Integer a, Integer b) {\n                    try {\n                      int av = idToNum[Integer.parseInt(r.document(a).get(\"id\"))];\n                      int bv = idToNum[Integer.parseInt(r.document(b).get(\"id\"))];\n                      if (av < bv) {\n                        return -reverseInt;\n                      } else if (bv < av) {\n                        return reverseInt;\n                      } else {\n                        // Tie break by docID\n                        return a - b;\n                      }\n                    } catch (IOException ioe) {\n                      throw new RuntimeException(ioe);\n                    }\n                  }\n                });\n\n    boolean fail = false;\n    for(int i=0;i<numHits;i++) {\n      fail |= expected[i].intValue() != hits2.scoreDocs[i].doc;\n    }\n    assertFalse(fail);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = atLeast(1000);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final int[] idToNum = new int[numDocs];\n    int maxValue = TestUtil.nextInt(random(), 10, 1000000);\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+i, Field.Store.YES));\n      int numTokens = TestUtil.nextInt(random(), 1, 10);\n      StringBuilder b = new StringBuilder();\n      for(int j=0;j<numTokens;j++) {\n        b.append(\"a \");\n      }\n      doc.add(newTextField(\"field\", b.toString(), Field.Store.NO));\n      idToNum[i] = random().nextInt(maxValue);\n      doc.add(new NumericDocValuesField(\"num\", idToNum[i]));\n      w.addDocument(doc);\n    }\n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    IndexSearcher s = newSearcher(r);\n    int numHits = TestUtil.nextInt(random(), 1, numDocs);\n    boolean reverse = random().nextBoolean();\n\n    TopDocs hits = s.search(new TermQuery(new Term(\"field\", \"a\")), numHits);\n\n    Rescorer rescorer = new SortRescorer(new Sort(new SortField(\"num\", SortField.Type.INT, reverse)));\n    TopDocs hits2 = rescorer.rescore(s, hits, numHits);\n\n    Integer[] expected = new Integer[numHits];\n    for(int i=0;i<numHits;i++) {\n      expected[i] = hits.scoreDocs[i].doc;\n    }\n\n    final int reverseInt = reverse ? -1 : 1;\n\n    Arrays.sort(expected,\n                new Comparator<Integer>() {\n                  @Override\n                  public int compare(Integer a, Integer b) {\n                    try {\n                      int av = idToNum[Integer.parseInt(r.document(a).get(\"id\"))];\n                      int bv = idToNum[Integer.parseInt(r.document(b).get(\"id\"))];\n                      if (av < bv) {\n                        return -reverseInt;\n                      } else if (bv < av) {\n                        return reverseInt;\n                      } else {\n                        // Tie break by docID\n                        return a - b;\n                      }\n                    } catch (IOException ioe) {\n                      throw new RuntimeException(ioe);\n                    }\n                  }\n                });\n\n    boolean fail = false;\n    for(int i=0;i<numHits;i++) {\n      fail |= expected[i].intValue() != hits2.scoreDocs[i].doc;\n    }\n    assertFalse(fail);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}