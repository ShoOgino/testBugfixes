{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#scale(double[],double,double).mjava","commits":[{"id":"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7","date":1509644682,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#scale(double[],double,double).mjava","pathOld":"/dev/null","sourceNew":"  private double[] scale(double[] values, double min, double max) {\n\n    double localMin = Double.MAX_VALUE;\n    double localMax = Double.MIN_VALUE;\n    for (double d : values) {\n      if (d > localMax) {\n        localMax = d;\n      }\n\n      if (d < localMin) {\n        localMin = d;\n      }\n    }\n\n    //First scale between 0 and 1\n\n    double[] scaled = new double[values.length];\n\n    for (int i = 0; i < scaled.length; i++) {\n      double x = values[i];\n      double s = (x - localMin) / (localMax - localMin);\n      scaled[i] = s;\n    }\n\n    if (min != 0 || max != 1) {\n      //Next scale between specific min/max\n      double scale = max - min;\n\n      for (int i = 0; i < scaled.length; i++) {\n        double d = scaled[i];\n        scaled[i] = (scale * d) + min;\n      }\n    }\n\n    return scaled;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#scale(double[],double,double).mjava","pathOld":"/dev/null","sourceNew":"  private double[] scale(double[] values, double min, double max) {\n\n    double localMin = Double.MAX_VALUE;\n    double localMax = Double.MIN_VALUE;\n    for (double d : values) {\n      if (d > localMax) {\n        localMax = d;\n      }\n\n      if (d < localMin) {\n        localMin = d;\n      }\n    }\n\n    //First scale between 0 and 1\n\n    double[] scaled = new double[values.length];\n\n    for (int i = 0; i < scaled.length; i++) {\n      double x = values[i];\n      double s = (x - localMin) / (localMax - localMin);\n      scaled[i] = s;\n    }\n\n    if (min != 0 || max != 1) {\n      //Next scale between specific min/max\n      double scale = max - min;\n\n      for (int i = 0; i < scaled.length; i++) {\n        double d = scaled[i];\n        scaled[i] = (scale * d) + min;\n      }\n    }\n\n    return scaled;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#scale(double[],double,double).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#scale(double[],double,double).mjava","sourceNew":"  public static double[] scale(double[] values, double min, double max) {\n\n    double localMin = Double.MAX_VALUE;\n    double localMax = Double.MIN_VALUE;\n    for (double d : values) {\n      if (d > localMax) {\n        localMax = d;\n      }\n\n      if (d < localMin) {\n        localMin = d;\n      }\n    }\n\n    //First scale between 0 and 1\n\n    double[] scaled = new double[values.length];\n\n    for (int i = 0; i < scaled.length; i++) {\n      double x = values[i];\n      double s = (x - localMin) / (localMax - localMin);\n      scaled[i] = s;\n    }\n\n    if (min != 0 || max != 1) {\n      //Next scale between specific min/max\n      double scale = max - min;\n\n      for (int i = 0; i < scaled.length; i++) {\n        double d = scaled[i];\n        scaled[i] = (scale * d) + min;\n      }\n    }\n\n    return scaled;\n  }\n\n","sourceOld":"  private double[] scale(double[] values, double min, double max) {\n\n    double localMin = Double.MAX_VALUE;\n    double localMax = Double.MIN_VALUE;\n    for (double d : values) {\n      if (d > localMax) {\n        localMax = d;\n      }\n\n      if (d < localMin) {\n        localMin = d;\n      }\n    }\n\n    //First scale between 0 and 1\n\n    double[] scaled = new double[values.length];\n\n    for (int i = 0; i < scaled.length; i++) {\n      double x = values[i];\n      double s = (x - localMin) / (localMax - localMin);\n      scaled[i] = s;\n    }\n\n    if (min != 0 || max != 1) {\n      //Next scale between specific min/max\n      double scale = max - min;\n\n      for (int i = 0; i < scaled.length; i++) {\n        double d = scaled[i];\n        scaled[i] = (scale * d) + min;\n      }\n    }\n\n    return scaled;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f7656aa7218845fc29808b9dfe775b9558ca4611":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}