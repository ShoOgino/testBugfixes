{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2","date":1500018428,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","date":1500089733,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer fromNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          fromNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && fromNodeIndex != null) {\n      getMatrix().set(fromNodeIndex, getMatrix().get(fromNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard, fromReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo fromReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard);\n      Row tmpRow = pair.first();\n      if (tmpRow == null) {\n        //no such replica available\n        continue;\n      }\n      tmpRow.violations.clear();\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard);\n        targetRow.violations.clear();\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), tmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          fromReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(fromReplicaInfo.collection, fromReplicaInfo.shard).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(fromReplicaInfo.collection, fromReplicaInfo.shard));\n      return new CollectionAdminRequest.MoveReplica(\n          fromReplicaInfo.collection,\n          fromReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.type);\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.type);\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.type));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.collection;\n      String shard = replicaInfo.shard;\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.collection, sourceReplicaInfo.shard, sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.collection,\n          sourceReplicaInfo.name,\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1be2065e7825e7d62009ea5339f317cb1274f9a","date":1510664015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      for (int j = getMatrix().size() - 1; j > i; j--) {\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b04413d237e43414609f041f50db04d553d686f","date":1515761310,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if (!isNodeSuitable(targetRow)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af573cf1aa31058532f304c30b68f17eeb011fbb","date":1516626771,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (Pair<ReplicaInfo, Row> fromReplica : validReplicas) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if (!isNodeSuitable(targetRow)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if (!isNodeSuitable(targetRow)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (Pair<ReplicaInfo, Row> fromReplica : validReplicas) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if (!isNodeSuitable(targetRow)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    for (Pair<ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if(!targetRow.isLive) continue;\n        if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session.matrix);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    Integer sourceNodeIndex = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (Pair<ReplicaInfo, Row> fromReplica : validReplicas) {\n      Row fromRow = fromReplica.second();\n      ReplicaInfo replicaInfo = fromReplica.first();\n      String coll = replicaInfo.getCollection();\n      String shard = replicaInfo.getShard();\n      Pair<Row, ReplicaInfo> pair = fromRow.removeReplica(coll, shard, replicaInfo.getType());\n      Row srcTmpRow = pair.first();\n      if (srcTmpRow == null) {\n        //no such replica available\n        continue;\n      }\n\n      final int i = getMatrix().indexOf(fromRow);\n      int stopAt = force ? 0 : i;\n      for (int j = getMatrix().size() - 1; j >= stopAt; j--) {\n        if (j == i) continue;\n        Row targetRow = getMatrix().get(j);\n        if (!isNodeSuitable(targetRow)) continue;\n        targetRow = targetRow.addReplica(coll, shard, replicaInfo.getType());\n        List<Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getModifiedMatrix(getMatrix(), srcTmpRow, i), targetRow, j));\n        if (!containsNewErrors(errs) && isLessSerious(errs, leastSeriousViolation) &&\n            (force || Policy.compareRows(srcTmpRow, targetRow, session.getPolicy()) < 1)) {\n          leastSeriousViolation = errs;\n          targetNodeIndex = j;\n          sourceNodeIndex = i;\n          sourceReplicaInfo = replicaInfo;\n        }\n      }\n    }\n    if (targetNodeIndex != null && sourceNodeIndex != null) {\n      getMatrix().set(sourceNodeIndex, getMatrix().get(sourceNodeIndex).removeReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()).first());\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(sourceReplicaInfo.getCollection(), sourceReplicaInfo.getShard(), sourceReplicaInfo.getType()));\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          getMatrix().get(targetNodeIndex).node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session.matrix);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session.matrix);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session.matrix);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType());//add replica to target first\n        Pair<Row, ReplicaInfo> pair = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        if (pair == null) continue;//should not happen\n        Row srcRowModified = pair.first();//this is the final state of the source row and session\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules();// now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n          leastSeriousViolation = errs;\n          bestSrcRow = srcRowModified;\n          sourceReplicaInfo = ri;\n          bestTargetRow = targetRow;\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        double[] deviation = new double[1];\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session, deviation);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        double[] deviation = new double[1];\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session, deviation);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        srcRowModified.session.applyRules(); // now resort the nodes with the new values\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5028c6838e2e49cb9da1cf70269851c049f107a","date":1584984100,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().clusterPreferences.get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    Replica sourceReplicaInfo = null;\n    List<Pair<Replica, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<Replica, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      Replica ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    ReplicaInfo sourceReplicaInfo = null;\n    List<Pair<ReplicaInfo, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<ReplicaInfo, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      ReplicaInfo ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/MoveReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    List<Violation> leastSeriousViolation = null;\n    Row bestSrcRow = null;\n    Row bestTargetRow = null;\n    Replica sourceReplicaInfo = null;\n    List<Pair<Replica, Row>> validReplicas = getValidReplicas(true, true, -1);\n    validReplicas.sort(leaderLast);\n    for (int i1 = 0; i1 < validReplicas.size(); i1++) {\n      lastBestDeviation = null;\n      Pair<Replica, Row> fromReplica = validReplicas.get(i1);\n      Row fromRow = fromReplica.second();\n      Replica ri = fromReplica.first();\n      if (ri == null) continue;\n      final int i = session.indexOf(fromRow.node);\n      int stopAt = force ? 0 : i;\n      Row targetRow = null;\n      for (int j = session.matrix.size() - 1; j >= stopAt; j--) {\n        targetRow = session.matrix.get(j);\n        if (targetRow.node.equals(fromRow.node)) continue;\n        if (!isNodeSuitableForReplicaAddition(targetRow, fromRow)) continue;\n        targetRow = targetRow.addReplica(ri.getCollection(), ri.getShard(), ri.getType(), strict); // add replica to target first\n        Row srcRowModified = targetRow.session.getNode(fromRow.node).removeReplica(ri.getCollection(), ri.getShard(), ri.getType());//then remove replica from source node\n        List<Violation> errs = testChangedMatrix(strict, srcRowModified.session);\n        Policy.Session tmpSession = srcRowModified.session;\n\n        if (!containsNewErrors(errs) &&\n            isLessSerious(errs, leastSeriousViolation) &&\n            (force || (tmpSession.indexOf(srcRowModified.node) < tmpSession.indexOf(targetRow.node)))) {\n\n          int result = -1;\n          if (!force && srcRowModified.isLive && targetRow.isLive)  {\n            result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), true);\n            if (result == 0) result = tmpSession.getPolicy().getClusterPreferences().get(0).compare(srcRowModified, tmpSession.getNode(targetRow.node), false);\n          }\n\n          if (result <= 0) {\n            leastSeriousViolation = errs;\n            bestSrcRow = srcRowModified;\n            sourceReplicaInfo = ri;\n            bestTargetRow = targetRow;\n          }\n        }\n      }\n    }\n    if (bestSrcRow != null) {\n      this.session = bestSrcRow.session;\n      return new CollectionAdminRequest.MoveReplica(\n          sourceReplicaInfo.getCollection(),\n          sourceReplicaInfo.getName(),\n          bestTargetRow.node);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f1be2065e7825e7d62009ea5339f317cb1274f9a","af573cf1aa31058532f304c30b68f17eeb011fbb"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","954590f07cfbe2c3ccb86e29d0742c43740ca509"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["28288370235ed02234a64753cdbf0c6ec096304a"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"16a22f8085bb46850c91784e94f7714345011404":["27639bb5e041490ce599065875dd2f6d8beef62a"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"0b04413d237e43414609f041f50db04d553d686f":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["16a22f8085bb46850c91784e94f7714345011404"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["527adea7ce767368d7317339023e18e39702132e"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2","541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"af573cf1aa31058532f304c30b68f17eeb011fbb":["0b04413d237e43414609f041f50db04d553d686f"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9837f40c922407d857991971de6def18eda0857b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f1be2065e7825e7d62009ea5339f317cb1274f9a":["b94236357aaa22b76c10629851fe4e376e0cea82","0b04413d237e43414609f041f50db04d553d686f"],"16a22f8085bb46850c91784e94f7714345011404":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["e5028c6838e2e49cb9da1cf70269851c049f107a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"527adea7ce767368d7317339023e18e39702132e":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["f1be2065e7825e7d62009ea5339f317cb1274f9a"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","27639bb5e041490ce599065875dd2f6d8beef62a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"0b04413d237e43414609f041f50db04d553d686f":["af573cf1aa31058532f304c30b68f17eeb011fbb"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"28288370235ed02234a64753cdbf0c6ec096304a":["541d16fbfc627e2eeecfb3eb40fe384fa8c75b4e"],"e5028c6838e2e49cb9da1cf70269851c049f107a":["527adea7ce767368d7317339023e18e39702132e"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"af573cf1aa31058532f304c30b68f17eeb011fbb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"27639bb5e041490ce599065875dd2f6d8beef62a":["16a22f8085bb46850c91784e94f7714345011404"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}