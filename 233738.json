{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","sourceNew":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","sourceNew":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testLongSpecialValues().mjava","sourceNew":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals = new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.longToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get()) );\n\n      // test if decoding values as int fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToInt(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        LegacyNumericUtils.longToPrefixCoded(vals[i], j, ref);\n        long prefixVal= LegacyNumericUtils.prefixCodedToLong(ref.get());\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}