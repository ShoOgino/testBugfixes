{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRef).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRef).mjava","pathOld":"/dev/null","sourceNew":"    /** Sugar: just joins the provided terms with {@link\n     *  SynonymMap#WORD_SEPARATOR}.  reuse and its chars\n     *  must not be null. */\n    public static CharsRef join(String[] words, CharsRef reuse) {\n      int upto = 0;\n      char[] buffer = reuse.chars;\n      for(String word : words) {\n        if (upto > 0) {\n          if (upto >= buffer.length) {\n            reuse.grow(upto);\n            buffer = reuse.chars;\n          }\n          buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n\n        final int wordLen =  word.length();\n        final int needed = upto + wordLen;\n        if (needed > buffer.length) {\n          reuse.grow(needed);\n          buffer = reuse.chars;\n        }\n\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n      }\n\n      return reuse;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cc186b23d2ac4f155210637975b5e9e676a39eb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRef).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.Builder#join(String[],CharsRef).mjava","sourceNew":"    /** Sugar: just joins the provided terms with {@link\n     *  SynonymMap#WORD_SEPARATOR}.  reuse and its chars\n     *  must not be null. */\n    public static CharsRef join(String[] words, CharsRef reuse) {\n      int upto = 0;\n      char[] buffer = reuse.chars;\n      for(String word : words) {\n        if (upto > 0) {\n          if (upto >= buffer.length) {\n            reuse.grow(upto);\n            buffer = reuse.chars;\n          }\n          buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n\n        final int wordLen =  word.length();\n        final int needed = upto + wordLen;\n        if (needed > buffer.length) {\n          reuse.grow(needed);\n          buffer = reuse.chars;\n        }\n\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n      }\n\n      return reuse;\n    }\n\n","sourceOld":"    /** Sugar: just joins the provided terms with {@link\n     *  SynonymMap#WORD_SEPARATOR}.  reuse and its chars\n     *  must not be null. */\n    public static CharsRef join(String[] words, CharsRef reuse) {\n      int upto = 0;\n      char[] buffer = reuse.chars;\n      for(String word : words) {\n        if (upto > 0) {\n          if (upto >= buffer.length) {\n            reuse.grow(upto);\n            buffer = reuse.chars;\n          }\n          buffer[upto++] = SynonymMap.WORD_SEPARATOR;\n        }\n\n        final int wordLen =  word.length();\n        final int needed = upto + wordLen;\n        if (needed > buffer.length) {\n          reuse.grow(needed);\n          buffer = reuse.chars;\n        }\n\n        word.getChars(0, wordLen, buffer, upto);\n        upto += wordLen;\n      }\n\n      return reuse;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}