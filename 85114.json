{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a166a99205d498efdb0bc4fa1463da874e48e62","date":1393337319,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,\n      int replicationFactor, int numShards) throws Exception {\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n    \n    Map<String,Object> props = makeMap(REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode, NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client, \"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,\n      int replicationFactor, int numShards) throws Exception {\n    int maxShardsPerNode = ((((numShards + 1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n    \n    Map<String,Object> props = makeMap(REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode, NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client, \"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9a166a99205d498efdb0bc4fa1463da874e48e62"],"d3a46663789411cdf016145a96a40cf861798ae3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"9a166a99205d498efdb0bc4fa1463da874e48e62":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a166a99205d498efdb0bc4fa1463da874e48e62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"963b0a9b072593721af39e1d9b815fba17e88e7f":["bafca15d8e408346a67f4282ad1143b88023893b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3a46663789411cdf016145a96a40cf861798ae3"],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a166a99205d498efdb0bc4fa1463da874e48e62":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["9a166a99205d498efdb0bc4fa1463da874e48e62"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}