{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7375bc69c270e1e62c08c5091793a3e9dce937f","date":1275471695,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If getReader is true, you must later call\n     * {@link #release(SegmentReader)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      //System.out.println(\"rld.get seg=\" + info + \" poolReaders=\" + poolReaders);\n      if (rld == null) {\n        //System.out.println(\"  new rld\");\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(info);\n        readerMap.put(info, rld);\n      }\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["c7375bc69c270e1e62c08c5091793a3e9dce937f","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["c7375bc69c270e1e62c08c5091793a3e9dce937f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","c7375bc69c270e1e62c08c5091793a3e9dce937f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","5ef87af8c7bd0f8429622b83aa74202383f2e757","ddc4c914be86e34b54f70023f45a60fa7f04e929","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}