{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}