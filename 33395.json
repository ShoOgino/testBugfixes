{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a1ac06ff482fcbc0298895865cff4de6c241b0b","date":1336158871,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockAnalyzer#maybePayload(TokenFilter,String).mjava","sourceNew":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      if (LuceneTestCase.VERBOSE) {\n        if (val == Integer.MAX_VALUE) {\n          System.out.println(\"MockAnalyzer: field=\" + fieldName + \" gets variable length payloads\");\n        } else if (val != -1) {\n          System.out.println(\"MockAnalyzer: field=\" + fieldName + \" gets fixed length=\" + val + \" payloads\");\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","sourceOld":"  private synchronized TokenFilter maybePayload(TokenFilter stream, String fieldName) {\n    Integer val = previousMappings.get(fieldName);\n    if (val == null) {\n      val = -1; // no payloads\n      if (LuceneTestCase.rarely(random)) {\n        switch(random.nextInt(3)) {\n          case 0: val = -1; // no payloads\n                  break;\n          case 1: val = Integer.MAX_VALUE; // variable length payload\n                  break;\n          case 2: val = random.nextInt(12); // fixed length payload\n                  break;\n        }\n      }\n      previousMappings.put(fieldName, val); // save it so we are consistent for this field\n    }\n    \n    if (val == -1)\n      return stream;\n    else if (val == Integer.MAX_VALUE)\n      return new MockVariableLengthPayloadFilter(random, stream);\n    else\n      return new MockFixedLengthPayloadFilter(random, stream, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a1ac06ff482fcbc0298895865cff4de6c241b0b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a1ac06ff482fcbc0298895865cff4de6c241b0b"]},"commit2Childs":{"4a1ac06ff482fcbc0298895865cff4de6c241b0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a1ac06ff482fcbc0298895865cff4de6c241b0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}