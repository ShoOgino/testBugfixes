{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity similarity = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms==null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    final Similarity sim = ((IndexSearcher)context.get(\"searcher\")).getSimilarityProvider().get(field);\n    if (!(sim instanceof TFIDFSimilarity)) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final TFIDFSimilarity similarity = (TFIDFSimilarity) sim;\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    InvertedFields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    InvertedFields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TFValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader().fields();\n    final Terms terms = fields.terms(field);\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n\n    return new FloatDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(indexedBytes, false)) {\n            docs = termsEnum.docs(null, null, true);\n          } else {\n            docs = null;\n          }\n        } else {\n          docs = null;\n        }\n\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return similarity.tf(0);\n          }\n\n          // a match!\n          return similarity.tf(docs.freq());\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"e2297162a22c55456e200caef2cbcb00fe381120":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e2297162a22c55456e200caef2cbcb00fe381120"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["872cff1d3a554e0cd64014cd97f88d3002b0f491","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e2297162a22c55456e200caef2cbcb00fe381120","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"61e20f33ce8ff701576366fdb03955eded5f209b":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["e2297162a22c55456e200caef2cbcb00fe381120","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"e2297162a22c55456e200caef2cbcb00fe381120":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["d638301ad1cfcae567b681b893bc8781f0ee48a5","b65b350ca9588f9fc76ce7d6804160d06c45ff42","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["5cab9a86bd67202d20b6adc463008c8e982b070a","61e20f33ce8ff701576366fdb03955eded5f209b"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}