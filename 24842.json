{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.BaseDistributedSearchTestCase#doTest()\n   * \n   * Create 3 shards, each with one replica\n   */\n  @Override\n  public void doTest() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      expectThrows(SolrException.class, () -> indexr(t1, \"a doc with no id\"));\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    boolean testFinished = false;\n    try {\n      handle.clear();\n      handle.put(\"timestamp\", SKIPVAL);\n      \n      testNodeWithoutCollectionForwarding();\n     \n      indexr(id, 1, i1, 100, tlong, 100, t1,\n          \"now is the time for all good men\", \"foo_f\", 1.414f, \"foo_b\", \"true\",\n          \"foo_d\", 1.414d);\n      \n      commit();\n      \n      // make sure we are in a steady state...\n      waitForRecoveriesToFinish(false);\n\n      assertDocCounts(false);\n      \n      indexAbunchOfDocs();\n      \n      // check again \n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      assertDocCounts(VERBOSE);\n      checkQueries();\n      \n      assertDocCounts(VERBOSE);\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      brindDownShardIndexSomeDocsAndRecover();\n      \n      query(\"q\", \"*:*\", \"sort\", \"n_tl1 desc\");\n      \n      // test adding another replica to a shard - it should do a\n      // recovery/replication to pick up the index from the leader\n      addNewReplica();\n      \n      long docId = testUpdateAndDelete();\n      \n      // index a bad doc...\n      try {\n        indexr(t1, \"a doc with no id\");\n        fail(\"this should fail\");\n      } catch (SolrException e) {\n        // expected\n      }\n      \n      // TODO: bring this to its own method?\n      // try indexing to a leader that has no replicas up\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      ZkNodeProps leaderProps = zkStateReader.getLeaderRetry(\n          DEFAULT_COLLECTION, SHARD2);\n      \n      String nodeName = leaderProps.getStr(ZkStateReader.NODE_NAME_PROP);\n      chaosMonkey.stopShardExcept(SHARD2, nodeName);\n      \n      SolrClient client = getClient(nodeName);\n      \n      index_specific(client, \"id\", docId + 1, t1, \"what happens here?\");\n      \n      // expire a session...\n      CloudJettyRunner cloudJetty = shardToJetty.get(SHARD1).get(0);\n      chaosMonkey.expireSession(cloudJetty.jetty);\n      \n      indexr(\"id\", docId + 1, t1, \"slip this doc in\");\n      \n      waitForRecoveriesToFinish(false);\n      \n      checkShardConsistency(SHARD1);\n      checkShardConsistency(SHARD2);\n      \n      testFinished = true;\n    } finally {\n      if (!testFinished) {\n        printLayoutOnTearDown = true;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}