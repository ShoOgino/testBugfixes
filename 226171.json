{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    ThreadSafeClientConnManager mgr = new ThreadSafeClientConnManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.setDefaultMaxPerRoute(10000);\n    mgr.setMaxTotal(10000);\n    DefaultHttpClient httpClient = new DefaultHttpClient(mgr);\n    httpClient.getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    httpClient.getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    \n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    MultiThreadedHttpConnectionManager mgr = new MultiThreadedHttpConnectionManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.getParams().setDefaultMaxConnectionsPerHost(10000);\n    mgr.getParams().setMaxTotalConnections(10000);\n    mgr.getParams().setSoTimeout(readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    mgr.getParams().setConnectionTimeout(connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    HttpClient httpClient = new HttpClient(mgr);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    ThreadSafeClientConnManager mgr = new ThreadSafeClientConnManager();\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    mgr.setDefaultMaxPerRoute(10000);\n    mgr.setMaxTotal(10000);\n    DefaultHttpClient httpClient = new DefaultHttpClient(mgr);\n    httpClient.getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, readTimeout == null ? 20000 : Integer.parseInt(readTimeout)); //20 secs\n    httpClient.getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, connTimeout == null ? 5000 : Integer.parseInt(connTimeout)); //5 secs\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    \n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      httpClient.getCredentialsProvider().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","sourceNew":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String).mjava","sourceNew":null,"sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["eb99886ff640d94edb43e0d36112a2b7023379ba","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2425308ebcd91b538a601df94ae1551ccaab2bb"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}