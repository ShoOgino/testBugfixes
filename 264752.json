{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    stateProvider.connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    stateProvider.connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    connect();\n    zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#registerCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    getClusterStateProvider().connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","sourceOld":"  /**\n   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes\n   *\n   * Note that the watcher is unregistered after it has been called once.  To make a watcher persistent,\n   * it should re-register itself in its {@link CollectionStateWatcher#onStateChanged(Set, DocCollection)}\n   * call\n   *\n   * @param collection the collection to watch\n   * @param watcher    a watcher that will be called when the state changes\n   */\n  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    stateProvider.connect();\n    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["0544142c22eb88b6d8b3817f2e1190156aa4f9af","727bb765ff2542275f6d31f67be18d7104bae148"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}