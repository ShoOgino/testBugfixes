{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverseEdges(Node,EdgeIterator,double,double,Set[Edge]).mjava","commits":[{"id":"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a","date":1461845562,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverseEdges(Node,EdgeIterator,double,double,Set[Edge]).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean traverseEdges(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue, final Set<Edge> edgeSet) {\n      if (node == null) {\n        return true;\n      }\n      if (maxValue < node.minimumValue) {\n        return traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet);\n      } else if (minValue > node.maximumValue) {\n        return traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet);\n      } else {\n        // There's overlap with the current node, and there may also be overlap with the lesser side and greater side\n        if (minValue < node.minimumValue) {\n          if (!traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        if (!edgeSet.contains(node.edge)) {\n          if (!edgeIterator.matches(node.edge)) {\n            return false;\n          }\n          edgeSet.add(node.edge);\n        }\n        if (maxValue > node.maximumValue) {\n          if (!traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        return traverseEdges(node.within, edgeIterator, minValue, maxValue, edgeSet);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","date":1461888019,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverseEdges(Node,EdgeIterator,double,double,Set[Edge]).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean traverseEdges(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue, final Set<Edge> edgeSet) {\n      if (node == null) {\n        return true;\n      }\n      if (maxValue < node.minimumValue) {\n        return traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet);\n      } else if (minValue > node.maximumValue) {\n        return traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet);\n      } else {\n        // There's overlap with the current node, and there may also be overlap with the lesser side and greater side\n        if (minValue < node.minimumValue) {\n          if (!traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        if (!edgeSet.contains(node.edge)) {\n          if (!edgeIterator.matches(node.edge)) {\n            return false;\n          }\n          edgeSet.add(node.edge);\n        }\n        if (maxValue > node.maximumValue) {\n          if (!traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        return traverseEdges(node.within, edgeIterator, minValue, maxValue, edgeSet);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083674ea80108c4053d9526cdef6f77b2494e551","date":1462313169,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#traverseEdges(Node,EdgeIterator,double,double,Set[Edge]).mjava","sourceNew":null,"sourceOld":"    protected boolean traverseEdges(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue, final Set<Edge> edgeSet) {\n      if (node == null) {\n        return true;\n      }\n      if (maxValue < node.minimumValue) {\n        return traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet);\n      } else if (minValue > node.maximumValue) {\n        return traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet);\n      } else {\n        // There's overlap with the current node, and there may also be overlap with the lesser side and greater side\n        if (minValue < node.minimumValue) {\n          if (!traverseEdges(node.lesser, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        if (!edgeSet.contains(node.edge)) {\n          if (!edgeIterator.matches(node.edge)) {\n            return false;\n          }\n          edgeSet.add(node.edge);\n        }\n        if (maxValue > node.maximumValue) {\n          if (!traverseEdges(node.greater, edgeIterator, minValue, maxValue, edgeSet)) {\n            return false;\n          }\n        }\n        return traverseEdges(node.within, edgeIterator, minValue, maxValue, edgeSet);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"083674ea80108c4053d9526cdef6f77b2494e551":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["083674ea80108c4053d9526cdef6f77b2494e551"]},"commit2Childs":{"083674ea80108c4053d9526cdef6f77b2494e551":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0","5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a"],"c46db27f3364a67a1c77a0f4e462cc7c5b4147f0":["083674ea80108c4053d9526cdef6f77b2494e551"],"5b3ccbc7c0d21f9643de6c5c7894f67336dcb57a":["c46db27f3364a67a1c77a0f4e462cc7c5b4147f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}