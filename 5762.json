{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","commits":[{"id":"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d","date":1382570352,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"/dev/null","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdb920e3a3747f686f10b316a464ba75b36b7732","date":1384217439,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379c08eb69654c02a4c8e00903032ce54db2a115","date":1384289609,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      delegate.setNextReader(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      delegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          delegate.setNextReader(contexts[currentContext]);\n          delegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        delegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.contains(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new FixedBitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = fieldValueCollapse.getCollapsedSet().iterator();\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new FixedBitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      this.collapseValues = contexts[currentContext].reader().getNumericDocValues(this.collapseField);\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      IntLongOpenHashMap cmap = collapseStrategy.getCollapseMap();\n      LongArrayList docScores = collapseStrategy.getDocScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      float nullScore = collapseStrategy.getNullScore();\n\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          this.collapseValues = contexts[currentContext].reader().getNumericDocValues(this.collapseField);\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int collapseValue = (int)collapseValues.get(contextDoc);\n          if(collapseValue != nullValue) {\n            long pointerValue = cmap.get(collapseValue);\n            //Unpack the pointer\n            int pointer = (int)(pointerValue>>32);\n            long docScore = docScores.get(pointer);\n            //Unpack the score\n            dummy.score = Float.intBitsToFloat(((int)docScore));\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //Its an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":6,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            ord = segmentValues.getOrd(contextDoc);\n            if(ord > -1) {\n              ord = (int)segmentOrdinalMap.get(ord);\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            ord = segmentValues.getOrd(globalDoc);\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379c08eb69654c02a4c8e00903032ce54db2a115":["fdb920e3a3747f686f10b316a464ba75b36b7732"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["379c08eb69654c02a4c8e00903032ce54db2a115","ae73da626f97850c922c42736f808d0378e165f0"],"fdb920e3a3747f686f10b316a464ba75b36b7732":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["379c08eb69654c02a4c8e00903032ce54db2a115"],"80c55596a764e2d397e982828e75fcac5ce430a0":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"]},"commit2Childs":{"379c08eb69654c02a4c8e00903032ce54db2a115":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fdb920e3a3747f686f10b316a464ba75b36b7732":["379c08eb69654c02a4c8e00903032ce54db2a115"],"c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d":["fdb920e3a3747f686f10b316a464ba75b36b7732"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1a89fbf5a750bffb59fe3bf0779dd9fb5ee0c4d"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}