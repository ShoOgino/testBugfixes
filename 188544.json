{"path":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","commits":[{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"/dev/null","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        // Advance the merge from pending to running\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fcf9ff964d0c4e8a56d2ca95c1f65b7f2caa432","date":1221212586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        // Advance the merge from pending to running\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["ef82ff03e4016c705811b2658e81471a645c0e49"],"6fcf9ff964d0c4e8a56d2ca95c1f65b7f2caa432":["2586f96f60332eb97ecd2934b0763791462568b2"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6fcf9ff964d0c4e8a56d2ca95c1f65b7f2caa432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2586f96f60332eb97ecd2934b0763791462568b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6fcf9ff964d0c4e8a56d2ca95c1f65b7f2caa432":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["6fcf9ff964d0c4e8a56d2ca95c1f65b7f2caa432"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}