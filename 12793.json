{"path":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(FixedBitSet,int,int).mjava","commits":[{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(FixedBitSet,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(OpenBitSet,int,int).mjava","sourceNew":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( FixedBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","sourceOld":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( OpenBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/CachedArrayCreator#checkMatchAllBits(FixedBitSet,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Utility function to help check what bits are valid\n   */\n  protected Bits checkMatchAllBits( FixedBitSet valid, int numDocs, int maxDocs )\n  {\n    if( numDocs != maxDocs ) {\n      if( hasOption( OPTION_CACHE_BITS ) ) {\n        for( int i=0; i<maxDocs; i++ ) {\n          if( !valid.get(i) ) {\n            return valid;\n          }\n        }\n      }\n      else {\n        return null;\n      }\n    }\n    return new Bits.MatchAllBits( maxDocs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}