{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    new SolrJSONWriter(writer)\n        .setIndent(true)\n        .writeObj(map)\n        .close();\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    new SolrJSONWriter(writer)\n        .setIndent(true)\n        .writeObj(map)\n        .close();\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    new SolrJSONWriter(writer)\n        .setIndent(true)\n        .writeObj(map)\n        .close();\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","sourceNew":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer)) {\n      jsonWriter.setIndent(true).writeObj(map);\n    }\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    new SolrJSONWriter(writer)\n        .setIndent(true)\n        .writeObj(map)\n        .close();\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","sourceNew":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer)) {\n      jsonWriter.setIndent(true).writeObj(map);\n    }\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    new SolrJSONWriter(writer)\n        .setIndent(true)\n        .writeObj(map)\n        .close();\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"940c75fcb0bf7bc85eff175ced7f2d3e08868105","date":1593753958,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    StringWriter writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(map);\n    }\n    String json = writer.toString();\n    Object o = Utils.fromJSONString(json);\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n    C1 c1 = new C1();\n\n    int iters = 10000;\n    writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(c1);\n    }\n   assertEquals(json, writer.toString());\n\n\n   /*Used in perf testing\n   System.out.println(\"JSON REFLECT write time : \"+write2String(c1,iters));\n    System.out.println(\"JSON Map write time : \"+write2String(map, iters));\n\n    System.out.println(\"javabin REFLECT write time : \"+write2Javabin(c1,iters));\n    System.out.println(\"javabin Map write time : \"+write2Javabin(map, iters));*/\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    StringWriter writer = new StringWriter();\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer)) {\n      jsonWriter.setIndent(true).writeObj(map);\n    }\n    Object o = Utils.fromJSONString(writer.toString());\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75f02fb3e11aab47cb88dbe1d07dc2a64ec80c05","date":1594282102,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestSolrJsonWriter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    StringWriter writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(map);\n    }\n    String json = writer.toString();\n    Object o = Utils.fromJSONString(json);\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n    C1 c1 = new C1();\n\n    int iters = 10000;\n    writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(c1);\n    }\n   assertEquals(json, writer.toString());\n\n\n   /*Used in perf testing\n   System.out.println(\"JSON REFLECT write time : \"+write2String(c1,iters));\n    System.out.println(\"JSON Map write time : \"+write2String(map, iters));\n\n    System.out.println(\"javabin REFLECT write time : \"+write2Javabin(c1,iters));\n    System.out.println(\"javabin Map write time : \"+write2Javabin(map, iters));\n    */\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"k1\",\"v1\");\n    map.put(\"k2\",1);\n    map.put(\"k3\",false);\n    map.put(\"k4\",Utils.makeMap(\"k41\", \"v41\", \"k42\",\"v42\"));\n    map.put(\"k5\", (MapWriter) ew -> {\n      ew.put(\"k61\",\"v61\");\n      ew.put(\"k62\",\"v62\");\n      ew.put(\"k63\", (IteratorWriter) iw -> iw.add(\"v631\")\n          .add(\"v632\"));\n    });\n\n    StringWriter writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(map);\n    }\n    String json = writer.toString();\n    Object o = Utils.fromJSONString(json);\n    assertEquals(\"v1\", Utils.getObjectByPath(o, true, \"k1\"));\n    assertEquals(1l, Utils.getObjectByPath(o, true, \"k2\"));\n    assertEquals(Boolean.FALSE, Utils.getObjectByPath(o, true, \"k3\"));\n    assertEquals(\"v41\", Utils.getObjectByPath(o, true, \"k4/k41\"));\n    assertEquals(\"v42\", Utils.getObjectByPath(o, true, \"k4/k42\"));\n    assertEquals(\"v61\", Utils.getObjectByPath(o, true, \"k5/k61\"));\n    assertEquals(\"v62\", Utils.getObjectByPath(o, true, \"k5/k62\"));\n    assertEquals(\"v631\", Utils.getObjectByPath(o, true, \"k5/k63[0]\"));\n    assertEquals(\"v632\", Utils.getObjectByPath(o, true, \"k5/k63[1]\"));\n    C1 c1 = new C1();\n\n    int iters = 10000;\n    writer = new StringWriter();\n    try (SolrJSONWriter jsonWriter = new SolrJSONWriter(writer).setIndent(false)) {\n      jsonWriter.writeObj(c1);\n    }\n   assertEquals(json, writer.toString());\n\n\n   /*Used in perf testing\n   System.out.println(\"JSON REFLECT write time : \"+write2String(c1,iters));\n    System.out.println(\"JSON Map write time : \"+write2String(map, iters));\n\n    System.out.println(\"javabin REFLECT write time : \"+write2Javabin(c1,iters));\n    System.out.println(\"javabin Map write time : \"+write2Javabin(map, iters));*/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["26dad91f15019714a045b4d8c5f40162b2058b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["26dad91f15019714a045b4d8c5f40162b2058b54","8c5cdabe00d4d433e6a831e18f68201284973eef"],"75f02fb3e11aab47cb88dbe1d07dc2a64ec80c05":["940c75fcb0bf7bc85eff175ced7f2d3e08868105"],"940c75fcb0bf7bc85eff175ced7f2d3e08868105":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75f02fb3e11aab47cb88dbe1d07dc2a64ec80c05"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["1da93834e39ce341a13e42b611d0a83bd3114bba","940c75fcb0bf7bc85eff175ced7f2d3e08868105"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"75f02fb3e11aab47cb88dbe1d07dc2a64ec80c05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"940c75fcb0bf7bc85eff175ced7f2d3e08868105":["75f02fb3e11aab47cb88dbe1d07dc2a64ec80c05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}