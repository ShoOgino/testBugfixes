{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8d7a81c29a594c8d28e66f3a9029ed7458af42","date":1300719582,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16));\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fname = config.get(\"line.file.out\", null);\n    if (fname == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n    OutputStream out = StreamUtils.outputStream(new File(fname));\n    lineFileOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), StreamUtils.BUFFER_SIZE));\n    docMaker = runData.getDocMaker();\n    \n    // init fields \n    String f2r = config.get(\"line.fields\",null);\n    if (f2r == null) {\n      fieldsToWrite = DEFAULT_FIELDS;\n    } else {\n      if (f2r.indexOf(SEP)>=0) {\n        throw new IllegalArgumentException(\"line.fields \"+f2r+\" should not contain the separator char: \"+SEP);\n      }\n      fieldsToWrite = f2r.split(\",\"); \n    }\n    \n    // init sufficient fields\n    sufficientFields = new boolean[fieldsToWrite.length];\n    String suff = config.get(\"sufficient.fields\",DEFAULT_SUFFICIENT_FIELDS);\n    if (\",\".equals(suff)) {\n      checkSufficientFields = false;\n    } else {\n      checkSufficientFields = true;\n      HashSet<String> sf = new HashSet<String>(Arrays.asList(suff.split(\",\")));\n      for (int i=0; i<fieldsToWrite.length; i++) {\n        if (sf.contains(fieldsToWrite[i])) {\n          sufficientFields[i] = true;\n        }\n      }\n    }\n    \n    writeHeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6e2944372726ed00fc05229687367002194c6c81"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","6e2944372726ed00fc05229687367002194c6c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["6e2944372726ed00fc05229687367002194c6c81"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6e2944372726ed00fc05229687367002194c6c81":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}