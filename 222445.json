{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","commits":[{"id":"433777d1eaf9998136cd16515dc0e1eb26f5d535","date":1273839120,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link IndexWriter#addIndexes} or {@link IndexWriter#addIndexesNoOptimize}.\n   * If you want only the payloads of the external segments to be processed, you\n   * can return <code>null</code> whenever a {@link DirPayloadProcessor} is\n   * requested for the {@link Directory} of the {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link IndexWriter#addIndexes} or {@link IndexWriter#addIndexesNoOptimize}.\n   * If you want only the payloads of the external segments to be processed, you\n   * can return <code>null</code> whenever a {@link DirPayloadProcessor} is\n   * requested for the {@link Directory} of the {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    payloadProcessorProvider = pcp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    payloadProcessorProvider = pcp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #forceMerge}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #optimize}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f3b80f215e115e99a05630e77d0099214cf3da3","date":1328093848,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link PayloadProcessorProvider.ReaderPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #forceMerge}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link DirPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #forceMerge}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setPayloadProcessorProvider(PayloadProcessorProvider).mjava","sourceNew":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link PayloadProcessorProvider.ReaderPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #forceMerge}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link PayloadProcessorProvider} to use when merging payloads.\n   * Note that the given <code>pcp</code> will be invoked for every segment that\n   * is merged, not only external ones that are given through\n   * {@link #addIndexes}. If you want only the payloads of the external segments\n   * to be processed, you can return <code>null</code> whenever a\n   * {@link PayloadProcessorProvider.ReaderPayloadProcessor} is requested for the {@link Directory} of the\n   * {@link IndexWriter}.\n   * <p>\n   * The default is <code>null</code> which means payloads are processed\n   * normally (copied) during segment merges. You can also unset it by passing\n   * <code>null</code>.\n   * <p>\n   * <b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect\n   * immediately, potentially for already running merges too. If you want to be\n   * sure it is used for further operations only, such as {@link #addIndexes} or\n   * {@link #forceMerge}, you can call {@link #waitForMerges()} before.\n   */\n  public void setPayloadProcessorProvider(PayloadProcessorProvider pcp) {\n    ensureOpen();\n    payloadProcessorProvider = pcp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6f3b80f215e115e99a05630e77d0099214cf3da3"],"6f3b80f215e115e99a05630e77d0099214cf3da3":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["433777d1eaf9998136cd16515dc0e1eb26f5d535"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f3b80f215e115e99a05630e77d0099214cf3da3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["6f3b80f215e115e99a05630e77d0099214cf3da3"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}