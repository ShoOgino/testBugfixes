{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    public byte[] getPayload(byte[] bytes, int offset) throws IOException {\n      if (!any || postingsEnum == null) {\n        return null;\n      }\n      final BytesRef payload = postingsEnum.getPayload();\n      // old API would always used passed in bytes if it\n      // \"fits\", else allocate new:\n      if (bytes != null && payload.length <= bytes.length - offset) {\n        System.arraycopy(payload.bytes, payload.offset, bytes, offset, payload.length);\n        return bytes;\n      } else if (payload.offset == 0 && payload.length == payload.bytes.length) {\n        return payload.bytes;\n      } else {\n        final byte[] retBytes = new byte[payload.length];\n        System.arraycopy(payload.bytes, payload.offset, retBytes, 0, payload.length);\n        return retBytes;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c4531fadbecf73a7716fdf5cd742463e866e84e","date":1273851662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","sourceNew":"    public byte[] getPayload(byte[] bytes, int offset) throws IOException {\n      if (!any || postingsEnum == null) {\n        return null;\n      }\n      if (pendingPayload == null) {\n        if (!postingsEnum.hasPayload()) {\n          return null;\n        }\n        pendingPayload = postingsEnum.getPayload();\n      }\n      if (pendingPayload == null) {\n        return null;\n      }\n\n      // old API would always used passed in bytes if it\n      // \"fits\", else allocate new:\n      if (bytes != null && pendingPayload.length <= bytes.length - offset) {\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, bytes, offset, pendingPayload.length);\n        return bytes;\n      } else if (pendingPayload.offset == 0 && pendingPayload.length == pendingPayload.bytes.length) {\n        return pendingPayload.bytes;\n      } else {\n        final byte[] retBytes = new byte[pendingPayload.length];\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, retBytes, 0, pendingPayload.length);\n        return retBytes;\n      }\n    }\n\n","sourceOld":"    public byte[] getPayload(byte[] bytes, int offset) throws IOException {\n      if (!any || postingsEnum == null) {\n        return null;\n      }\n      final BytesRef payload = postingsEnum.getPayload();\n      // old API would always used passed in bytes if it\n      // \"fits\", else allocate new:\n      if (bytes != null && payload.length <= bytes.length - offset) {\n        System.arraycopy(payload.bytes, payload.offset, bytes, offset, payload.length);\n        return bytes;\n      } else if (payload.offset == 0 && payload.length == payload.bytes.length) {\n        return payload.bytes;\n      } else {\n        final byte[] retBytes = new byte[payload.length];\n        System.arraycopy(payload.bytes, payload.offset, retBytes, 0, payload.length);\n        return retBytes;\n      }\n    }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","sourceNew":null,"sourceOld":"    public byte[] getPayload(byte[] bytes, int offset) throws IOException {\n      if (!any || postingsEnum == null) {\n        return null;\n      }\n      if (pendingPayload == null) {\n        if (!postingsEnum.hasPayload()) {\n          return null;\n        }\n        pendingPayload = postingsEnum.getPayload();\n      }\n      if (pendingPayload == null) {\n        return null;\n      }\n\n      // old API would always used passed in bytes if it\n      // \"fits\", else allocate new:\n      if (bytes != null && pendingPayload.length <= bytes.length - offset) {\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, bytes, offset, pendingPayload.length);\n        return bytes;\n      } else if (pendingPayload.offset == 0 && pendingPayload.length == pendingPayload.bytes.length) {\n        return pendingPayload.bytes;\n      } else {\n        final byte[] retBytes = new byte[pendingPayload.length];\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, retBytes, 0, pendingPayload.length);\n        return retBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermPositions#getPayload(byte[],int).mjava","sourceNew":null,"sourceOld":"    public byte[] getPayload(byte[] bytes, int offset) throws IOException {\n      if (!any || postingsEnum == null) {\n        return null;\n      }\n      if (pendingPayload == null) {\n        if (!postingsEnum.hasPayload()) {\n          return null;\n        }\n        pendingPayload = postingsEnum.getPayload();\n      }\n      if (pendingPayload == null) {\n        return null;\n      }\n\n      // old API would always used passed in bytes if it\n      // \"fits\", else allocate new:\n      if (bytes != null && pendingPayload.length <= bytes.length - offset) {\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, bytes, offset, pendingPayload.length);\n        return bytes;\n      } else if (pendingPayload.offset == 0 && pendingPayload.length == pendingPayload.bytes.length) {\n        return pendingPayload.bytes;\n      } else {\n        final byte[] retBytes = new byte[pendingPayload.length];\n        System.arraycopy(pendingPayload.bytes, pendingPayload.offset, retBytes, 0, pendingPayload.length);\n        return retBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["5c4531fadbecf73a7716fdf5cd742463e866e84e","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5c4531fadbecf73a7716fdf5cd742463e866e84e"],"5c4531fadbecf73a7716fdf5cd742463e866e84e":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}