{"path":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","commits":[{"id":"57a7a3882a7c8834862c3757917f6b4df37425df","date":1426781496,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups. */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","sourceNew":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","sourceOld":"  /** Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups. */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","sourceNew":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.apiBag = klass == SolrRequestHandler.class ? new ApiBag(core != null) : null;\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","sourceOld":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#PluginBag(Class[T],SolrCore,boolean).mjava","sourceNew":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.apiBag = klass == SolrRequestHandler.class ? new ApiBag(core != null) : null;\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","sourceOld":"  /**\n   * Pass needThreadSafety=true if plugins can be added and removed concurrently with lookups.\n   */\n  public PluginBag(Class<T> klass, SolrCore core, boolean needThreadSafety) {\n    this.core = core;\n    this.klass = klass;\n    // TODO: since reads will dominate writes, we could also think about creating a new instance of a map each time it changes.\n    // Not sure how much benefit this would have over ConcurrentHashMap though\n    // We could also perhaps make this constructor into a factory method to return different implementations depending on thread safety needs.\n    this.registry = needThreadSafety ? new ConcurrentHashMap<>() : new HashMap<>();\n    this.immutableRegistry = Collections.unmodifiableMap(registry);\n    meta = SolrConfig.classVsSolrPluginInfo.get(klass.getName());\n    if (meta == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Plugin : \" + klass.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57a7a3882a7c8834862c3757917f6b4df37425df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["57a7a3882a7c8834862c3757917f6b4df37425df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"57a7a3882a7c8834862c3757917f6b4df37425df":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57a7a3882a7c8834862c3757917f6b4df37425df","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}