{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","commits":[{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291e7b1b82f20848a5b2a21a5353082282e5d925","date":1305408905,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader, false);\n      }\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader);\n      }\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    SegmentReader reader = readerPool.getIfExists(info);\n    try {\n      if (reader != null) {\n        buffer.append(reader.toString());\n      } else {\n        buffer.append(info.toString(directory, 0));\n        if (info.dir != directory) {\n          buffer.append(\"**\");\n        }\n      }\n    } finally {\n      if (reader != null) {\n        readerPool.release(reader, false);\n      }\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a16d06e7522604de20b2d758d9b9464bb30fe02","date":1327070101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98320bb37cc6d20300ebef2f838ed11df399902","date":1327606217,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    StringBuilder buffer = new StringBuilder();\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#segString(SegmentInfo).mjava","sourceNew":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","sourceOld":"  /** @lucene.internal */\n  public synchronized String segString(SegmentInfo info) throws IOException {\n    return info.toString(info.dir, numDeletedDocs(info) - info.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"291e7b1b82f20848a5b2a21a5353082282e5d925":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["291e7b1b82f20848a5b2a21a5353082282e5d925"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e98320bb37cc6d20300ebef2f838ed11df399902"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","e98320bb37cc6d20300ebef2f838ed11df399902"],"e98320bb37cc6d20300ebef2f838ed11df399902":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","291e7b1b82f20848a5b2a21a5353082282e5d925"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","291e7b1b82f20848a5b2a21a5353082282e5d925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a16d06e7522604de20b2d758d9b9464bb30fe02":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"291e7b1b82f20848a5b2a21a5353082282e5d925":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"e98320bb37cc6d20300ebef2f838ed11df399902":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["291e7b1b82f20848a5b2a21a5353082282e5d925","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["fd92b8bcc88e969302510acf77bd6970da3994c4","e98320bb37cc6d20300ebef2f838ed11df399902","8a16d06e7522604de20b2d758d9b9464bb30fe02"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8a16d06e7522604de20b2d758d9b9464bb30fe02":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817","8a16d06e7522604de20b2d758d9b9464bb30fe02"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}