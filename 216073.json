{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/LeaderRecoveryWatcher#onStateChanged(Set[String],DocCollection).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/LeaderRecoveryWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderRecoveryWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (collectionState == null) { // collection has been deleted - don't wait\n      latch.countDown();\n      return true;\n    }\n    Slice slice = collectionState.getSlice(shardId);\n    if (slice == null) { // shard has been removed - don't wait\n      latch.countDown();\n      return true;\n    }\n    for (Replica replica : slice.getReplicas()) {\n      // check if another replica exists - doesn't have to be the one we're moving\n      // as long as it's active and can become a leader, in which case we don't have to wait\n      // for recovery of specifically the one that we've just added\n      if (!replica.getName().equals(replicaId)) {\n        if (replica.getType().equals(Replica.Type.PULL)) { // not eligible for leader election\n          continue;\n        }\n        // check its state\n        String coreName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        if (targetCore != null && !targetCore.equals(coreName)) {\n          continue;\n        }\n        if (replica.isActive(liveNodes)) { // recovered - stop waiting\n          latch.countDown();\n          return true;\n        }\n      }\n    }\n    // set the watch again to wait for the new replica to recover\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (collectionState == null) { // collection has been deleted - don't wait\n      latch.countDown();\n      return true;\n    }\n    Slice slice = collectionState.getSlice(shardId);\n    if (slice == null) { // shard has been removed - don't wait\n      latch.countDown();\n      return true;\n    }\n    for (Replica replica : slice.getReplicas()) {\n      // check if another replica exists - doesn't have to be the one we're moving\n      // as long as it's active and can become a leader, in which case we don't have to wait\n      // for recovery of specifically the one that we've just added\n      if (!replica.getName().equals(replicaId)) {\n        if (replica.getType().equals(Replica.Type.PULL)) { // not eligible for leader election\n          continue;\n        }\n        // check its state\n        String coreName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        if (targetCore != null && !targetCore.equals(coreName)) {\n          continue;\n        }\n        if (replica.isActive(liveNodes)) { // recovered - stop waiting\n          latch.countDown();\n          return true;\n        }\n      }\n    }\n    // set the watch again to wait for the new replica to recover\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/LeaderRecoveryWatcher#onStateChanged(Set[String],DocCollection).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderRecoveryWatcher#onStateChanged(Set[String],DocCollection).mjava","sourceNew":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (collectionState == null) { // collection has been deleted - don't wait\n      latch.countDown();\n      return true;\n    }\n    Slice slice = collectionState.getSlice(shardId);\n    if (slice == null) { // shard has been removed - don't wait\n      latch.countDown();\n      return true;\n    }\n    for (Replica replica : slice.getReplicas()) {\n      // check if another replica exists - doesn't have to be the one we're moving\n      // as long as it's active and can become a leader, in which case we don't have to wait\n      // for recovery of specifically the one that we've just added\n      if (!replica.getName().equals(replicaId)) {\n        if (replica.getType().equals(Replica.Type.PULL)) { // not eligible for leader election\n          continue;\n        }\n        // check its state\n        String coreName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        if (targetCore != null && !targetCore.equals(coreName)) {\n          continue;\n        }\n        if (replica.isActive(liveNodes)) { // recovered - stop waiting\n          latch.countDown();\n          return true;\n        }\n      }\n    }\n    // set the watch again to wait for the new replica to recover\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n    if (collectionState == null) { // collection has been deleted - don't wait\n      latch.countDown();\n      return true;\n    }\n    Slice slice = collectionState.getSlice(shardId);\n    if (slice == null) { // shard has been removed - don't wait\n      latch.countDown();\n      return true;\n    }\n    for (Replica replica : slice.getReplicas()) {\n      // check if another replica exists - doesn't have to be the one we're moving\n      // as long as it's active and can become a leader, in which case we don't have to wait\n      // for recovery of specifically the one that we've just added\n      if (!replica.getName().equals(replicaId)) {\n        if (replica.getType().equals(Replica.Type.PULL)) { // not eligible for leader election\n          continue;\n        }\n        // check its state\n        String coreName = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n        if (targetCore != null && !targetCore.equals(coreName)) {\n          continue;\n        }\n        if (replica.isActive(liveNodes)) { // recovered - stop waiting\n          latch.countDown();\n          return true;\n        }\n      }\n    }\n    // set the watch again to wait for the new replica to recover\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}