{"path":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#mergeRecords(MergeContext,BytesRefConsumer,List[SortedSourceSlice]).mjava","commits":[{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#mergeRecords(MergeContext,BytesRefConsumer,List[SortedSourceSlice]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#mergeRecords(MergeContext,IndexOutput,List[SortedSourceSlice]).mjava","sourceNew":"  public static int mergeRecords(MergeContext ctx, BytesRefConsumer consumer,\n      List<SortedSourceSlice> slices) throws IOException {\n    final RecordMerger merger = new RecordMerger(new MergeQueue(slices.size(),\n        ctx.comp), slices.toArray(new SortedSourceSlice[0]));\n    long[] offsets = ctx.offsets;\n    final boolean recordOffsets = offsets != null;\n    long offset = 0;\n    BytesRef currentMergedBytes;\n    merger.pushTop();\n    while (merger.queue.size() > 0) {\n      merger.pullTop();\n      currentMergedBytes = merger.current;\n      assert ctx.sizePerValues == -1 || ctx.sizePerValues == currentMergedBytes.length : \"size: \"\n          + ctx.sizePerValues + \" spare: \" + currentMergedBytes.length;\n      offset += currentMergedBytes.length;\n      if (recordOffsets) {\n        if (merger.currentOrd >= offsets.length) {\n          offsets = ArrayUtil.grow(offsets, merger.currentOrd + 1);\n        }\n        offsets[merger.currentOrd] = offset;\n      }\n      consumer.consume(currentMergedBytes, merger.currentOrd, offset);\n      merger.pushTop();\n    }\n    ctx.offsets = offsets;\n    assert offsets == null || offsets[merger.currentOrd - 1] == offset;\n    return merger.currentOrd;\n  }\n\n","sourceOld":"  public static int mergeRecords(MergeContext ctx, IndexOutput datOut,\n      List<SortedSourceSlice> slices) throws IOException {\n    final RecordMerger merger = new RecordMerger(new MergeQueue(slices.size(),\n        ctx.comp), slices.toArray(new SortedSourceSlice[0]));\n    long[] offsets = ctx.offsets;\n    final boolean recordOffsets = offsets != null;\n    long offset = 0;\n    BytesRef currentMergedBytes;\n    merger.pushTop();\n    while (merger.queue.size() > 0) {\n      merger.pullTop();\n      currentMergedBytes = merger.current;\n      assert ctx.sizePerValues == -1 || ctx.sizePerValues == currentMergedBytes.length : \"size: \"\n          + ctx.sizePerValues + \" spare: \" + currentMergedBytes.length;\n\n      if (recordOffsets) {\n        offset += currentMergedBytes.length;\n        if (merger.currentOrd >= offsets.length) {\n          offsets = ArrayUtil.grow(offsets, merger.currentOrd + 1);\n        }\n        offsets[merger.currentOrd] = offset;\n      }\n      datOut.writeBytes(currentMergedBytes.bytes, currentMergedBytes.offset,\n          currentMergedBytes.length);\n      merger.pushTop();\n    }\n    ctx.offsets = offsets;\n    assert offsets == null || offsets[merger.currentOrd - 1] == offset;\n    return merger.currentOrd;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#mergeRecords(MergeContext,BytesRefConsumer,List[SortedSourceSlice]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#mergeRecords(MergeContext,BytesRefConsumer,List[SortedSourceSlice]).mjava","sourceNew":"  public static int mergeRecords(MergeContext ctx, BytesRefConsumer consumer,\n      List<SortedSourceSlice> slices) throws IOException {\n    final RecordMerger merger = new RecordMerger(new MergeQueue(slices.size(),\n        ctx.comp), slices.toArray(new SortedSourceSlice[0]));\n    long[] offsets = ctx.offsets;\n    final boolean recordOffsets = offsets != null;\n    long offset = 0;\n    BytesRef currentMergedBytes;\n    merger.pushTop();\n    while (merger.queue.size() > 0) {\n      merger.pullTop();\n      currentMergedBytes = merger.current;\n      assert ctx.sizePerValues == -1 || ctx.sizePerValues == currentMergedBytes.length : \"size: \"\n          + ctx.sizePerValues + \" spare: \" + currentMergedBytes.length;\n      offset += currentMergedBytes.length;\n      if (recordOffsets) {\n        if (merger.currentOrd >= offsets.length) {\n          offsets = ArrayUtil.grow(offsets, merger.currentOrd + 1);\n        }\n        offsets[merger.currentOrd] = offset;\n      }\n      consumer.consume(currentMergedBytes, merger.currentOrd, offset);\n      merger.pushTop();\n    }\n    ctx.offsets = offsets;\n    assert offsets == null || offsets[merger.currentOrd - 1] == offset;\n    return merger.currentOrd;\n  }\n\n","sourceOld":"  public static int mergeRecords(MergeContext ctx, BytesRefConsumer consumer,\n      List<SortedSourceSlice> slices) throws IOException {\n    final RecordMerger merger = new RecordMerger(new MergeQueue(slices.size(),\n        ctx.comp), slices.toArray(new SortedSourceSlice[0]));\n    long[] offsets = ctx.offsets;\n    final boolean recordOffsets = offsets != null;\n    long offset = 0;\n    BytesRef currentMergedBytes;\n    merger.pushTop();\n    while (merger.queue.size() > 0) {\n      merger.pullTop();\n      currentMergedBytes = merger.current;\n      assert ctx.sizePerValues == -1 || ctx.sizePerValues == currentMergedBytes.length : \"size: \"\n          + ctx.sizePerValues + \" spare: \" + currentMergedBytes.length;\n      offset += currentMergedBytes.length;\n      if (recordOffsets) {\n        if (merger.currentOrd >= offsets.length) {\n          offsets = ArrayUtil.grow(offsets, merger.currentOrd + 1);\n        }\n        offsets[merger.currentOrd] = offset;\n      }\n      consumer.consume(currentMergedBytes, merger.currentOrd, offset);\n      merger.pushTop();\n    }\n    ctx.offsets = offsets;\n    assert offsets == null || offsets[merger.currentOrd - 1] == offset;\n    return merger.currentOrd;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}