{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":null,"sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":null,"sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":null,"sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    final Directory dir2 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir2, true);\n    IndexReader r1 = IndexReader.open(dir1, false);\n    IndexReader r2 = IndexReader.open(dir2, false);\n\n    ParallelReader pr1 = new ParallelReader();\n    pr1.add(r1);\n    pr1.add(r2);\n\n    performDefaultTests(pr1);\n    pr1.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef53d1d25057e41eff3dce2a7f3e880a78ed7069","date":1323523707,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = createIndex(0);\n    final IndexReader r1 = IndexReader.open(dir1);\n    final Directory dir2 = createIndex(1);\n    final IndexReader r2 = IndexReader.open(dir2);\n    final ParallelReader pr = new ParallelReader();\n    pr.add(r1);\n    pr.add(r2);\n    performDefaultTests(pr);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = createIndex(0);\n    final IndexReader r1 = IndexReader.open(dir1);\n    final Directory dir2 = createIndex(1);\n    final IndexReader r2 = IndexReader.open(dir2);\n    final ParallelReader pr = new ParallelReader();\n    pr.add(r1);\n    pr.add(r2);\n    performDefaultTests(pr);\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testParallelReader().mjava","sourceNew":null,"sourceOld":"  public void testParallelReader() throws Exception {\n    final Directory dir1 = createIndex(0);\n    final IndexReader r1 = IndexReader.open(dir1);\n    final Directory dir2 = createIndex(1);\n    final IndexReader r2 = IndexReader.open(dir2);\n    final ParallelReader pr = new ParallelReader();\n    pr.add(r1);\n    pr.add(r2);\n    performDefaultTests(pr);\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1f653cfcf159baeaafe5d01682a911e95bba4012","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1f653cfcf159baeaafe5d01682a911e95bba4012","4122a26e1fd0457a340616673a3d3aada370f713"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"4122a26e1fd0457a340616673a3d3aada370f713":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","ef53d1d25057e41eff3dce2a7f3e880a78ed7069"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ef53d1d25057e41eff3dce2a7f3e880a78ed7069":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","9ce667c6d3400b22523701c549c0d35e26da8b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}