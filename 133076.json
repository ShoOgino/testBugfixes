{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"/dev/null","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"/dev/null","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"/dev/null","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, null);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, null);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, null);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), zkClient, reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cef13305654c71e446dae6f0c0ecebcd1886d447","date":1344034044,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n      TimeoutException, IOException, KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    ElectionContext ec = new OverseerElectionContext(new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", address.replaceAll(\"/\", \"_\"), reader);\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7e4f853b998a03d72d5b82562f9aa71ce33c44","date":1393462308,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address) throws InterruptedException,\n TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    // TODO: close Overseer\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer, address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"512e034509e1a4227616f910489a995d4ad813af","date":1393801753,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader,null);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader,null);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(null);\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null, new MockConfigSolr());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), \"/admin/cores\", reader,null);\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(null);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(\n        httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null, new MockConfigSolr());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(null);\n    Overseer overseer = new Overseer(\n        new HttpShardHandlerFactory().getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null, new MockConfigSolr());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(null);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(\n        httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null, new MockConfigSolr());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(null);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(\n        httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null, new MockConfigSolr());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7faee6ec986350688488b9513ac66bb38e260cd3","date":1493189582,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(address, zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":["7faee6ec986350688488b9513ac66bb38e260cd3"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException, NoSuchFieldException, SecurityException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    zkClients.add(zkClient);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(0).close();\n      overseers.get(0).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    ZkController zkController = createMockZkController(address, null, reader);\n    zkControllers.add(zkController);\n    Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(overseers.size() -1).close();\n      overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    MockZkController zkController = createMockZkController(address, zkClient, reader);\n\n    Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":["512e034509e1a4227616f910489a995d4ad813af","cef13305654c71e446dae6f0c0ecebcd1886d447","2d7e4f853b998a03d72d5b82562f9aa71ce33c44","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","7faee6ec986350688488b9513ac66bb38e260cd3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149","date":1586575561,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#electNewOverseer(String).mjava","sourceNew":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException, NoSuchFieldException, SecurityException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    zkClients.add(zkClient);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(0).close();\n      overseers.get(0).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactory.init(new PluginInfo(\"shardHandlerFactory\", Collections.emptyMap()));\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    ZkController zkController = createMockZkController(address, null, reader);\n    zkControllers.add(zkController);\n    Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","sourceOld":"  private SolrZkClient electNewOverseer(String address)\n      throws InterruptedException, TimeoutException, IOException,\n      KeeperException, ParserConfigurationException, SAXException, NoSuchFieldException, SecurityException {\n    SolrZkClient zkClient = new SolrZkClient(address, TIMEOUT);\n    zkClients.add(zkClient);\n    ZkStateReader reader = new ZkStateReader(zkClient);\n    readers.add(reader);\n    LeaderElector overseerElector = new LeaderElector(zkClient);\n    if (overseers.size() > 0) {\n      overseers.get(0).close();\n      overseers.get(0).getZkStateReader().getZkClient().close();\n    }\n    UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n    updateShardHandlers.add(updateShardHandler);\n    HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n    httpShardHandlerFactorys.add(httpShardHandlerFactory);\n\n    ZkController zkController = createMockZkController(address, null, reader);\n    zkControllers.add(zkController);\n    Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n        new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n    overseers.add(overseer);\n    ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n        address.replaceAll(\"/\", \"_\"));\n    overseerElector.setup(ec);\n    overseerElector.joinElection(ec, false);\n    return zkClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["e15199583d3635cb940942caed05132dd6c4c7c6","7faee6ec986350688488b9513ac66bb38e260cd3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["9e6c873b95174ff04c895232927baa76a95925eb","2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"e15199583d3635cb940942caed05132dd6c4c7c6":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","e15199583d3635cb940942caed05132dd6c4c7c6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5b15576cafd8b5d06857055c28f26912321937e3":["512e034509e1a4227616f910489a995d4ad813af"],"d82832af39f94dbb58a3130fd216ff1d49435589":["cef13305654c71e446dae6f0c0ecebcd1886d447","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["cef13305654c71e446dae6f0c0ecebcd1886d447"],"cef13305654c71e446dae6f0c0ecebcd1886d447":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"512e034509e1a4227616f910489a995d4ad813af":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e15199583d3635cb940942caed05132dd6c4c7c6","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"5eb2511ababf862ea11e10761c70ee560cd84510":["512e034509e1a4227616f910489a995d4ad813af","5b15576cafd8b5d06857055c28f26912321937e3"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["9e6c873b95174ff04c895232927baa76a95925eb"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["cef13305654c71e446dae6f0c0ecebcd1886d447","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cef13305654c71e446dae6f0c0ecebcd1886d447"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9e6c873b95174ff04c895232927baa76a95925eb":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["5b15576cafd8b5d06857055c28f26912321937e3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"7faee6ec986350688488b9513ac66bb38e260cd3":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","cef13305654c71e446dae6f0c0ecebcd1886d447"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["88f39c3b3a16aebc5a91335341c7ad5b560e2277","9e6c873b95174ff04c895232927baa76a95925eb"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"e15199583d3635cb940942caed05132dd6c4c7c6":["c304e97e7c1d472bc70e801b35ee78583916c6cd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","560c18d71dad43d675158783c3840f8c80d6d39c","7faee6ec986350688488b9513ac66bb38e260cd3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb2511ababf862ea11e10761c70ee560cd84510","0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cef13305654c71e446dae6f0c0ecebcd1886d447":["d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277","db4fdbf3d262768eabc027cd8321edca0cd11fa8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"512e034509e1a4227616f910489a995d4ad813af":["5b15576cafd8b5d06857055c28f26912321937e3","5eb2511ababf862ea11e10761c70ee560cd84510"],"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","512e034509e1a4227616f910489a995d4ad813af"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["cef13305654c71e446dae6f0c0ecebcd1886d447","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9e6c873b95174ff04c895232927baa76a95925eb":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","2d7e4f853b998a03d72d5b82562f9aa71ce33c44","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"7faee6ec986350688488b9513ac66bb38e260cd3":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","d82832af39f94dbb58a3130fd216ff1d49435589","5eb2511ababf862ea11e10761c70ee560cd84510","db4fdbf3d262768eabc027cd8321edca0cd11fa8","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}