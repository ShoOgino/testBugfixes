{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","commits":[{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, true));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, false); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, true));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, false); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, true));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, false); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, true));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, false); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, true));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, false); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermContext.build(reader.getContext(), new Term(\"foo\", \"bar\")));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createWeight(noSeekSearcher.rewrite(query), ScoreMode.COMPLETE, 1));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createWeight(noSeekSearcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testCreateWeightDoesNotSeekIfScoresAreNotNeeded().mjava","sourceNew":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createWeight(noSeekSearcher.rewrite(query), ScoreMode.COMPLETE, 1));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createWeight(noSeekSearcher.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","sourceOld":"  public void testCreateWeightDoesNotSeekIfScoresAreNotNeeded() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    // segment that contains the term\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the term\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.getReader().close();\n    // segment that does not contain the field\n    w.addDocument(new Document());\n\n    DirectoryReader reader = w.getReader();\n    FilterDirectoryReader noSeekReader = new NoSeekDirectoryReader(reader);\n    IndexSearcher noSeekSearcher = new IndexSearcher(noSeekReader);\n    Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    AssertionError e = expectThrows(AssertionError.class,\n        () -> noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE));\n    assertEquals(\"no seek\", e.getMessage());\n\n    noSeekSearcher.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES); // no exception\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // use a collector rather than searcher.count() which would just read the\n    // doc freq instead of creating a scorer\n    TotalHitCountCollector collector = new TotalHitCountCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getTotalHits());\n    TermQuery queryWithContext = new TermQuery(new Term(\"foo\", \"bar\"),\n        TermStates.build(reader.getContext(), new Term(\"foo\", \"bar\"), true));\n    collector = new TotalHitCountCollector();\n    searcher.search(queryWithContext, collector);\n    assertEquals(1, collector.getTotalHits());\n\n    IOUtils.close(reader, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","a6e9f769521480a623f897c0d59089b919fa4239"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["b94236357aaa22b76c10629851fe4e376e0cea82","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a6e9f769521480a623f897c0d59089b919fa4239":["417142ff08fda9cf0b72d5133e63097a166c6458"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["35d7ed691d627802acc5be44a639b67b1360467b"],"35d7ed691d627802acc5be44a639b67b1360467b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ce8de354eb40085752030725cb2bee2b0ae536c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d7ed691d627802acc5be44a639b67b1360467b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["35d7ed691d627802acc5be44a639b67b1360467b","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"35d7ed691d627802acc5be44a639b67b1360467b":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}