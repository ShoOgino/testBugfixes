{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentInfoPerCommit).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentInfoPerCommit info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndLiveDocs rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1926100d9b67becc9701c54266fee3ba7878a5f0","date":1524472150,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = readerPool.get(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef2a94da918b657d107b616a643e1759db43b6a","date":1527706131,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      int delCount = info.getDelCount();\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    int delCount = info.getDelCount();\n\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      delCount += rld.getPendingDeleteCount();\n    }\n    assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      final int delCount = info.getDelCount(softDeletesEnabled);\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      int delCount = info.getDelCount();\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      final int delCount = info.getDelCount(softDeletesEnabled);\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      int delCount = info.getDelCount();\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#numDeletedDocs(SegmentCommitInfo).mjava","sourceNew":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      final int delCount = info.getDelCount(softDeletesEnabled);\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain the number of deleted docs for a pooled reader.\n   * If the reader isn't being pooled, the segmentInfo's \n   * delCount is returned.\n   */\n  @Override\n  public int numDeletedDocs(SegmentCommitInfo info) {\n    ensureOpen(false);\n    validate(info);\n    final ReadersAndUpdates rld = getPooledInstance(info, false);\n    if (rld != null) {\n      return rld.getDelCount(); // get the full count from here since SCI might change concurrently\n    } else {\n      int delCount = info.getDelCount();\n      assert delCount <= info.info.maxDoc(): \"delCount: \" + delCount + \" maxDoc: \" + info.info.maxDoc();\n      return delCount;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["aef2a94da918b657d107b616a643e1759db43b6a","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"1d28f215464f76024caf026606f8ea51a5319c53":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["aef2a94da918b657d107b616a643e1759db43b6a"],"aef2a94da918b657d107b616a643e1759db43b6a":["1d28f215464f76024caf026606f8ea51a5319c53"],"f592209545c71895260367152601e9200399776d":["aef2a94da918b657d107b616a643e1759db43b6a","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["1926100d9b67becc9701c54266fee3ba7878a5f0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1d28f215464f76024caf026606f8ea51a5319c53":["aef2a94da918b657d107b616a643e1759db43b6a"],"1926100d9b67becc9701c54266fee3ba7878a5f0":["1d28f215464f76024caf026606f8ea51a5319c53"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aef2a94da918b657d107b616a643e1759db43b6a":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}