{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30898a79d4bce815d5551a8a22c32e88f1972cb9","date":1298740268,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41a7130051d507b3a37c0b9f41f5937dfed6a88e","date":1302628279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      arc.target = FINAL_END_NODE;\n      arc.flags |= BIT_FINAL_ARC;\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["30898a79d4bce815d5551a8a22c32e88f1972cb9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["30898a79d4bce815d5551a8a22c32e88f1972cb9","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["56da903869515527852ee21ea7ef7bfe414cd40d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","30898a79d4bce815d5551a8a22c32e88f1972cb9","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["41a7130051d507b3a37c0b9f41f5937dfed6a88e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}