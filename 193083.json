{"path":"backwards/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/MappingCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}