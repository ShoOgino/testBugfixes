{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","commits":[{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","pathOld":"/dev/null","sourceNew":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2a3d399196ef98f25b42979a18ac694a428c161","date":1533647996,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","sourceNew":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","sourceOld":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","sourceNew":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      assert closeable != null;\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","sourceOld":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","sourceNew":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new NIOFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      assert closeable != null;\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","sourceOld":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      assert closeable != null;\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testPendingDeleteDVGeneration().mjava","sourceNew":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new NIOFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      assert closeable != null;\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","sourceOld":"  public void testPendingDeleteDVGeneration() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n\n    Path path = createTempDir();\n\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n\n    // MMapDirectory doesn't work because it closes its file handles after mapping!\n    List<Closeable> toClose = new ArrayList<>();\n    try (FSDirectory dir = new SimpleFSDirectory(root);\n         Closeable closeable = () -> IOUtils.close(toClose)) {\n      assert closeable != null;\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n          .setUseCompoundFile(false)\n          .setMergePolicy(NoMergePolicy.INSTANCE) // avoid merging away the randomFile\n          .setMaxBufferedDocs(2)\n          .setRAMBufferSizeMB(-1);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(d);\n      d = new Document();\n      d.add(new StringField(\"id\", \"2\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 2));\n      w.addDocument(d);\n      w.flush();\n      d = new Document();\n      d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n      d.add(new NumericDocValuesField(\"id\", 1));\n      w.updateDocument(new Term(\"id\", \"1\"), d);\n      w.commit();\n      Set<String> files = new HashSet<>(Arrays.asList(dir.listAll()));\n      int numIters = 10 + random().nextInt(50);\n      for (int i = 0; i < numIters; i++) {\n        if (random().nextBoolean()) {\n          d = new Document();\n          d.add(new StringField(\"id\", \"1\", Field.Store.YES));\n          d.add(new NumericDocValuesField(\"id\", 1));\n          w.updateDocument(new Term(\"id\", \"1\"), d);\n        } else if (random().nextBoolean()) {\n          w.deleteDocuments(new Term(\"id\", \"2\"));\n        } else {\n          w.updateNumericDocValue(new Term(\"id\", \"1\"), \"id\", 2);\n        }\n        w.prepareCommit();\n        List<String> newFiles = new ArrayList<>(Arrays.asList(dir.listAll()));\n        newFiles.removeAll(files);\n        String randomFile = RandomPicks.randomFrom(random(), newFiles);\n        toClose.add(dir.openInput(randomFile, IOContext.DEFAULT));\n        w.rollback();\n        iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n            .setUseCompoundFile(false)\n            .setMergePolicy(NoMergePolicy.INSTANCE)\n            .setMaxBufferedDocs(2)\n            .setRAMBufferSizeMB(-1);\n        w = new IndexWriter(dir, iwc);\n        expectThrows(NoSuchFileException.class, () -> {\n          dir.deleteFile(randomFile);\n        });\n      }\n      w.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2a3d399196ef98f25b42979a18ac694a428c161":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["30c21918ef3ad23e254f39cb0cd6c86851fcb993","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["f2a3d399196ef98f25b42979a18ac694a428c161"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2a3d399196ef98f25b42979a18ac694a428c161":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["f2a3d399196ef98f25b42979a18ac694a428c161"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}