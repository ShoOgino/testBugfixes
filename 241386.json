{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["b4e0d3f6116e64a8ab4c338fed19498407856738","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","sourceNew":null,"sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LONG_POINT_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.FLOAT_POINT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.DOUBLE_POINT_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    BytesRef scratch = binaries.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    scratch = sorted.get(0);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\", null);\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}