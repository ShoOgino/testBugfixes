{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      doc.add(newField(\"body\", sb.toString(), TextField.TYPE_UNSTORED));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(_TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.INSTANCE).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMergePolicy(NoMergePolicy.INSTANCE).setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd84fc27ddcf3c87338af483b868cd2d638fc290","date":1427992722,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)\n                                       // always use CFS so we don't use tons of file handles in the test\n                                       .setUseCompoundFile(true)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"757c36c4e385e0dfd715c89cb1e1f7b0512e12c3","date":1427993039,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testApplyDeletesOnFlush().mjava","sourceNew":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)\n                                       // always use CFS so we don't use tons of file handles in the test\n                                       .setUseCompoundFile(true)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure buffered (pushed) deletes don't use up so\n  // much RAM that it forces long tail of tiny segments:\n  @Nightly\n  public void testApplyDeletesOnFlush() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final AtomicInteger docsInSegment = new AtomicInteger();\n    final AtomicBoolean closing = new AtomicBoolean();\n    final AtomicBoolean sawAfterFlush = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                       .setRAMBufferSizeMB(0.5)\n                                       .setMaxBufferedDocs(-1)\n                                       .setMergePolicy(NoMergePolicy.INSTANCE)\n                                       .setReaderPooling(false)) {\n        @Override\n        public void doAfterFlush() {\n          assertTrue(\"only \" + docsInSegment.get() + \" in segment\", closing.get() || docsInSegment.get() >= 7);\n          docsInSegment.set(0);\n          sawAfterFlush.set(true);\n        }\n      };\n    int id = 0;\n    while(true) {\n      StringBuilder sb = new StringBuilder();\n      for(int termIDX=0;termIDX<100;termIDX++) {\n        sb.append(' ').append(TestUtil.randomRealisticUnicodeString(random()));\n      }\n      if (id == 500) {\n        w.deleteDocuments(new Term(\"id\", \"0\"));\n      }\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n      w.updateDocument(new Term(\"id\", \"\"+id), doc);\n      docsInSegment.incrementAndGet();\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: deletes created @ id=\" + id);\n        }\n        break;\n      }\n      id++;\n    }\n    closing.set(true);\n    assertTrue(sawAfterFlush.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd84fc27ddcf3c87338af483b868cd2d638fc290":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd84fc27ddcf3c87338af483b868cd2d638fc290"],"757c36c4e385e0dfd715c89cb1e1f7b0512e12c3":["d0ef034a4f10871667ae75181537775ddcf8ade4","cd84fc27ddcf3c87338af483b868cd2d638fc290"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd84fc27ddcf3c87338af483b868cd2d638fc290":["cd5edd1f2b162a5cfa08efd17851a07373a96817","757c36c4e385e0dfd715c89cb1e1f7b0512e12c3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd84fc27ddcf3c87338af483b868cd2d638fc290","757c36c4e385e0dfd715c89cb1e1f7b0512e12c3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"757c36c4e385e0dfd715c89cb1e1f7b0512e12c3":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","757c36c4e385e0dfd715c89cb1e1f7b0512e12c3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}