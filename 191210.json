{"path":"src/java/org/apache/lucene/analysis/TokenStream#initTokenWrapper(AttributeSource).mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#initTokenWrapper(AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  /** @deprecated Remove this when old API is removed! */\n  private TokenWrapper initTokenWrapper(AttributeSource input) {\n    if (onlyUseNewAPI) {\n      // no wrapper needed\n      return null;\n    } else {\n      // if possible get the wrapper from the filter's input stream\n      if (input instanceof TokenStream && ((TokenStream) input).tokenWrapper != null) {\n        return ((TokenStream) input).tokenWrapper;\n      }\n      // check that all attributes are implemented by the same TokenWrapper instance\n      final AttributeImpl att = addAttribute(TermAttribute.class);\n      if (att instanceof TokenWrapper &&\n        addAttribute(TypeAttribute.class) == att &&\n        addAttribute(PositionIncrementAttribute.class) == att &&\n        addAttribute(FlagsAttribute.class) == att &&\n        addAttribute(OffsetAttribute.class) == att &&\n        addAttribute(PayloadAttribute.class) == att\n      ) {\n        return (TokenWrapper) att;\n      } else {\n        throw new UnsupportedOperationException(\n          \"If onlyUseNewAPI is disabled, all basic Attributes must be implemented by the internal class \"+\n          \"TokenWrapper. Please make sure, that all TokenStreams/TokenFilters in this chain have been \"+\n          \"instantiated with this flag disabled and do not add any custom instances for the basic Attributes!\"\n        );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4","date":1250856706,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#initTokenWrapper(AttributeSource).mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#initTokenWrapper(AttributeSource).mjava","sourceNew":"  /** @deprecated Remove this when old API is removed! */\n  private TokenWrapper initTokenWrapper(AttributeSource input) {\n    if (onlyUseNewAPI) {\n      // no wrapper needed\n      return null;\n    } else {\n      // if possible get the wrapper from the filter's input stream\n      if (input instanceof TokenStream && ((TokenStream) input).tokenWrapper != null) {\n        return ((TokenStream) input).tokenWrapper;\n      }\n      // check that all attributes are implemented by the same TokenWrapper instance\n      final Attribute att = addAttribute(TermAttribute.class);\n      if (att instanceof TokenWrapper &&\n        addAttribute(TypeAttribute.class) == att &&\n        addAttribute(PositionIncrementAttribute.class) == att &&\n        addAttribute(FlagsAttribute.class) == att &&\n        addAttribute(OffsetAttribute.class) == att &&\n        addAttribute(PayloadAttribute.class) == att\n      ) {\n        return (TokenWrapper) att;\n      } else {\n        throw new UnsupportedOperationException(\n          \"If onlyUseNewAPI is disabled, all basic Attributes must be implemented by the internal class \"+\n          \"TokenWrapper. Please make sure, that all TokenStreams/TokenFilters in this chain have been \"+\n          \"instantiated with this flag disabled and do not add any custom instances for the basic Attributes!\"\n        );\n      }\n    }\n  }\n\n","sourceOld":"  /** @deprecated Remove this when old API is removed! */\n  private TokenWrapper initTokenWrapper(AttributeSource input) {\n    if (onlyUseNewAPI) {\n      // no wrapper needed\n      return null;\n    } else {\n      // if possible get the wrapper from the filter's input stream\n      if (input instanceof TokenStream && ((TokenStream) input).tokenWrapper != null) {\n        return ((TokenStream) input).tokenWrapper;\n      }\n      // check that all attributes are implemented by the same TokenWrapper instance\n      final AttributeImpl att = addAttribute(TermAttribute.class);\n      if (att instanceof TokenWrapper &&\n        addAttribute(TypeAttribute.class) == att &&\n        addAttribute(PositionIncrementAttribute.class) == att &&\n        addAttribute(FlagsAttribute.class) == att &&\n        addAttribute(OffsetAttribute.class) == att &&\n        addAttribute(PayloadAttribute.class) == att\n      ) {\n        return (TokenWrapper) att;\n      } else {\n        throw new UnsupportedOperationException(\n          \"If onlyUseNewAPI is disabled, all basic Attributes must be implemented by the internal class \"+\n          \"TokenWrapper. Please make sure, that all TokenStreams/TokenFilters in this chain have been \"+\n          \"instantiated with this flag disabled and do not add any custom instances for the basic Attributes!\"\n        );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#initTokenWrapper(AttributeSource).mjava","sourceNew":null,"sourceOld":"  /** @deprecated Remove this when old API is removed! */\n  private TokenWrapper initTokenWrapper(AttributeSource input) {\n    if (onlyUseNewAPI) {\n      // no wrapper needed\n      return null;\n    } else {\n      // if possible get the wrapper from the filter's input stream\n      if (input instanceof TokenStream && ((TokenStream) input).tokenWrapper != null) {\n        return ((TokenStream) input).tokenWrapper;\n      }\n      // check that all attributes are implemented by the same TokenWrapper instance\n      final Attribute att = addAttribute(TermAttribute.class);\n      if (att instanceof TokenWrapper &&\n        addAttribute(TypeAttribute.class) == att &&\n        addAttribute(PositionIncrementAttribute.class) == att &&\n        addAttribute(FlagsAttribute.class) == att &&\n        addAttribute(OffsetAttribute.class) == att &&\n        addAttribute(PayloadAttribute.class) == att\n      ) {\n        return (TokenWrapper) att;\n      } else {\n        throw new UnsupportedOperationException(\n          \"If onlyUseNewAPI is disabled, all basic Attributes must be implemented by the internal class \"+\n          \"TokenWrapper. Please make sure, that all TokenStreams/TokenFilters in this chain have been \"+\n          \"instantiated with this flag disabled and do not add any custom instances for the basic Attributes!\"\n        );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}