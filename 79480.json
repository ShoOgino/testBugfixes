{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#remove(int).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#remove(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(int key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#remove(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(int key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#remove(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#remove(int).mjava","sourceNew":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(int key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","sourceOld":"  /**\n   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,\n   * or {@link Float#NaN} if the none existed.\n   * \n   * @param key used to find the value to remove\n   * @return the removed value or {@link Float#NaN} if none existed.\n   */\n  public float remove(int key) {\n    int baseHashIndex = calcBaseHashIndex(key);\n    int index = findForRemove(key, baseHashIndex);\n    if (index != 0) {\n      // If it is the first in the collision list, we should promote its\n      // next colliding element.\n      if (prev == 0) {\n        baseHash[baseHashIndex] = next[index];\n      }\n\n      next[prev] = next[index];\n      next[index] = firstEmpty;\n      firstEmpty = index;\n      --size;\n      return values[index];\n    }\n\n    return Float.NaN;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}