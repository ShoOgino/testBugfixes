{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","commits":[{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   * \n   * @param zkClusterStateVersion\n   * @param liveNodes\n   * @param collectionStates\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   * \n   * @param zkClusterStateVersion\n   * @param liveNodes\n   * @param collectionStates\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   * \n   * @param zkClusterStateVersion\n   * @param liveNodes\n   * @param collectionStates\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   * \n   * @param zkClusterStateVersion\n   * @param liveNodes\n   * @param collectionStates\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, DocCollection> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, DocCollection>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n  }\n\n","sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#ClusterState(Integer,Set[String],Map[String,Map[String,Slice]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use this constr when ClusterState is meant for consumption.\n   */\n  public ClusterState(Integer zkClusterStateVersion, Set<String> liveNodes,\n      Map<String, Map<String,Slice>> collectionStates) {\n    this.zkClusterStateVersion = zkClusterStateVersion;\n    this.liveNodes = new HashSet<String>(liveNodes.size());\n    this.liveNodes.addAll(liveNodes);\n    this.collectionStates = new HashMap<String, Map<String,Slice>>(collectionStates.size());\n    this.collectionStates.putAll(collectionStates);\n    addRangeInfos(collectionStates.keySet());\n    getShardLeaders();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"da94fd5fcff99442877e118f00fb42094b59f497":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a558d54519c651068ddb202f03befefb1514a7"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"da94fd5fcff99442877e118f00fb42094b59f497":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}