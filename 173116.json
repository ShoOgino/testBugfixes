{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryReplicaType(CloudHttp2SolrClient,Replica.Type,String).mjava","commits":[{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryReplicaType(CloudHttp2SolrClient,Replica.Type,String).mjava","pathOld":"/dev/null","sourceNew":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryReplicaType(CloudHttp2SolrClient,Replica.Type,String).mjava","pathOld":"/dev/null","sourceNew":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryReplicaType(CloudHttp2SolrClient,Replica.Type,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#queryReplicaType(CloudHttp2SolrClient,Replica.Type,String).mjava","sourceNew":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n\n","sourceOld":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    // Iterate over shards-info and check what cores responded\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["9ba1b632c041956c93c41aa1143d16a567014891","993b0c7dda6341b437fe5685d35c6cc35eaac420"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}