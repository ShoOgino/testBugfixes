{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    Spans includeSpans = include.getSpans(context, acceptDocs, termContexts, collector);\n    if (includeSpans == null) {\n      return null;\n    }\n\n    Spans excludeSpans = exclude.getSpans(context, acceptDocs, termContexts, collector);\n    if (excludeSpans == null) {\n      return includeSpans;\n    }\n    \n    TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n    DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n    \n    return new FilterSpans(includeSpans) {\n      // last document we have checked matches() against for the exclusion, and failed\n      // when using approximations, so we don't call it again, and pass thru all inclusions.\n      int lastApproxDoc = -1;\n      boolean lastApproxResult = false;\n      \n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        // TODO: this logic is ugly and sneaky, can we clean it up?\n        int doc = candidate.docID();\n        if (doc > excludeSpans.docID()) {\n          // catch up 'exclude' to the current doc\n          if (excludeTwoPhase != null) {\n            if (excludeApproximation.advance(doc) == doc) {\n              lastApproxDoc = doc;\n              lastApproxResult = excludeTwoPhase.matches();\n            }\n          } else {\n            excludeSpans.advance(doc);\n          }\n        } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n          // excludeSpans already sitting on our candidate doc, but matches not called yet.\n          lastApproxDoc = doc;\n          lastApproxResult = excludeTwoPhase.matches();\n        }\n        \n        if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n          return AcceptStatus.YES;\n        }\n        \n        if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n          excludeSpans.nextStartPosition();\n        }\n        \n        while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n          // exclude end position is before a possible exclusion\n          if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n            return AcceptStatus.YES; // no more exclude at current doc.\n          }\n        }\n        \n        // exclude end position far enough in current doc, check start position:\n        if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts) throws IOException {\n    Spans includeSpans = include.getSpans(context, acceptDocs, termContexts);\n    if (includeSpans == null) {\n      return null;\n    }\n\n    Spans excludeSpans = exclude.getSpans(context, acceptDocs, termContexts);\n    if (excludeSpans == null) {\n      return includeSpans;\n    }\n    \n    TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n    DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n    \n    return new FilterSpans(includeSpans) {\n      // last document we have checked matches() against for the exclusion, and failed\n      // when using approximations, so we don't call it again, and pass thru all inclusions.\n      int lastApproxDoc = -1;\n      boolean lastApproxResult = false;\n      \n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        // TODO: this logic is ugly and sneaky, can we clean it up?\n        int doc = candidate.docID();\n        if (doc > excludeSpans.docID()) {\n          // catch up 'exclude' to the current doc\n          if (excludeTwoPhase != null) {\n            if (excludeApproximation.advance(doc) == doc) {\n              lastApproxDoc = doc;\n              lastApproxResult = excludeTwoPhase.matches();\n            }\n          } else {\n            excludeSpans.advance(doc);\n          }\n        } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n          // excludeSpans already sitting on our candidate doc, but matches not called yet.\n          lastApproxDoc = doc;\n          lastApproxResult = excludeTwoPhase.matches();\n        }\n        \n        if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n          return AcceptStatus.YES;\n        }\n        \n        if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n          excludeSpans.nextStartPosition();\n        }\n        \n        while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n          // exclude end position is before a possible exclusion\n          if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n            return AcceptStatus.YES; // no more exclude at current doc.\n          }\n        }\n        \n        // exclude end position far enough in current doc, check start position:\n        if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, final Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    Spans includeSpans = include.getSpans(context, acceptDocs, termContexts, collector);\n    if (includeSpans == null) {\n      return null;\n    }\n\n    Spans excludeSpans = exclude.getSpans(context, acceptDocs, termContexts, collector);\n    if (excludeSpans == null) {\n      return includeSpans;\n    }\n    \n    TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n    DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n    \n    return new FilterSpans(includeSpans) {\n      // last document we have checked matches() against for the exclusion, and failed\n      // when using approximations, so we don't call it again, and pass thru all inclusions.\n      int lastApproxDoc = -1;\n      boolean lastApproxResult = false;\n      \n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        // TODO: this logic is ugly and sneaky, can we clean it up?\n        int doc = candidate.docID();\n        if (doc > excludeSpans.docID()) {\n          // catch up 'exclude' to the current doc\n          if (excludeTwoPhase != null) {\n            if (excludeApproximation.advance(doc) == doc) {\n              lastApproxDoc = doc;\n              lastApproxResult = excludeTwoPhase.matches();\n            }\n          } else {\n            excludeSpans.advance(doc);\n          }\n        } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n          // excludeSpans already sitting on our candidate doc, but matches not called yet.\n          lastApproxDoc = doc;\n          lastApproxResult = excludeTwoPhase.matches();\n        }\n        \n        if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n          return AcceptStatus.YES;\n        }\n        \n        if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n          excludeSpans.nextStartPosition();\n        }\n        \n        while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n          // exclude end position is before a possible exclusion\n          if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n            return AcceptStatus.YES; // no more exclude at current doc.\n          }\n        }\n        \n        // exclude end position far enough in current doc, check start position:\n        if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}