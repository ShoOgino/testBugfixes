{"path":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","commits":[{"id":"ce70cdb9511a671e0e15d4dc93b8334c86b6e681","date":1542017422,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","pathOld":"/dev/null","sourceNew":"    public MissedUpdatesRequest find(List<Long> leaderVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      leaderVersions.sort(absComparator);\n      log.debug(\"{} sorted versions from {} = {}\", logPrefix, leaderVersions, updateFrom);\n\n      long leaderLowest = leaderVersions.get(leaderVersions.size() - 1);\n      if (Math.abs(ourHighest) < Math.abs(leaderLowest)) {\n        log.info(\"{} Our versions are too old comparing to leader, ourHighest={} otherLowest={}\", logPrefix, ourHighest, leaderLowest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n      // we don't have to check the case we ahead of the leader.\n      // (maybe we are the old leader and we contain some updates that no one have)\n      // In that case, we will fail on compute fingerprint with the current leader and start segments replication\n\n      boolean completeList = leaderVersions.size() < nUpdates;\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(leaderVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(leaderVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested\", logPrefix);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader.MissedUpdatesFinder#find(List[Long],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader.MissedUpdatesFinder#find(List[Long],Object,Supplier[Boolean]).mjava","sourceNew":"    public MissedUpdatesRequest find(List<Long> leaderVersions, Object updateFrom) {\n      leaderVersions.sort(absComparator);\n      log.debug(\"{} sorted versions from {} = {}\", logPrefix, leaderVersions, updateFrom);\n\n      long leaderLowest = leaderVersions.get(leaderVersions.size() - 1);\n      if (Math.abs(ourHighest) < Math.abs(leaderLowest)) {\n        log.info(\"{} Our versions are too old comparing to leader, ourHighest={} otherLowest={}\", logPrefix, ourHighest, leaderLowest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n      // we don't have to check the case we ahead of the leader.\n      // (maybe we are the old leader and we contain some updates that no one have)\n      // In that case, we will fail on compute fingerprint with the current leader and start segments replication\n\n      boolean completeList = leaderVersions.size() < nUpdates;\n      MissedUpdatesRequest updatesRequest = handleVersionsWithRanges(leaderVersions, completeList);\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested\", logPrefix);\n      }\n\n      return updatesRequest;\n    }\n\n","sourceOld":"    public MissedUpdatesRequest find(List<Long> leaderVersions, Object updateFrom, Supplier<Boolean> canHandleVersionRanges) {\n      leaderVersions.sort(absComparator);\n      log.debug(\"{} sorted versions from {} = {}\", logPrefix, leaderVersions, updateFrom);\n\n      long leaderLowest = leaderVersions.get(leaderVersions.size() - 1);\n      if (Math.abs(ourHighest) < Math.abs(leaderLowest)) {\n        log.info(\"{} Our versions are too old comparing to leader, ourHighest={} otherLowest={}\", logPrefix, ourHighest, leaderLowest);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n      // we don't have to check the case we ahead of the leader.\n      // (maybe we are the old leader and we contain some updates that no one have)\n      // In that case, we will fail on compute fingerprint with the current leader and start segments replication\n\n      boolean completeList = leaderVersions.size() < nUpdates;\n      MissedUpdatesRequest updatesRequest;\n      if (canHandleVersionRanges.get()) {\n        updatesRequest = handleVersionsWithRanges(leaderVersions, completeList);\n      } else {\n        updatesRequest = handleIndividualVersions(leaderVersions, completeList);\n      }\n\n      if (updatesRequest.totalRequestedUpdates > nUpdates) {\n        log.info(\"{} PeerSync will fail because number of missed updates is more than:{}\", logPrefix, nUpdates);\n        return MissedUpdatesRequest.UNABLE_TO_SYNC;\n      }\n\n      if (updatesRequest == MissedUpdatesRequest.EMPTY) {\n        log.info(\"{} No additional versions requested\", logPrefix);\n      }\n\n      return updatesRequest;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"]},"commit2Childs":{"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}