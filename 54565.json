{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n    analyzerProps.add(CLASS_NAME, normalizeSPIname(analyzer.getClass().getName()));\n    \n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, normalizeSPIname(charFilterFactory.getClass().getName()));\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, normalizeSPIname(tokenizerFactory.getClass().getName()));\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          tokenizerProps.add(key, factoryArgs.get(key));\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, normalizeSPIname(filterFactory.getClass().getName()));\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1486037b0fcc4d552ab91d319279d41d68fe6a94","3c3d2444349054ee067813f2bec7610c0933009b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ece367783f1064f12ed72eabac9cc1afeb402b3c","date":1364362226,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, getShortName(charFilterFactory.getClass().getName()));\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, getShortName(tokenizerFactory.getClass().getName()));\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          tokenizerProps.add(key, factoryArgs.get(key));\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, getShortName(filterFactory.getClass().getName()));\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n    analyzerProps.add(CLASS_NAME, normalizeSPIname(analyzer.getClass().getName()));\n    \n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, normalizeSPIname(charFilterFactory.getClass().getName()));\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, normalizeSPIname(tokenizerFactory.getClass().getName()));\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          tokenizerProps.add(key, factoryArgs.get(key));\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, normalizeSPIname(filterFactory.getClass().getName()));\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    }\n    return analyzerProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b4b4d68085809ae840a099e4620e5a128509279","date":1365633379,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, getShortName(charFilterFactory.getClass().getName()));\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, getShortName(tokenizerFactory.getClass().getName()));\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          tokenizerProps.add(key, factoryArgs.get(key));\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, getShortName(filterFactory.getClass().getName()));\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              props.add(key, factoryArgs.get(key));\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<Object>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<Object>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<SimpleOrderedMap<Object>>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<Object>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c3d2444349054ee067813f2bec7610c0933009b","date":1434665250,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer name\n   * if it's not a TokenizerChain, or if it is, querying each analysis factory for its\n   * name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n    }\n    return analyzerProps;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1486037b0fcc4d552ab91d319279d41d68fe6a94","date":1437497377,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (0 < charFilterFactories.length) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (0 < filterFactories.length) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (null != charFilterFactories && charFilterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (null != filterFactories && filterFactories.length > 0) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c24804758d67429e3055070a9fe970d4f159954","date":1565508925,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (0 < charFilterFactories.length) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (!factoryArgs.containsKey(TYPE_NAME)) {\n        tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      }\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (0 < filterFactories.length) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, filterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (0 < charFilterFactories.length) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (0 < filterFactories.length) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(CLASS_NAME, filterFactory.getClassArg());\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getAnalyzerProperties(Analyzer).mjava","sourceNew":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (0 < charFilterFactories.length) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {\n              String key = entry.getKey();\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, entry.getValue());\n                  }\n                } else {\n                   props.add(key, entry.getValue());\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (!factoryArgs.containsKey(TYPE_NAME)) {\n        tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      }\n      if (null != factoryArgs) {\n        for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {\n          String key = entry.getKey();\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, entry.getValue());\n              }\n            } else {\n              tokenizerProps.add(key, entry.getValue());\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (0 < filterFactories.length) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, filterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {\n              String key = entry.getKey();\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, entry.getValue());\n                  }\n                } else {\n                  props.add(key, entry.getValue());\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","sourceOld":"  /** \n   * Returns a description of the given analyzer, by either reporting the Analyzer class\n   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,\n   * querying each analysis factory for its name and args.\n   */\n  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {\n    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();\n\n    if (analyzer instanceof TokenizerChain) {\n      Map<String,String> factoryArgs;\n      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;\n      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();\n      if (0 < charFilterFactories.length) {\n        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();\n        for (CharFilterFactory charFilterFactory : charFilterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = charFilterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, charFilterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                   props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          charFilterProps.add(props);\n        }\n        analyzerProps.add(CHAR_FILTERS, charFilterProps);\n      }\n\n      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();\n      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();\n      factoryArgs = tokenizerFactory.getOriginalArgs();\n      if (!factoryArgs.containsKey(TYPE_NAME)) {\n        tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());\n      }\n      if (null != factoryArgs) {\n        for (String key : factoryArgs.keySet()) {\n          if ( ! CLASS_NAME.equals(key)) {\n            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {\n                tokenizerProps.add(key, factoryArgs.get(key));\n              }\n            } else {\n              tokenizerProps.add(key, factoryArgs.get(key));\n            }\n          }\n        }\n      }\n      analyzerProps.add(TOKENIZER, tokenizerProps);\n\n      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();\n      if (0 < filterFactories.length) {\n        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();\n        for (TokenFilterFactory filterFactory : filterFactories) {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          factoryArgs = filterFactory.getOriginalArgs();\n          if (!factoryArgs.containsKey(TYPE_NAME)) {\n            props.add(CLASS_NAME, filterFactory.getClassArg());\n          }\n          if (null != factoryArgs) {\n            for (String key : factoryArgs.keySet()) {\n              if ( ! CLASS_NAME.equals(key)) {\n                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {\n                  if (filterFactory.isExplicitLuceneMatchVersion()) {\n                    props.add(key, factoryArgs.get(key));\n                  }\n                } else {\n                  props.add(key, factoryArgs.get(key));\n                }\n              }\n            }\n          }\n          filterProps.add(props);\n        }\n        analyzerProps.add(FILTERS, filterProps);\n      }\n    } else { // analyzer is not instanceof TokenizerChain\n      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());\n      if (analyzer.getVersion() != Version.LATEST) {\n        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());\n      }\n    }\n    return analyzerProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["3c3d2444349054ee067813f2bec7610c0933009b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9b4b4d68085809ae840a099e4620e5a128509279"],"2c24804758d67429e3055070a9fe970d4f159954":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c3d2444349054ee067813f2bec7610c0933009b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9b4b4d68085809ae840a099e4620e5a128509279":["ece367783f1064f12ed72eabac9cc1afeb402b3c"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["2c24804758d67429e3055070a9fe970d4f159954"],"ece367783f1064f12ed72eabac9cc1afeb402b3c":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"1486037b0fcc4d552ab91d319279d41d68fe6a94":["2c24804758d67429e3055070a9fe970d4f159954"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3c3d2444349054ee067813f2bec7610c0933009b"],"2c24804758d67429e3055070a9fe970d4f159954":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"3c3d2444349054ee067813f2bec7610c0933009b":["1486037b0fcc4d552ab91d319279d41d68fe6a94"],"9b4b4d68085809ae840a099e4620e5a128509279":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["ece367783f1064f12ed72eabac9cc1afeb402b3c"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ece367783f1064f12ed72eabac9cc1afeb402b3c":["9b4b4d68085809ae840a099e4620e5a128509279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}