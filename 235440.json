{"path":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","sourceNew":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","sourceNew":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","sourceNew":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","sourceNew":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSearchDetails().mjava","sourceNew":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    assertEquals(2, bq.clauses().size());\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testSearchDetails() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    double[] xy = new double[]{35.0, -79.34};\n    String point = xy[0] + \",\" + xy[1];\n    //How about some queries?\n    //don't need a parser for this path currently.  This may change\n    assertU(adoc(\"id\", \"0\", \"home_ns\", point));\n    assertU(commit());\n    SchemaField home = schema.getField(\"home_ns\");\n    PointType pt = (PointType) home.getType();\n    assertEquals(pt.getDimension(), 2);\n    Query q = pt.getFieldQuery(null, home, point);\n    assertNotNull(q);\n    assertTrue(q instanceof BooleanQuery);\n    //should have two clauses, one for 35.0 and the other for -79.34\n    BooleanQuery bq = (BooleanQuery) q;\n    BooleanClause[] clauses = bq.getClauses();\n    assertEquals(clauses.length, 2);\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08970e5b8411182a29412c177eff67ec1110095b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}