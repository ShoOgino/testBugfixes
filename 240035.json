{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testSplitting().mjava","commits":[{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testSplitting().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    for( String[] test : tests ) {     \n      TokenStream stream = new PatternTokenizer(new StringReader(test[2]), Pattern.compile(test[1]), Integer.parseInt(test[0]));\n      String out = tsToString( stream );\n      // System.out.println( test[2] + \" ==> \" + out );\n\n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    \n    Map<String,String> args = new HashMap<String, String>();\n    for( String[] test : tests ) {\n      args.put( PatternTokenizerFactory.GROUP, test[0] );\n      args.put( PatternTokenizerFactory.PATTERN, test[1] );\n\n      PatternTokenizerFactory tokenizer = new PatternTokenizerFactory();\n      tokenizer.init( args );\n      \n      TokenStream stream = tokenizer.create( new StringReader( test[2] ) );\n      String out = tsToString( stream );\n      // System.out.println( test[2] + \" ==> \" + out );\n\n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testSplitting().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#testSplitting().mjava","sourceNew":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    for( String[] test : tests ) {     \n      TokenStream stream = new PatternTokenizer(new StringReader(test[2]), Pattern.compile(test[1]), Integer.parseInt(test[0]));\n      String out = tsToString( stream );\n      // System.out.println( test[2] + \" ==> \" + out );\n\n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","sourceOld":"\tpublic void testSplitting() throws Exception \n  {\n    String qpattern = \"\\\\'([^\\\\']+)\\\\'\"; // get stuff between \"'\"\n    String[][] tests = {\n      // group  pattern        input                    output\n      { \"-1\",   \"--\",          \"aaa--bbb--ccc\",         \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"aaa:bbb:ccc\",           \"aaa bbb ccc\" },\n      { \"-1\",   \"\\\\p{Space}\",  \"aaa   bbb \\t\\tccc  \",   \"aaa bbb ccc\" },\n      { \"-1\",   \":\",           \"boo:and:foo\",           \"boo and foo\" },\n      { \"-1\",   \"o\",           \"boo:and:foo\",           \"b :and:f\" },\n      { \"0\",    \":\",           \"boo:and:foo\",           \": :\" },\n      { \"0\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"'bbb' 'ccc'\" },\n      { \"1\",    qpattern,      \"aaa 'bbb' 'ccc'\",       \"bbb ccc\" }\n    };\n    \n    for( String[] test : tests ) {     \n      TokenStream stream = new PatternTokenizer(new StringReader(test[2]), Pattern.compile(test[1]), Integer.parseInt(test[0]));\n      String out = tsToString( stream );\n      // System.out.println( test[2] + \" ==> \" + out );\n\n      assertEquals(\"pattern: \"+test[1]+\" with input: \"+test[2], test[3], out );\n      \n      // Make sure it is the same as if we called 'split'\n      // test disabled, as we remove empty tokens\n      /*if( \"-1\".equals( test[0] ) ) {\n        String[] split = test[2].split( test[1] );\n        stream = tokenizer.create( new StringReader( test[2] ) );\n        int i=0;\n        for( Token t = stream.next(); null != t; t = stream.next() ) \n        {\n          assertEquals( \"split: \"+test[1] + \" \"+i, split[i++], new String(t.termBuffer(), 0, t.termLength()) );\n        }\n      }*/\n    } \n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}