{"path":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","commits":[{"id":"52bb40d1a8459a88868fb810f6c90378004fa285","date":1404198004,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      cc.load();\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      cc.load();\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      cc.load();\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      cc.load();\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":["52bb40d1a8459a88868fb810f6c90378004fa285"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, 30000, \"dummy.host.com\", \"8984\", \"/solr\", 180000, 180000, true, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    String ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\").toFile().getAbsolutePath();\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bfcbdfe07d46da058707c12412aef939a5f2198","date":1521339918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d6196d0e7261e2d086efe76bc605f27cfce889be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6196d0e7261e2d086efe76bc605f27cfce889be","date":1526977604,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":["0bfcbdfe07d46da058707c12412aef939a5f2198"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":["52bb40d1a8459a88868fb810f6c90378004fa285"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, () -> Collections.emptyList());\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, new CurrentCoreDescriptorProvider() {\n        @Override\n        public List<CoreDescriptor> getCurrentDescriptors() {\n          return Collections.EMPTY_LIST;\n        }\n      });\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionZkExpiry#testLeaderElectionWithZkExpiry().mjava","sourceNew":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, () -> Collections.emptyList());\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              if (log.isInfoEnabled()) {\n                log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              }\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLeaderElectionWithZkExpiry() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    Path ccDir = createTempDir(\"testLeaderElectionWithZkExpiry-solr\");\n    CoreContainer cc = createCoreContainer(ccDir, SOLRXML);\n    final ZkTestServer server = new ZkTestServer(zkDir);\n    server.setTheTickTime(1000);\n    SolrZkClient zc = null;\n    try {\n      server.run();\n\n      CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"dummy.host.com\", 8984, \"solr\")\n          .setLeaderConflictResolveWait(180000)\n          .setLeaderVoteWait(180000)\n          .build();\n      final ZkController zkController = new ZkController(cc, server.getZkAddress(), 15000, cloudConfig, () -> Collections.emptyList());\n      try {\n        Thread killer = new Thread() {\n          @Override\n          public void run() {\n            long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(10, TimeUnit.SECONDS);\n            while (System.nanoTime() < timeout) {\n              long sessionId = zkController.getZkClient().getSolrZooKeeper().getSessionId();\n              server.expire(sessionId);\n              try {\n                Thread.sleep(10);\n              } catch (InterruptedException e)  {}\n            }\n          }\n        };\n        killer.start();\n        killer.join();\n        long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n        zc = new SolrZkClient(server.getZkAddress(), LeaderElectionTest.TIMEOUT);\n        boolean found = false;\n        while (System.nanoTime() < timeout) {\n          try {\n            String leaderNode = OverseerCollectionConfigSetProcessor.getLeaderNode(zc);\n            if (leaderNode != null && !leaderNode.trim().isEmpty()) {\n              log.info(\"Time={} Overseer leader is = {}\", System.nanoTime(), leaderNode);\n              found = true;\n              break;\n            }\n          } catch (KeeperException.NoNodeException nne) {\n            // ignore\n          }\n        }\n        assertTrue(found);\n      } finally {\n        zkController.close();\n      }\n    } finally {\n      if (zc != null) zc.close();\n      cc.shutdown();\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["e15199583d3635cb940942caed05132dd6c4c7c6"],"1c560208bc8842ee884b76b08784ccb132f05b48":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d6196d0e7261e2d086efe76bc605f27cfce889be"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["a626ec4d1c92e59fe390724d6220081047b03ce7","0bfcbdfe07d46da058707c12412aef939a5f2198"],"f4abec28b874149a7223e32cc7a01704c27790de":["52bb40d1a8459a88868fb810f6c90378004fa285"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1c560208bc8842ee884b76b08784ccb132f05b48"],"52bb40d1a8459a88868fb810f6c90378004fa285":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e15199583d3635cb940942caed05132dd6c4c7c6":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","e15199583d3635cb940942caed05132dd6c4c7c6"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"d6196d0e7261e2d086efe76bc605f27cfce889be":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bfcbdfe07d46da058707c12412aef939a5f2198":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"1c560208bc8842ee884b76b08784ccb132f05b48":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["d6196d0e7261e2d086efe76bc605f27cfce889be"],"f4abec28b874149a7223e32cc7a01704c27790de":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52bb40d1a8459a88868fb810f6c90378004fa285":["f4abec28b874149a7223e32cc7a01704c27790de"],"e15199583d3635cb940942caed05132dd6c4c7c6":["2209af2c265d2258ec4b29c8cc78622d36994a15","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["203e3fcf513c02ee2c07015f2ce277e26dc60907","0bfcbdfe07d46da058707c12412aef939a5f2198"],"d6196d0e7261e2d086efe76bc605f27cfce889be":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0bfcbdfe07d46da058707c12412aef939a5f2198":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52bb40d1a8459a88868fb810f6c90378004fa285"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["1c560208bc8842ee884b76b08784ccb132f05b48"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}