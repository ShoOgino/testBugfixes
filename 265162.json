{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","commits":[{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 2, startOffsets, pairIdx + 3, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 2, endOffsets, pairIdx + 3, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["50757fe5d1709a826029f328f2ee33c97f170d84"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 2, startOffsets, pairIdx + 3, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 2, endOffsets, pairIdx + 3, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50757fe5d1709a826029f328f2ee33c97f170d84","date":1529506189,"type":3,"author":"Marc-Andre Morissette","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","sourceNew":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 1, startOffsets, pairIdx + 2, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 1, endOffsets, pairIdx + 2, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","sourceOld":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 2, startOffsets, pairIdx + 3, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 2, endOffsets, pairIdx + 3, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","bugFix":["eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","sourceNew":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 1, startOffsets, pairIdx + 2, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 1, endOffsets, pairIdx + 2, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","sourceOld":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 2, startOffsets, pairIdx + 3, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 2, endOffsets, pairIdx + 3, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper.SpanCollectedOffsetsEnum#add(int,int).mjava","sourceNew":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 1, startOffsets, pairIdx + 2, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 1, endOffsets, pairIdx + 2, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","sourceOld":"    // called from collector before it's navigated\n    void add(int startOffset, int endOffset) {\n      assert enumIdx == -1 : \"bad state\";\n\n      // loop backwards since we expect a match at the end or close to it.  We expect O(1) not O(N).\n      int pairIdx = numPairs - 1;\n      for (; pairIdx >= 0; pairIdx--) {\n        int iStartOffset = startOffsets[pairIdx];\n        int iEndOffset = endOffsets[pairIdx];\n        int cmp = Integer.compare(iStartOffset, startOffset);\n        if (cmp == 0) {\n          cmp = Integer.compare(iEndOffset, endOffset);\n        }\n        if (cmp == 0) {\n          return; // we already have this offset-pair for this term\n        } else if (cmp < 0) {\n          break; //we will insert offsetPair to the right of pairIdx\n        }\n      }\n      // pairIdx is now one position to the left of where we insert the new pair\n      // shift right any pairs by one to make room\n      final int shiftLen = numPairs - (pairIdx + 1);\n      if (shiftLen > 0) {\n        System.arraycopy(startOffsets, pairIdx + 2, startOffsets, pairIdx + 3, shiftLen);\n        System.arraycopy(endOffsets, pairIdx + 2, endOffsets, pairIdx + 3, shiftLen);\n      }\n      // now we can place the offset pair\n      startOffsets[pairIdx + 1] = startOffset;\n      endOffsets[pairIdx + 1] = endOffset;\n      numPairs++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","50757fe5d1709a826029f328f2ee33c97f170d84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50757fe5d1709a826029f328f2ee33c97f170d84":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50757fe5d1709a826029f328f2ee33c97f170d84"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","50757fe5d1709a826029f328f2ee33c97f170d84"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","50757fe5d1709a826029f328f2ee33c97f170d84","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"50757fe5d1709a826029f328f2ee33c97f170d84":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}