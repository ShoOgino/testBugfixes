{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"967a6347853ee35b432c965743a902d42f24e697","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertAutoscalingUpdateComplete();\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","sourceNew":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertAutoscalingUpdateComplete();\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","sourceOld":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertAutoscalingUpdateComplete();\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#init().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void init() throws Exception {\n    configureCluster(1, TimeSource.get(\"simTime:50\"));\n    fired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    actionContextPropsRef.set(null);\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    SolrResponse rsp = cluster.request(req);\n    NamedList<Object> response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPreferencesCommand = \"{\" +\n        \"'set-cluster-preferences': [\" +\n        \"{'minimize': 'cores'},\" +\n        \"{'maximize': 'freedisk','precision': 100}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPreferencesCommand);\n    rsp = cluster.request(req);\n    response = rsp.getResponse();\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    assertAutoscalingUpdateComplete();\n    cluster.getTimeSource().sleep(TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["967a6347853ee35b432c965743a902d42f24e697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"967a6347853ee35b432c965743a902d42f24e697":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["967a6347853ee35b432c965743a902d42f24e697"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"967a6347853ee35b432c965743a902d42f24e697":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}