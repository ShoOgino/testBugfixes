{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","commits":[{"id":"66ad19eb69be5720d673695d38a1f5a0fed70c06","date":1366664507,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","pathOld":"/dev/null","sourceNew":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other, TopScorer.UNKNOWN, false);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","sourceNew":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","sourceOld":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other, TopScorer.UNKNOWN, false);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","sourceNew":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","sourceOld":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other, TopScorer.UNKNOWN, false);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingScorer#getAssertingScorer(Random,Scorer).mjava","sourceNew":null,"sourceOld":"  static Scorer getAssertingScorer(Random random, Scorer other) {\n    if (other == null || other instanceof AssertingScorer) {\n      return other;\n    }\n    final WeakReference<AssertingScorer> assertingScorerRef = ASSERTING_INSTANCES.get(other);\n    final AssertingScorer assertingScorer = assertingScorerRef == null ? null : assertingScorerRef.get();\n    if (assertingScorer == null) {\n      // can happen in case of memory pressure or if\n      // scorer1.score(collector) calls\n      // collector.setScorer(scorer2) with scorer1 != scorer2, such as\n      // BooleanScorer. In that case we can't enable all assertions\n      return new AssertingScorer(random, other);\n    } else {\n      return assertingScorer;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["66ad19eb69be5720d673695d38a1f5a0fed70c06","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"]},"commit2Childs":{"66ad19eb69be5720d673695d38a1f5a0fed70c06":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66ad19eb69be5720d673695d38a1f5a0fed70c06"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}