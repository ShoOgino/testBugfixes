{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27b43f9a8cc600a073ced9342cb6882853856049","date":1463221077,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 30, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 30, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 30, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988ba42567e2f5c79d44ac0cb1e179582c71c149","date":1477918182,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", 10, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\",\n               future.get());\n\n    Future<Boolean> migrated = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                                (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\")\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\", future.get());\n\n    Future<Boolean> migrated\n        = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n              (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testWatchesWorkForStateFormat1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testWatchesWorkForStateFormat1() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    Future<Boolean> future = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"stateformat1\", \"config\", 1, 1).setStateFormat(1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher not notified of stateformat=1 collection creation\",\n               future.get());\n\n    Future<Boolean> migrated = waitInBackground(\"stateformat1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                                (n, c) -> c != null && c.getStateFormat() == 2);\n\n    CollectionAdminRequest.migrateCollectionFormat(\"stateformat1\")\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n    assertTrue(\"CollectionStateWatcher did not persist over state format migration\", migrated.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27b43f9a8cc600a073ced9342cb6882853856049"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","988ba42567e2f5c79d44ac0cb1e179582c71c149"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["988ba42567e2f5c79d44ac0cb1e179582c71c149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27b43f9a8cc600a073ced9342cb6882853856049":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"988ba42567e2f5c79d44ac0cb1e179582c71c149":["191128ac5b85671b1671e2c857437694283b6ebf"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["988ba42567e2f5c79d44ac0cb1e179582c71c149"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["988ba42567e2f5c79d44ac0cb1e179582c71c149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["7b366e7dd3172289251a86be96031af4002cd19c"],"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b366e7dd3172289251a86be96031af4002cd19c":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","988ba42567e2f5c79d44ac0cb1e179582c71c149"],"320888923ec13b91f53082558f01f4c9960dd226":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"27b43f9a8cc600a073ced9342cb6882853856049":["0ad30c6a479e764150a3316e57263319775f1df2"],"988ba42567e2f5c79d44ac0cb1e179582c71c149":["320888923ec13b91f53082558f01f4c9960dd226","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["27b43f9a8cc600a073ced9342cb6882853856049"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}