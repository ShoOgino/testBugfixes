{"path":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","commits":[{"id":"a57105180ca080c421baaa15400fcce41a615791","date":1362949009,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n    }\n    \n    df.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a32ef0f7ada102673c4b42228da75f324b52b","date":1362975614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      sz = oldDirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : oldDirs) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    df.close();\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n    }\n    \n    df.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e0a20fbf18112c94a66fcc40987c4ffa80a5a9","date":1363460471,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    Thread thread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    thread.start();\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      sz = oldDirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : oldDirs) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    thread.join();\n\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      sz = oldDirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : oldDirs) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    df.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    Thread thread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    thread.start();\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    thread.join();\n\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    Thread thread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    thread.start();\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      sz = oldDirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : oldDirs) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    thread.join();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0471d0887ea55e42e2ed693cd5656136e34e3c25","date":1363930474,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 11;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 4; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    Thread closeThread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    closeThread.start();\n    \n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    closeThread.join();\n\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 3;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 1; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    Thread thread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    thread.start();\n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    thread.join();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<>();\n    int threadCount = 11;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 4; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    Thread closeThread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    closeThread.start();\n    \n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    closeThread.join();\n\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<Thread>();\n    int threadCount = 11;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 4; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    Thread closeThread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    closeThread.start();\n    \n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    closeThread.join();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43d618262c616423ed79f226c5c49f708999b06","date":1540815794,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest#stressTest().mjava","sourceNew":"  @Test\n  public void stressTest() throws Exception {\n    doStressTest(new RAMDirectoryFactory());\n    doStressTest(new ByteBuffersDirectoryFactory());\n  }\n\n","sourceOld":"  @Test\n  public void stressTest() throws Exception {\n    final CachingDirectoryFactory df = new RAMDirectoryFactory();\n    \n    List<Thread> threads = new ArrayList<>();\n    int threadCount = 11;\n    for (int i = 0; i < threadCount; i++) {\n      Thread getDirThread = new GetDirThread(df);\n      threads.add(getDirThread);\n      getDirThread.start();\n    }\n    \n    for (int i = 0; i < 4; i++) {\n      Thread releaseDirThread = new ReleaseDirThread(df);\n      threads.add(releaseDirThread);\n      releaseDirThread.start();\n    }\n    \n    for (int i = 0; i < 2; i++) {\n      Thread incRefThread = new IncRefThread(df);\n      threads.add(incRefThread);\n      incRefThread.start();\n    }\n\n    Thread.sleep(TEST_NIGHTLY ? 30000 : 8000);\n    \n    Thread closeThread = new Thread() {\n      public void run() {\n        try {\n          df.close();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    closeThread.start();\n    \n    \n    stop = true;\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n    \n    // do any remaining releases\n    synchronized (dirs) {\n      int sz = dirs.size();\n      if (sz > 0) {\n        for (Tracker tracker : dirs.values()) {\n          int cnt = tracker.refCnt.get();\n          for (int i = 0; i < cnt; i++) {\n            tracker.refCnt.decrementAndGet();\n            df.release(tracker.dir);\n          }\n        }\n      }\n      \n    }\n    \n    closeThread.join();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["a57105180ca080c421baaa15400fcce41a615791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29e0a20fbf18112c94a66fcc40987c4ffa80a5a9":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["29e0a20fbf18112c94a66fcc40987c4ffa80a5a9"],"e43d618262c616423ed79f226c5c49f708999b06":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a57105180ca080c421baaa15400fcce41a615791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e43d618262c616423ed79f226c5c49f708999b06"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e43d618262c616423ed79f226c5c49f708999b06"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["29e0a20fbf18112c94a66fcc40987c4ffa80a5a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a57105180ca080c421baaa15400fcce41a615791"],"29e0a20fbf18112c94a66fcc40987c4ffa80a5a9":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"e43d618262c616423ed79f226c5c49f708999b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a57105180ca080c421baaa15400fcce41a615791":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}