{"path":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos,\n        int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n        throws CorruptIndexException, IOException {\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}