{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    // TODO: technically we could just copy bytes and not re-encode if we knew the length...\n    if (positions != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt());\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    // TODO: technically we could just copy bytes and not re-encode if we knew the length...\n    if (positions != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt());\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.length = length;\n          positions.readBytes(scratch.bytes, scratch.offset, scratch.length);\n          writePosition(code >>> 1, scratch);\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    // TODO: technically we could just copy bytes and not re-encode if we knew the length...\n    if (positions != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt());\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.length = length;\n          positions.readBytes(scratch.bytes, scratch.offset, scratch.length);\n          writePosition(code >>> 1, scratch);\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    // TODO: technically we could just copy bytes and not re-encode if we knew the length...\n    if (positions != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt());\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.length = length;\n          positions.readBytes(scratch.bytes, scratch.offset, scratch.length);\n          writePosition(code >>> 1, scratch);\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    // TODO: technically we could just copy bytes and not re-encode if we knew the length...\n    if (positions != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt());\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.length = length;\n          positions.readBytes(scratch.bytes, scratch.offset, scratch.length);\n          writePosition(code >>> 1, scratch);\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":["0935c850ea562932997b72c69d93e345f21d7f45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    if (payloads) {\n      // TODO, maybe overkill and just call super.addProx() in this case?\n      // we do avoid buffering the offsets in RAM though.\n      for (int i = 0; i < numProx; i++) {\n        int code = positions.readVInt();\n        if ((code & 1) == 1) {\n          int length = positions.readVInt();\n          scratch.grow(length);\n          scratch.setLength(length);\n          positions.readBytes(scratch.bytes(), 0, scratch.length());\n          writePosition(code >>> 1, scratch.get());\n        } else {\n          writePosition(code >>> 1, null);\n        }\n      }\n      tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n    } else if (positions != null) {\n      // pure positions, no payloads\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(positions.readVInt() >>> 1);\n      }\n    }\n    \n    if (offsets != null) {\n      for (int i = 0; i < numProx; i++) {\n        tvf.writeVInt(offsets.readVInt());\n        tvf.writeVInt(offsets.readVInt());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}