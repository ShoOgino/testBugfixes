{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareDocToValue(int,Object).mjava","commits":[{"id":"e27b99259bc542853bfc42f809014f56aad988fb","date":1366018447,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareDocToValue(int,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    @SuppressWarnings(\"unchecked\")\n    public int compareDocToValue(int parentDoc, Object value) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return 0;\n      }\n\n      // We need to copy the lowest value from all nested docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return 0;\n      }\n\n      // We only need to emit a single cmp value for any matching child doc\n      int cmp = wrappedComparator.compareBottom(childDoc);\n      if (cmp > 0) {\n        return cmp;\n      }\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return cmp;\n        }\n        int cmp1 = wrappedComparator.compareDocToValue(childDoc, value);\n        if (cmp1 > 0) {\n          return cmp1;\n        } else {\n          if (cmp1 == 0) {\n            cmp = 0;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareTop(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareDocToValue(int,Object).mjava","sourceNew":"    @Override\n    @SuppressWarnings(\"unchecked\")\n    public int compareTop(int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return 0;\n      }\n\n      // We need to copy the lowest value from all nested docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return 0;\n      }\n\n      // We only need to emit a single cmp value for any matching child doc\n      int cmp = wrappedComparator.compareBottom(childDoc);\n      if (cmp > 0) {\n        return cmp;\n      }\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return cmp;\n        }\n        int cmp1 = wrappedComparator.compareTop(childDoc);\n        if (cmp1 > 0) {\n          return cmp1;\n        } else {\n          if (cmp1 == 0) {\n            cmp = 0;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    @SuppressWarnings(\"unchecked\")\n    public int compareDocToValue(int parentDoc, Object value) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return 0;\n      }\n\n      // We need to copy the lowest value from all nested docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return 0;\n      }\n\n      // We only need to emit a single cmp value for any matching child doc\n      int cmp = wrappedComparator.compareBottom(childDoc);\n      if (cmp > 0) {\n        return cmp;\n      }\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return cmp;\n        }\n        int cmp1 = wrappedComparator.compareDocToValue(childDoc, value);\n        if (cmp1 > 0) {\n          return cmp1;\n        } else {\n          if (cmp1 == 0) {\n            cmp = 0;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareTop(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.Lowest#compareDocToValue(int,Object).mjava","sourceNew":"    @Override\n    @SuppressWarnings(\"unchecked\")\n    public int compareTop(int parentDoc) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return 0;\n      }\n\n      // We need to copy the lowest value from all nested docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return 0;\n      }\n\n      // We only need to emit a single cmp value for any matching child doc\n      int cmp = wrappedComparator.compareBottom(childDoc);\n      if (cmp > 0) {\n        return cmp;\n      }\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return cmp;\n        }\n        int cmp1 = wrappedComparator.compareTop(childDoc);\n        if (cmp1 > 0) {\n          return cmp1;\n        } else {\n          if (cmp1 == 0) {\n            cmp = 0;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    @SuppressWarnings(\"unchecked\")\n    public int compareDocToValue(int parentDoc, Object value) throws IOException {\n      if (parentDoc == 0 || parentDocuments == null || childDocuments == null) {\n        return 0;\n      }\n\n      // We need to copy the lowest value from all nested docs into slot.\n      int prevParentDoc = parentDocuments.prevSetBit(parentDoc - 1);\n      int childDoc = childDocuments.nextSetBit(prevParentDoc + 1);\n      if (childDoc >= parentDoc || childDoc == -1) {\n        return 0;\n      }\n\n      // We only need to emit a single cmp value for any matching child doc\n      int cmp = wrappedComparator.compareBottom(childDoc);\n      if (cmp > 0) {\n        return cmp;\n      }\n\n      while (true) {\n        childDoc = childDocuments.nextSetBit(childDoc + 1);\n        if (childDoc >= parentDoc || childDoc == -1) {\n          return cmp;\n        }\n        int cmp1 = wrappedComparator.compareDocToValue(childDoc, value);\n        if (cmp1 > 0) {\n          return cmp1;\n        } else {\n          if (cmp1 == 0) {\n            cmp = 0;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["e27b99259bc542853bfc42f809014f56aad988fb","7615b855702e008d91a95a2578bf05d27372f599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["e27b99259bc542853bfc42f809014f56aad988fb"],"e27b99259bc542853bfc42f809014f56aad988fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27ab7b234eab0cbc020836989b96ed430e1065bb"]},"commit2Childs":{"27ab7b234eab0cbc020836989b96ed430e1065bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e27b99259bc542853bfc42f809014f56aad988fb"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"e27b99259bc542853bfc42f809014f56aad988fb":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}