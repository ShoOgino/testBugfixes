{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<Stem> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.emptyList();\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new Stem(strippedWord, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fdc1eb541e8a672a95d6c660c81d606145d1d","date":1393358825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<Stem> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.emptyList();\n    }\n\n    List<Stem> stems = new ArrayList<Stem>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new Stem(strippedWord, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01af929441dec992bb546ac539c0bf40ae90965","date":1393367367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    Pattern pattern = dictionary.patterns.get(affix.getCondition());\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      BytesRef scratch = new BytesRef();\n      dictionary.flagLookup.get(affix.getAppendFlags(), scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    if (!affix.checkCondition(segment)) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      stems.addAll(stem(strippedWord, length, affix.getAppendFlags(), ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de","date":1393517961,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    Pattern pattern = dictionary.patterns.get(affix.getCondition());\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(affix.getAppendFlags(), scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    Pattern pattern = dictionary.patterns.get(affix.getCondition());\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      BytesRef scratch = new BytesRef();\n      dictionary.flagLookup.get(affix.getAppendFlags(), scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c","date":1393521555,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,char,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#applyAffix(char[],int,Affix,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, char affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n\n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  public List<CharsRef> applyAffix(char strippedWord[], int length, Affix affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    Pattern pattern = dictionary.patterns.get(affix.getCondition());\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    char wordFlags[] = dictionary.lookupWord(strippedWord, 0, length, scratch);\n    if (wordFlags != null && Dictionary.hasFlag(wordFlags, affix.getFlag())) {\n      stems.add(new CharsRef(strippedWord, 0, length));\n    }\n\n    if (affix.isCrossProduct() && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(affix.getAppendFlags(), scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f01af929441dec992bb546ac539c0bf40ae90965":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["4b4d7fbed2c93fc05b24cda724ccf307e2fde3de"],"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de":["f01af929441dec992bb546ac539c0bf40ae90965"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f01af929441dec992bb546ac539c0bf40ae90965":["4b4d7fbed2c93fc05b24cda724ccf307e2fde3de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":[],"4b4d7fbed2c93fc05b24cda724ccf307e2fde3de":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["f01af929441dec992bb546ac539c0bf40ae90965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}