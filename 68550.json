{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","sourceNew":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    SimpleFacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","sourceNew":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","sourceNew":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"dim=dim path=[] value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testLabelWithDelimiter().mjava","sourceNew":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"dim=dim path=[] value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testLabelWithDelimiter() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n    config.setMultiValued(\"dim\", true);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"dim\", \"test\\u001Fone\"));\n    doc.add(new FacetField(\"dim\", \"test\\u001Etwo\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    FacetsCollector c = new FacetsCollector();\n    searcher.search(new MatchAllDocsQuery(), c);\n    \n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Fone\"));\n    assertEquals(1, facets.getSpecificValue(\"dim\", \"test\\u001Etwo\"));\n\n    FacetResult result = facets.getTopChildren(10, \"dim\");\n    assertEquals(\"dim=dim path=[] value=-1 childCount=2\\n  test\\u001Fone (1)\\n  test\\u001Etwo (1)\\n\", result.toString());\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}