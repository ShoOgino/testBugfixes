{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","commits":[{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5049dd51fddadd3fd00de298716d1cd0fdee5bf8","date":1496675957,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Covariance evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Covariance evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc84475e6ad3fd8951c733b6e17916c03cd574","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Covariance evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Covariance evaluator expects 2 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5049dd51fddadd3fd00de298716d1cd0fdee5bf8"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5049dd51fddadd3fd00de298716d1cd0fdee5bf8":["12cb83a3f761dc612e1ece020f46e1886fc2550e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["28288370235ed02234a64753cdbf0c6ec096304a","ba1e7de64990e3928b90142a52fb92eeff556475"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["5049dd51fddadd3fd00de298716d1cd0fdee5bf8"],"ba1e7de64990e3928b90142a52fb92eeff556475":["28288370235ed02234a64753cdbf0c6ec096304a"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5049dd51fddadd3fd00de298716d1cd0fdee5bf8":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["5049dd51fddadd3fd00de298716d1cd0fdee5bf8","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","12cb83a3f761dc612e1ece020f46e1886fc2550e","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}