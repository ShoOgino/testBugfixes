{"path":"backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}