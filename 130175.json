{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code> \n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") && \n                 null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code> \n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") && \n                 null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcd6a2cefce164763af175ff1accaf232439e8e","date":1527469335,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n\n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") &&\n              null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","sourceOld":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code> \n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n        \n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") && \n                 null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n\n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          @SuppressWarnings({\"unchecked\"})\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") &&\n              null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","sourceOld":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n\n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") &&\n              null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f827e37672b604f6c8ea8457b0c6ce14528cf3","date":1597148467,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.Domain.JoinField#createJoinField(FacetRequest.Domain,Map[String,Object]).mjava","sourceNew":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n\n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          @SuppressWarnings({\"unchecked\"})\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(FROM_PARAM) && join.containsKey(TO_PARAM) &&\n              null != join.get(FROM_PARAM) && null != join.get(TO_PARAM)) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n\n          for (String providedKey : join.keySet()) {\n            if (! SUPPORTED_JOIN_PROPERTIES.contains(providedKey)) {\n              final String supportedPropsStr = String.join(\", \", SUPPORTED_JOIN_PROPERTIES);\n              final String message = String.format(Locale.ROOT,\n                  \"'join' domain change contains unexpected key [%s], only %s supported\", providedKey, supportedPropsStr);\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message);\n            }\n          }\n\n          final String method = join.containsKey(METHOD_PARAM) ? join.get(METHOD_PARAM) : \"index\";\n          domain.joinField = new JoinField(join.get(FROM_PARAM), join.get(TO_PARAM), method);\n        }\n      }\n\n","sourceOld":"      /**\n       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,\n       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>\n       * and sets it on the <code>Domain</code>.\n       *\n       * (params must not be null)\n       */\n      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {\n        assert null != domain;\n        assert null != domainMap;\n\n        final Object queryJoin = domainMap.get(\"join\");\n        if (null != queryJoin) {\n          // TODO: maybe allow simple string (instead of map) to mean \"self join on this field name\" ?\n          if (! (queryJoin instanceof Map)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires a map containing the 'from' and 'to' fields\");\n          }\n          @SuppressWarnings({\"unchecked\"})\n          final Map<String,String> join = (Map<String,String>) queryJoin;\n          if (! (join.containsKey(\"from\") && join.containsKey(\"to\") &&\n              null != join.get(\"from\") && null != join.get(\"to\")) ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change requires non-null 'from' and 'to' field names\");\n          }\n          if (2 != join.size()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"'join' domain change contains unexpected keys, only 'from' and 'to' supported: \"\n                    + join.toString());\n          }\n          domain.joinField = new JoinField(join.get(\"from\"), join.get(\"to\"));\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"]},"commit2Childs":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","2bcd6a2cefce164763af175ff1accaf232439e8e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}