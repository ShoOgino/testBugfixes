{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(null, postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["17a677e88529303e630fb314d1506ea0cdb40f00"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(null, postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a677e88529303e630fb314d1506ea0cdb40f00","date":1432211402,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(null, postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(null, postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["3e8715d826e588419327562287d5d6a8040d63d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(null, postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":null,"sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":null,"sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/autoprefix/TestAutoPrefixTerms#testDemoPrefixTerms().mjava","sourceNew":null,"sourceOld":"  public void testDemoPrefixTerms() throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: minTermsAutoPrefix=\" + minTermsAutoPrefix + \" maxTermsAutoPrefix=\" + maxTermsAutoPrefix);\n      System.out.println(\"\\nTEST: minItemsPerBlock=\" + minItemsPerBlock + \" maxItemsPerBlock=\" + maxItemsPerBlock);\n    }\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = 30;\n\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"field\", \"\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n      doc = new Document();\n      doc.add(new StringField(\"field\", \"a\" + (char) (97+i), Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: now intersect\");\n    }\n    CompiledAutomaton ca = new CompiledAutomaton(PrefixQuery.toAutomaton(new BytesRef(\"a\")), false, false, Integer.MAX_VALUE, true);\n    TermsEnum te = ca.getTermsEnum(terms);\n    PostingsEnum postingsEnum = null;\n\n    VerifyAutoPrefixTerms verifier = new VerifyAutoPrefixTerms(r.maxDoc(), new BytesRef(\"a\"));\n    //TermsEnum te = terms.intersect(new CompiledAutomaton(a, true, false), null);\n    while (te.next() != null) {\n      verifier.sawTerm(te.term());\n      postingsEnum = te.postings(postingsEnum);\n      int docID;\n      while ((docID = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n        // The auto-prefix terms should never \"overlap\" one another, so we should only ever see a given docID one time:\n        verifier.sawDoc(docID);\n      }\n    }\n    // 1 document has exactly \"a\", and 30 documents had \"a?\"\n    verifier.finish(31, maxTermsAutoPrefix);\n    PrefixQuery q = new PrefixQuery(new Term(\"field\", \"a\"));\n    assertEquals(31, newSearcher(r).search(q, 1).totalHits);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["17a677e88529303e630fb314d1506ea0cdb40f00"],"2a1862266772deb28cdcb7d996b64d2177022687":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["2a1862266772deb28cdcb7d996b64d2177022687","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17a677e88529303e630fb314d1506ea0cdb40f00":["3e8715d826e588419327562287d5d6a8040d63d6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a1862266772deb28cdcb7d996b64d2177022687","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","17a677e88529303e630fb314d1506ea0cdb40f00"],"17a677e88529303e630fb314d1506ea0cdb40f00":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}