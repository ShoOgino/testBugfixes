{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#unionLight(Collection[LightAutomaton]).mjava","sourceNew":"  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {\n    LightAutomaton result = new LightAutomaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(LightAutomaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(LightAutomaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c128cf81981c0804b2297ab78159a9953f08be3d","date":1404233540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return removeDeadStates(result);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#union(Collection[Automaton]).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return removeDeadStates(result);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the languages of the given\n   * automata.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  public static Automaton union(Collection<Automaton> l) {\n    Automaton result = new Automaton();\n\n    // Create initial state:\n    result.createState();\n\n    // Copy over all automata\n    Transition t = new Transition();\n    for(Automaton a : l) {\n      result.copy(a);\n    }\n    \n    // Add epsilon transition from new initial state\n    int stateOffset = 1;\n    for(Automaton a : l) {\n      if (a.getNumStates() == 0) {\n        continue;\n      }\n      result.addEpsilon(0, stateOffset);\n      stateOffset += a.getNumStates();\n    }\n\n    result.finishState();\n\n    return removeDeadStates(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"c128cf81981c0804b2297ab78159a9953f08be3d":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["c128cf81981c0804b2297ab78159a9953f08be3d"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"c128cf81981c0804b2297ab78159a9953f08be3d":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["c128cf81981c0804b2297ab78159a9953f08be3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}