{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * \n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","ba791bce8103c79e38f957e9c5a53a75871bd918","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05f061ece1572b8f04f70788c9e08aedb357c953","date":1323023912,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /*\n   * \n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /*\n   * \n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(encodeWeight(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      int previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        int currentScore = input.readInt();\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(encodeWeight(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      int previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        int currentScore = input.readInt();\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      BytesRef tmp1 = new BytesRef();\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      while (tfit.hasNext()) {\n        String key = tfit.next();\n        UnicodeUtil.UTF16toUTF8(key, 0, key.length(), tmp1);\n\n        if (tmp1.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, tmp1.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(FloatMagic.toSortable(tfit.freq()));\n        output.writeBytes(tmp1.bytes, tmp1.offset, tmp1.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      float previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        float currentScore = FloatMagic.fromSortable(input.readInt());\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(encodeWeight(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      int previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        int currentScore = input.readInt();\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void build(TermFreqIterator tfit) throws IOException {\n    File tempInput = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".input\", Sort.defaultTempDir());\n    File tempSorted = File.createTempFile(\n        FSTCompletionLookup.class.getSimpleName(), \".sorted\", Sort.defaultTempDir());\n\n    Sort.ByteSequencesWriter writer = new Sort.ByteSequencesWriter(tempInput);\n    Sort.ByteSequencesReader reader = null;\n\n    // Push floats up front before sequences to sort them. For now, assume they are non-negative.\n    // If negative floats are allowed some trickery needs to be done to find their byte order.\n    boolean success = false;\n    try {\n      byte [] buffer = new byte [0];\n      ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);\n      BytesRef spare;\n      while ((spare = tfit.next()) != null) {\n        if (spare.length + 4 >= buffer.length) {\n          buffer = ArrayUtil.grow(buffer, spare.length + 4);\n        }\n\n        output.reset(buffer);\n        output.writeInt(encodeWeight(tfit.weight()));\n        output.writeBytes(spare.bytes, spare.offset, spare.length);\n        writer.write(buffer, 0, output.getPosition());\n      }\n      writer.close();\n\n      // We don't know the distribution of scores and we need to bucket them, so we'll sort\n      // and divide into equal buckets.\n      SortInfo info = new Sort().sort(tempInput, tempSorted);\n      tempInput.delete();\n      FSTCompletionBuilder builder = new FSTCompletionBuilder(\n          buckets, new ExternalRefSorter(new Sort()), sharedTailLength);\n\n      final int inputLines = info.lines;\n      reader = new Sort.ByteSequencesReader(tempSorted);\n      long line = 0;\n      int previousBucket = 0;\n      int previousScore = 0;\n      ByteArrayDataInput input = new ByteArrayDataInput();\n      BytesRef tmp1 = new BytesRef();\n      BytesRef tmp2 = new BytesRef();\n      while (reader.read(tmp1)) {\n        input.reset(tmp1.bytes);\n        int currentScore = input.readInt();\n\n        int bucket;\n        if (line > 0 && currentScore == previousScore) {\n          bucket = previousBucket;\n        } else {\n          bucket = (int) (line * buckets / inputLines);\n        }\n        previousScore = currentScore;\n        previousBucket = bucket;\n\n        // Only append the input, discard the weight.\n        tmp2.bytes = tmp1.bytes;\n        tmp2.offset = input.getPosition();\n        tmp2.length = tmp1.length - input.getPosition();\n        builder.add(tmp2, bucket);\n\n        line++;\n      }\n\n      // The two FSTCompletions share the same automaton.\n      this.higherWeightsCompletion = builder.build();\n      this.normalCompletion = new FSTCompletion(\n          higherWeightsCompletion.getFST(), false, exactMatchFirst);\n      \n      success = true;\n    } finally {\n      if (success) \n        IOUtils.close(reader, writer);\n      else \n        IOUtils.closeWhileHandlingException(reader, writer);\n\n      tempInput.delete();\n      tempSorted.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["05f061ece1572b8f04f70788c9e08aedb357c953","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["7bf07f4ebadc7539de83a531e64678350d78ca26","05f061ece1572b8f04f70788c9e08aedb357c953"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["05f061ece1572b8f04f70788c9e08aedb357c953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"05f061ece1572b8f04f70788c9e08aedb357c953":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","05f061ece1572b8f04f70788c9e08aedb357c953"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"05f061ece1572b8f04f70788c9e08aedb357c953":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b65b350ca9588f9fc76ce7d6804160d06c45ff42","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}