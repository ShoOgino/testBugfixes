{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,IndexDeletionPolicy).mjava","commits":[{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":0,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,IndexDeletionPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, IndexDeletionPolicy delPolicy) throws IOException {\n    IndexWriterConfig conf = core.getSolrConfig().indexConfig.toIndexWriterConfig(core);\n    conf.setOpenMode(OpenMode.APPEND);\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);//Don't want to merge any commits here!\n    conf.setIndexDeletionPolicy(delPolicy);\n    conf.setCodec(core.getCodec());\n\n    try (SolrIndexWriter iw = new SolrIndexWriter(\"SolrSnapshotCleaner\", dir, conf)) {\n      // Do nothing. The only purpose of opening index writer is to invoke the Lucene IndexDeletionPolicy#onInit\n      // method so that we can cleanup the files associated with specified index commit.\n      // Note the index writer creates a new commit during the close() operation (which is harmless).\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,IndexDeletionPolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, IndexDeletionPolicy delPolicy) throws IOException {\n    IndexWriterConfig conf = core.getSolrConfig().indexConfig.toIndexWriterConfig(core);\n    conf.setOpenMode(OpenMode.APPEND);\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);//Don't want to merge any commits here!\n    conf.setIndexDeletionPolicy(delPolicy);\n    conf.setCodec(core.getCodec());\n\n    try (SolrIndexWriter iw = new SolrIndexWriter(\"SolrSnapshotCleaner\", dir, conf)) {\n      // Do nothing. The only purpose of opening index writer is to invoke the Lucene IndexDeletionPolicy#onInit\n      // method so that we can cleanup the files associated with specified index commit.\n      // Note the index writer creates a new commit during the close() operation (which is harmless).\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,IndexDeletionPolicy).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteSnapshotIndexFiles(SolrCore,Directory,IndexDeletionPolicy).mjava","sourceNew":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @throws IOException in case of I/O errors.\n   */\n\n  @SuppressWarnings({\"try\", \"unused\"})\n  private static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, IndexDeletionPolicy delPolicy) throws IOException {\n    IndexWriterConfig conf = core.getSolrConfig().indexConfig.toIndexWriterConfig(core);\n    conf.setOpenMode(OpenMode.APPEND);\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);//Don't want to merge any commits here!\n    conf.setIndexDeletionPolicy(delPolicy);\n    conf.setCodec(core.getCodec());\n    try (SolrIndexWriter iw = new SolrIndexWriter(\"SolrSnapshotCleaner\", dir, conf)) {\n      // Do nothing. The only purpose of opening index writer is to invoke the Lucene IndexDeletionPolicy#onInit\n      // method so that we can cleanup the files associated with specified index commit.\n      // Note the index writer creates a new commit during the close() operation (which is harmless).\n    }\n  }\n\n","sourceOld":"  /**\n   * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.\n   *\n   * @param core The Solr core\n   * @param dir The index directory storing the snapshot.\n   * @throws IOException in case of I/O errors.\n   */\n  private static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, IndexDeletionPolicy delPolicy) throws IOException {\n    IndexWriterConfig conf = core.getSolrConfig().indexConfig.toIndexWriterConfig(core);\n    conf.setOpenMode(OpenMode.APPEND);\n    conf.setMergePolicy(NoMergePolicy.INSTANCE);//Don't want to merge any commits here!\n    conf.setIndexDeletionPolicy(delPolicy);\n    conf.setCodec(core.getCodec());\n\n    try (SolrIndexWriter iw = new SolrIndexWriter(\"SolrSnapshotCleaner\", dir, conf)) {\n      // Do nothing. The only purpose of opening index writer is to invoke the Lucene IndexDeletionPolicy#onInit\n      // method so that we can cleanup the files associated with specified index commit.\n      // Note the index writer creates a new commit during the close() operation (which is harmless).\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["3e13696c44d3e2405098726359ab81dab178e7bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e13696c44d3e2405098726359ab81dab178e7bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["75237075d8425856bf4bbf52a6be4f9162b8187d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e13696c44d3e2405098726359ab81dab178e7bc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}