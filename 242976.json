{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#setACL(String,List[ACL],boolean).mjava","commits":[{"id":"67cf727e72c71906ffd390c61b50a1c60f2ebd49","date":1452731614,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#setACL(String,List[ACL],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the ACL on a single node in ZooKeeper. This will replace all existing ACL on that node.\n   *\n   * @param path path to set ACL on e.g. /solr/conf/solrconfig.xml\n   * @param acls a list of {@link ACL}s to be applied\n   * @param retryOnConnLoss true if the command should be retried on connection loss\n   */\n  public Stat setACL(String path, List<ACL> acls, boolean retryOnConnLoss) throws InterruptedException, KeeperException  {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.setACL(path, acls, -1);\n        }\n      });\n    } else {\n      return keeper.setACL(path, acls, -1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eacdba691ec9e0ff24c589e65a852b9915265e6","date":1508917488,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#setACL(String,List[ACL],boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#setACL(String,List[ACL],boolean).mjava","sourceNew":"  /**\n   * Set the ACL on a single node in ZooKeeper. This will replace all existing ACL on that node.\n   *\n   * @param path path to set ACL on e.g. /solr/conf/solrconfig.xml\n   * @param acls a list of {@link ACL}s to be applied\n   * @param retryOnConnLoss true if the command should be retried on connection loss\n   */\n  public Stat setACL(String path, List<ACL> acls, boolean retryOnConnLoss) throws InterruptedException, KeeperException  {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(() -> keeper.setACL(path, acls, -1));\n    } else {\n      return keeper.setACL(path, acls, -1);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the ACL on a single node in ZooKeeper. This will replace all existing ACL on that node.\n   *\n   * @param path path to set ACL on e.g. /solr/conf/solrconfig.xml\n   * @param acls a list of {@link ACL}s to be applied\n   * @param retryOnConnLoss true if the command should be retried on connection loss\n   */\n  public Stat setACL(String path, List<ACL> acls, boolean retryOnConnLoss) throws InterruptedException, KeeperException  {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Stat execute() throws KeeperException, InterruptedException {\n          return keeper.setACL(path, acls, -1);\n        }\n      });\n    } else {\n      return keeper.setACL(path, acls, -1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67cf727e72c71906ffd390c61b50a1c60f2ebd49"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67cf727e72c71906ffd390c61b50a1c60f2ebd49":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}