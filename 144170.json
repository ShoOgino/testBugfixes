{"path":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<String>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==6);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==6);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<String>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==6);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e65acce892eede973379cb2fb3b90ea49a4a5ed","date":1409839025,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==6);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","bugFix":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f28ba44811b52d5f1b5df98515eadee9f835f116","date":1448994563,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    \n    {\n      //Prior to SOLR-8175, the required term would cause an AIOOBE.\n      Collection<Token> tokens = qc.convert(\"+pine apple good ness\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      searcher.decref();      \n      assertTrue(result != null && result.getSuggestions() != null);\n      assertTrue(result.getSuggestions().size()==5);\n    }\n    \n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    //TODO can we use core.withSearcher ? refcounting here is confusing; not sure if intentional\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    \n    {\n      //Prior to SOLR-8175, the required term would cause an AIOOBE.\n      Collection<Token> tokens = qc.convert(\"+pine apple good ness\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      searcher.decref();      \n      assertTrue(result != null && result.getSuggestions() != null);\n      assertTrue(result.getSuggestions().size()==5);\n    }\n    \n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    \n    {\n      //Prior to SOLR-8175, the required term would cause an AIOOBE.\n      Collection<Token> tokens = qc.convert(\"+pine apple good ness\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      searcher.decref();      \n      assertTrue(result != null && result.getSuggestions() != null);\n      assertTrue(result.getSuggestions().size()==5);\n    }\n    \n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/WordBreakSolrSpellCheckerTest#testStandAlone().mjava","sourceNew":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    //TODO can we use core.withSearcher ? refcounting here is confusing; not sure if intentional\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    \n    {\n      //Prior to SOLR-8175, the required term would cause an AIOOBE.\n      Collection<Token> tokens = qc.convert(\"+pine apple good ness\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      searcher.decref();      \n      assertTrue(result != null && result.getSuggestions() != null);\n      assertTrue(result.getSuggestions().size()==5);\n    }\n    \n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","sourceOld":"  @Test\n  public void testStandAlone() throws Exception {\n    SolrCore core = h.getCore();\n    WordBreakSolrSpellChecker checker = new WordBreakSolrSpellChecker();\n    NamedList<String> params = new NamedList<>();\n    params.add(\"field\", \"lowerfilt\");\n    params.add(WordBreakSolrSpellChecker.PARAM_BREAK_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_COMBINE_WORDS, \"true\");\n    params.add(WordBreakSolrSpellChecker.PARAM_MAX_CHANGES, \"10\");\n    checker.init(params, core);\n\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    QueryConverter qc = new SpellingQueryConverter();\n    qc.setAnalyzer(new MockAnalyzer(random()));\n    \n    {\n      //Prior to SOLR-8175, the required term would cause an AIOOBE.\n      Collection<Token> tokens = qc.convert(\"+pine apple good ness\");\n      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n      SpellingResult result = checker.getSuggestions(spellOpts);\n      searcher.decref();      \n      assertTrue(result != null && result.getSuggestions() != null);\n      assertTrue(result.getSuggestions().size()==5);\n    }\n    \n    Collection<Token> tokens = qc.convert(\"paintable pine apple good ness\");\n    SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.get().getIndexReader(), 10);\n    SpellingResult result = checker.getSuggestions(spellOpts);\n    searcher.decref();\n    \n    assertTrue(result != null && result.getSuggestions() != null);\n    assertTrue(result.getSuggestions().size()==9);\n    \n    for(Map.Entry<Token, LinkedHashMap<String, Integer>> s : result.getSuggestions().entrySet()) {\n      Token orig = s.getKey();\n      String[] corr = s.getValue().keySet().toArray(new String[0]);\n      if(orig.toString().equals(\"paintable\")) {        \n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==9);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==3);\n        assertTrue(corr[0].equals(\"paint able\"));  //1 op ; max doc freq=5\n        assertTrue(corr[1].equals(\"pain table\"));  //1 op ; max doc freq=2      \n        assertTrue(corr[2].equals(\"pa in table\")); //2 ops\n      } else if(orig.toString().equals(\"pine apple\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==10);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapple\"));\n      } else if(orig.toString().equals(\"paintable pine\")) {\n        assertTrue(orig.startOffset()==0);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==14);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"paintablepine\"));\n      } else if(orig.toString().equals(\"good ness\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==9);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"goodness\"));\n      } else if(orig.toString().equals(\"pine apple good ness\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==20);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pineapplegoodness\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"pine\")) {\n        assertTrue(orig.startOffset()==10);\n        assertTrue(orig.endOffset()==14);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==1);\n        assertTrue(corr[0].equals(\"pi ne\"));\n      } else if(orig.toString().equals(\"apple\")) {\n        assertTrue(orig.startOffset()==15);\n        assertTrue(orig.endOffset()==20);\n        assertTrue(orig.length()==5);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"good\")) {\n        assertTrue(orig.startOffset()==21);\n        assertTrue(orig.endOffset()==25);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      } else if(orig.toString().equals(\"ness\")) {\n        assertTrue(orig.startOffset()==26);\n        assertTrue(orig.endOffset()==30);\n        assertTrue(orig.length()==4);\n        assertTrue(corr.length==0);\n      }else {\n        fail(\"Unexpected original result: \" + orig);\n      }        \n    }  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f28ba44811b52d5f1b5df98515eadee9f835f116":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ab833f2b623042c834458d4cbcad05073a93793":["f28ba44811b52d5f1b5df98515eadee9f835f116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["f28ba44811b52d5f1b5df98515eadee9f835f116","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["f28ba44811b52d5f1b5df98515eadee9f835f116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"f28ba44811b52d5f1b5df98515eadee9f835f116":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}