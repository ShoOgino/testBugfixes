{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["8d1c6f669427bd8e9bd8d8ed5f4121fcccae384e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cc809885aee4d16fe14baa327d43c5592ec55c","date":1363795545,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    Terms terms = MultiFields.getTerms(ir, \"foo\");\n    assertEquals(-1, MultiFields.totalTermFreq(ir, \"foo\", new BytesRef(\"bar\")));\n    assertEquals(-1, terms.getSumTotalTermFreq());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are docFreq, and sumDocFreq */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(ir.docFreq(new Term(\"foo\", new BytesRef(\"bar\"))), ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(ir.getSumDocFreq(\"foo\"), ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testStats().mjava","sourceNew":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are docFreq, and sumDocFreq */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(ir.docFreq(new Term(\"foo\", new BytesRef(\"bar\"))), ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(ir.getSumDocFreq(\"foo\"), ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test that when freqs are omitted, that totalTermFreq and sumTotalTermFreq are -1 */\n  public void testStats() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS);\n    ft.freeze();\n    Field f = newField(\"foo\", \"bar\", ft);\n    doc.add(f);\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    assertEquals(-1, ir.totalTermFreq(new Term(\"foo\", new BytesRef(\"bar\"))));\n    assertEquals(-1, ir.getSumTotalTermFreq(\"foo\"));\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"086ffe31d8fba0110227db122974163709ecc1b4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2bb2842e561df4e8e9ad89010605fc86ac265465","086ffe31d8fba0110227db122974163709ecc1b4"],"10cc809885aee4d16fe14baa327d43c5592ec55c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["10cc809885aee4d16fe14baa327d43c5592ec55c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["10cc809885aee4d16fe14baa327d43c5592ec55c"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10cc809885aee4d16fe14baa327d43c5592ec55c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}