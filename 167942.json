{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","commits":[{"id":"eabd392326444185db24d1533c1f69dfbb54fc71","date":1304638205,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"/dev/null","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"/dev/null","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"/dev/null","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      // nocommit: not quite right right here: see line 84... if skip > numTokensFound we always get a NegativeArrayException? needs fixing!\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c","date":1334160067,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      // nocommit: not quite right right here: see line 84... if skip > numTokensFound we always get a NegativeArrayException? needs fixing!\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#ReversePathHierarchyTokenizer(Reader,int,char,char,int).mjava","sourceNew":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","sourceOld":"  public ReversePathHierarchyTokenizer(Reader input, int bufferSize, char delimiter, char replacement, int skip) {\n    super(input);\n    if (bufferSize < 0) {\n      throw new IllegalArgumentException(\"bufferSize cannot be negative\");\n    }\n    if (skip < 0) {\n      throw new IllegalArgumentException(\"skip cannot be negative\");\n    }\n    termAtt.resizeBuffer(bufferSize);\n    this.delimiter = delimiter;\n    this.replacement = replacement;\n    this.skip = skip;\n    resultToken = new StringBuilder(bufferSize);\n    resultTokenBuffer = new char[bufferSize];\n    delimiterPositions = new ArrayList<Integer>(bufferSize/10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["eabd392326444185db24d1533c1f69dfbb54fc71","fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eabd392326444185db24d1533c1f69dfbb54fc71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eabd392326444185db24d1533c1f69dfbb54fc71"],"eabd392326444185db24d1533c1f69dfbb54fc71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["eabd392326444185db24d1533c1f69dfbb54fc71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","eabd392326444185db24d1533c1f69dfbb54fc71"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["fb58c6e219d9b9bcb1b4f293dc24b067aa45cd2c"],"eabd392326444185db24d1533c1f69dfbb54fc71":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}