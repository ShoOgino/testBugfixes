{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9767eba84e83b05b2a675421e190f4a4c15dad44","date":1508967004,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        LOG.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: \"+ gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point and updates internal list of files to download.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void fetchFileList(long gen) throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND,  CMD_GET_FILE_LIST);\n    params.set(TLOG_FILES, downloadTlogFiles);\n    params.set(GENERATION, String.valueOf(gen));\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient.Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(req);\n\n      List<Map<String, Object>> files = (List<Map<String,Object>>) response.get(CMD_GET_FILE_LIST);\n      if (files != null)\n        filesToDownload = Collections.synchronizedList(files);\n      else {\n        filesToDownload = Collections.emptyList();\n        log.error(\"No files to download for index generation: {}\", gen);\n      }\n\n      files = (List<Map<String,Object>>) response.get(CONF_FILES);\n      if (files != null)\n        confFilesToDownload = Collections.synchronizedList(files);\n\n      files = (List<Map<String, Object>>) response.get(TLOG_FILES);\n      if (files != null) {\n        tlogFilesToDownload = Collections.synchronizedList(files);\n      }\n    } catch (SolrServerException e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["43d1e498704edd2bba13548a189eed4dfccff11b"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"43d1e498704edd2bba13548a189eed4dfccff11b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["71475d88ea48a7d9a847f209667255318b3ea4c7","43d1e498704edd2bba13548a189eed4dfccff11b"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9767eba84e83b05b2a675421e190f4a4c15dad44"]},"commit2Childs":{"9767eba84e83b05b2a675421e190f4a4c15dad44":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["9767eba84e83b05b2a675421e190f4a4c15dad44","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["86290366cefc1b9d4eced13b430858c4a4c0421d","d2638f781be724518ff6c2263d14a48cf6e68017"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}