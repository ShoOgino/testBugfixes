{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","sourceNew":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","sourceOld":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","sourceNew":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    LightAutomaton automaton = re.toLightAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","sourceOld":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","sourceNew":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","sourceOld":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    LightAutomaton automaton = re.toLightAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","sourceNew":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(0));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(0));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","sourceOld":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase().mjava","sourceNew":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(0));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(0));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","sourceOld":"  public void testSpecialCase() {\n    RegExp re = new RegExp(\".?\");\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    // make sure character dfa accepts empty string\n    assertTrue(cra.isAccept(cra.getInitialState()));\n    assertTrue(cra.run(\"\"));\n    assertTrue(cra.run(new char[0], 0, 0));\n\n    // make sure byte dfa accepts empty string\n    assertTrue(bra.isAccept(bra.getInitialState()));\n    assertTrue(bra.run(new byte[0], 0, 0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7543e96e2d4820e09334d36a699b998ed963f4f"]},"commit2Childs":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7543e96e2d4820e09334d36a699b998ed963f4f","ac34f0c5bb9274821fb0cb18075234e02002e9bf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}