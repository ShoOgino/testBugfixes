{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9","date":1516630721,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = ConfigSetsHandlerApi.getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":["55ed5a78f8a4b37108ac73a894a105db562d303e","197bbedf08450ade98a11f4a0001448059666bec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = ConfigSetsHandlerApi.getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = ConfigSetsHandlerApi.getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it: {}\", configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = ConfigSetsHandlerApi.getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it: {}\", configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            return coll;\n          } else {\n            String intendedConfigSetName = ConfigSetsHandlerApi.getSuffixedNameForAutoGeneratedConfigSet(coll);\n            copyDefaultConfigSetTo(configNames, intendedConfigSetName);\n            return intendedConfigSetName;\n          }\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it: {}\", configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"4abf821a41a2fdca2a1dea148999931d22e20529":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9":["6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1852cb03cf4922477072449dd9de2fab588d1adb":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1852cb03cf4922477072449dd9de2fab588d1adb"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["4abf821a41a2fdca2a1dea148999931d22e20529"],"4abf821a41a2fdca2a1dea148999931d22e20529":["1852cb03cf4922477072449dd9de2fab588d1adb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1852cb03cf4922477072449dd9de2fab588d1adb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}