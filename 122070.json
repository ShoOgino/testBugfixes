{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","commits":[{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e3a7c47e11ff0c156c646c37d20af7249370d2","date":1363813308,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] indices = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, indices == null ? pos++ : indices[pos++]);\n        }\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","36f5a8c57e16c0f801006a52f87c75378427852e"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"36f5a8c57e16c0f801006a52f87c75378427852e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}