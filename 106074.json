{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","commits":[{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"/dev/null","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*3));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e2a20e20f159c8dd2a939c390ed04a5148efb26","date":1487880728,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*3));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(\"distrib\", \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d46ef4f5628f059a25b616ca1ae764c69dc6741","date":1530637775,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!sigificantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(Map.Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(Map.Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(String key : paramsMap.keySet()) {\n        params.add(key, paramsMap.get(key));\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream.SignificantTermsCall#call().mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(Map.Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","sourceOld":"    public NamedList<Double> call() throws Exception {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      HttpSolrClient solrClient = cache.getHttpSolrClient(baseUrl);\n\n      params.add(DISTRIB, \"false\");\n      params.add(\"fq\",\"{!significantTerms}\");\n\n      for(Map.Entry<String, String> entry : paramsMap.entrySet()) {\n        params.add(entry.getKey(), entry.getValue());\n      }\n\n      params.add(\"minDocFreq\", Float.toString(minDocFreq));\n      params.add(\"maxDocFreq\", Float.toString(maxDocFreq));\n      params.add(\"minTermLength\", Integer.toString(minTermLength));\n      params.add(\"field\", field);\n      params.add(\"numTerms\", String.valueOf(numTerms*5));\n      if (streamContext.isLocal()) {\n        params.add(\"distrib\", \"false\");\n      }\n\n      QueryRequest request= new QueryRequest(params, SolrRequest.METHOD.POST);\n      QueryResponse response = request.process(solrClient);\n      NamedList res = response.getResponse();\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f4c5d3859373c3a74734e85efa122b17514e3e8":["2e2a20e20f159c8dd2a939c390ed04a5148efb26"],"2e2a20e20f159c8dd2a939c390ed04a5148efb26":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"01624b85de12fb02335810bdf325124e59040772":["2e2a20e20f159c8dd2a939c390ed04a5148efb26"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["4d46ef4f5628f059a25b616ca1ae764c69dc6741"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["70d9c44f68e848648da304352cf7c045c33148f4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["01624b85de12fb02335810bdf325124e59040772","4d46ef4f5628f059a25b616ca1ae764c69dc6741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["01624b85de12fb02335810bdf325124e59040772"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"70d9c44f68e848648da304352cf7c045c33148f4":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"b0b597c65628ca9e73913a07e81691f8229bae35":["70d9c44f68e848648da304352cf7c045c33148f4","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["01624b85de12fb02335810bdf325124e59040772","4d46ef4f5628f059a25b616ca1ae764c69dc6741"]},"commit2Childs":{"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"2e2a20e20f159c8dd2a939c390ed04a5148efb26":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4d46ef4f5628f059a25b616ca1ae764c69dc6741","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["70d9c44f68e848648da304352cf7c045c33148f4"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","b0b597c65628ca9e73913a07e81691f8229bae35"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["2e2a20e20f159c8dd2a939c390ed04a5148efb26"],"70d9c44f68e848648da304352cf7c045c33148f4":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}