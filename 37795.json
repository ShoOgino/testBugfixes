{"path":"solr/solr-ref-guide/tools/ReducePDFSize#main(String[]).mjava","commits":[{"id":"d911f2420bc2c190c6ca1cbded67eca0f2bdf932","date":1494452425,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/ReducePDFSize#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    if (2 != args.length) {\n      throw new RuntimeException(\"arg0 must be input file, org1 must be output file\");\n    }\n    String in = args[0];\n    String out = args[1];\n    PDDocument doc = null;\n    \n    try {\n      doc = PDDocument.load(new File(in));\n      doc.setAllSecurityToBeRemoved(true);\n      for (COSObject cosObject : doc.getDocument().getObjects()) {\n        COSBase base = cosObject.getObject();\n        // if it's a stream: decode it, then re-write it using FLATE_DECODE\n        if (base instanceof COSStream) {\n          COSStream stream = (COSStream) base;\n          byte[] bytes;\n          try {\n            bytes = new PDStream(stream).toByteArray();\n          } catch (IOException ex) {\n            // NOTE: original example code from PDFBox just logged & \"continue;\"d here, 'skipping' this stream.\n            // If this type of failure ever happens, we can (perhaps) consider (re)ignoring this type of failure?\n            //\n            // IIUC then that will leave the original (non-decoded / non-flated) stream in place?\n            throw new RuntimeException(\"can't serialize byte[] from: \" +\n                                       cosObject.getObjectNumber() + \" \" + \n                                       cosObject.getGenerationNumber() + \" obj: \" + \n                                       ex.getMessage(), ex);\n          }\n          stream.removeItem(COSName.FILTER);\n          OutputStream streamOut = stream.createOutputStream(COSName.FLATE_DECODE);\n          streamOut.write(bytes);\n          streamOut.close();\n        }\n      }\n      doc.getDocumentCatalog();\n      doc.save( out );\n    } finally {\n      if ( doc != null ) {\n        doc.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solr-ref-guide/tools/ReducePDFSize#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    if (2 != args.length) {\n      throw new RuntimeException(\"arg0 must be input file, org1 must be output file\");\n    }\n    String in = args[0];\n    String out = args[1];\n    PDDocument doc = null;\n    \n    try {\n      doc = PDDocument.load(new File(in));\n      doc.setAllSecurityToBeRemoved(true);\n      for (COSObject cosObject : doc.getDocument().getObjects()) {\n        COSBase base = cosObject.getObject();\n        // if it's a stream: decode it, then re-write it using FLATE_DECODE\n        if (base instanceof COSStream) {\n          COSStream stream = (COSStream) base;\n          byte[] bytes;\n          try {\n            bytes = new PDStream(stream).toByteArray();\n          } catch (IOException ex) {\n            // NOTE: original example code from PDFBox just logged & \"continue;\"d here, 'skipping' this stream.\n            // If this type of failure ever happens, we can (perhaps) consider (re)ignoring this type of failure?\n            //\n            // IIUC then that will leave the original (non-decoded / non-flated) stream in place?\n            throw new RuntimeException(\"can't serialize byte[] from: \" +\n                                       cosObject.getObjectNumber() + \" \" + \n                                       cosObject.getGenerationNumber() + \" obj: \" + \n                                       ex.getMessage(), ex);\n          }\n          stream.removeItem(COSName.FILTER);\n          OutputStream streamOut = stream.createOutputStream(COSName.FLATE_DECODE);\n          streamOut.write(bytes);\n          streamOut.close();\n        }\n      }\n      doc.getDocumentCatalog();\n      doc.save( out );\n    } finally {\n      if ( doc != null ) {\n        doc.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solr-ref-guide/tools/ReducePDFSize#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    if (2 != args.length) {\n      throw new RuntimeException(\"arg0 must be input file, org1 must be output file\");\n    }\n    String in = args[0];\n    String out = args[1];\n    PDDocument doc = null;\n    \n    try {\n      doc = PDDocument.load(new File(in));\n      doc.setAllSecurityToBeRemoved(true);\n      for (COSObject cosObject : doc.getDocument().getObjects()) {\n        COSBase base = cosObject.getObject();\n        // if it's a stream: decode it, then re-write it using FLATE_DECODE\n        if (base instanceof COSStream) {\n          COSStream stream = (COSStream) base;\n          byte[] bytes;\n          try {\n            bytes = new PDStream(stream).toByteArray();\n          } catch (IOException ex) {\n            // NOTE: original example code from PDFBox just logged & \"continue;\"d here, 'skipping' this stream.\n            // If this type of failure ever happens, we can (perhaps) consider (re)ignoring this type of failure?\n            //\n            // IIUC then that will leave the original (non-decoded / non-flated) stream in place?\n            throw new RuntimeException(\"can't serialize byte[] from: \" +\n                                       cosObject.getObjectNumber() + \" \" + \n                                       cosObject.getGenerationNumber() + \" obj: \" + \n                                       ex.getMessage(), ex);\n          }\n          stream.removeItem(COSName.FILTER);\n          OutputStream streamOut = stream.createOutputStream(COSName.FLATE_DECODE);\n          streamOut.write(bytes);\n          streamOut.close();\n        }\n      }\n      doc.getDocumentCatalog();\n      doc.save( out );\n    } finally {\n      if ( doc != null ) {\n        doc.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"580584a6c5fc0f03777842090bc2d2dfb64337e5","date":1574200470,"type":4,"author":"Cassandra Targett","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solr-ref-guide/tools/ReducePDFSize#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws IOException {\n    if (2 != args.length) {\n      throw new RuntimeException(\"arg0 must be input file, org1 must be output file\");\n    }\n    String in = args[0];\n    String out = args[1];\n    PDDocument doc = null;\n    \n    try {\n      doc = PDDocument.load(new File(in));\n      doc.setAllSecurityToBeRemoved(true);\n      for (COSObject cosObject : doc.getDocument().getObjects()) {\n        COSBase base = cosObject.getObject();\n        // if it's a stream: decode it, then re-write it using FLATE_DECODE\n        if (base instanceof COSStream) {\n          COSStream stream = (COSStream) base;\n          byte[] bytes;\n          try {\n            bytes = new PDStream(stream).toByteArray();\n          } catch (IOException ex) {\n            // NOTE: original example code from PDFBox just logged & \"continue;\"d here, 'skipping' this stream.\n            // If this type of failure ever happens, we can (perhaps) consider (re)ignoring this type of failure?\n            //\n            // IIUC then that will leave the original (non-decoded / non-flated) stream in place?\n            throw new RuntimeException(\"can't serialize byte[] from: \" +\n                                       cosObject.getObjectNumber() + \" \" + \n                                       cosObject.getGenerationNumber() + \" obj: \" + \n                                       ex.getMessage(), ex);\n          }\n          stream.removeItem(COSName.FILTER);\n          OutputStream streamOut = stream.createOutputStream(COSName.FLATE_DECODE);\n          streamOut.write(bytes);\n          streamOut.close();\n        }\n      }\n      doc.getDocumentCatalog();\n      doc.save( out );\n    } finally {\n      if ( doc != null ) {\n        doc.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"d911f2420bc2c190c6ca1cbded67eca0f2bdf932":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"580584a6c5fc0f03777842090bc2d2dfb64337e5":["d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["580584a6c5fc0f03777842090bc2d2dfb64337e5"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"d911f2420bc2c190c6ca1cbded67eca0f2bdf932":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","580584a6c5fc0f03777842090bc2d2dfb64337e5"],"580584a6c5fc0f03777842090bc2d2dfb64337e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","d911f2420bc2c190c6ca1cbded67eca0f2bdf932"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","b31ebc7a867ddea79d438a8fca876a94e644d11a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}