{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Parse the strings containing Lucene queries.\r\n   *\r\n   * @param qs array of strings containing query expressions\r\n   * @param a  analyzer to use when parsing queries\r\n   * @return array of Lucene queries\r\n   */\r\n  private static Query[] createQueries(List qs, Analyzer a) {\r\n    QueryParser qp = new QueryParser(\"body\", a);\r\n    List queries = new ArrayList();\r\n    for (int i = 0; i < qs.size(); i++)  {\r\n      try {\r\n        \r\n        Object query = qs.get(i);\r\n        Query q = null;\r\n        if (query instanceof String) {\r\n          q = qp.parse((String) query);\r\n          \r\n        } else if (query instanceof Query) {\r\n          q = (Query) query;\r\n          \r\n        } else {\r\n          System.err.println(\"Unsupported Query Type: \" + query);\r\n        }\r\n        \r\n        if (q != null) {\r\n          queries.add(q);\r\n        }\r\n        \r\n      } catch (Exception e)  {\r\n        e.printStackTrace();\r\n      }\r\n    }\r\n    \r\n    return (Query[]) queries.toArray(new Query[0]);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(\"body\", a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\r\n   * Parse the strings containing Lucene queries.\r\n   *\r\n   * @param qs array of strings containing query expressions\r\n   * @param a  analyzer to use when parsing queries\r\n   * @return array of Lucene queries\r\n   */\r\n  private static Query[] createQueries(List qs, Analyzer a) {\r\n    QueryParser qp = new QueryParser(\"body\", a);\r\n    List queries = new ArrayList();\r\n    for (int i = 0; i < qs.size(); i++)  {\r\n      try {\r\n        \r\n        Object query = qs.get(i);\r\n        Query q = null;\r\n        if (query instanceof String) {\r\n          q = qp.parse((String) query);\r\n          \r\n        } else if (query instanceof Query) {\r\n          q = (Query) query;\r\n          \r\n        } else {\r\n          System.err.println(\"Unsupported Query Type: \" + query);\r\n        }\r\n        \r\n        if (q != null) {\r\n          queries.add(q);\r\n        }\r\n        \r\n      } catch (Exception e)  {\r\n        e.printStackTrace();\r\n      }\r\n    }\r\n    \r\n    return (Query[]) queries.toArray(new Query[0]);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(BasicDocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(\"body\", a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(BasicDocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(DocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List[Object],Analyzer).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ReutersQueryMaker#createQueries(List,Analyzer).mjava","sourceNew":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List<Object> qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List<Object> queries = new ArrayList<Object>();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse the strings containing Lucene queries.\n   *\n   * @param qs array of strings containing query expressions\n   * @param a  analyzer to use when parsing queries\n   * @return array of Lucene queries\n   */\n  private static Query[] createQueries(List qs, Analyzer a) {\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD, a);\n    List queries = new ArrayList();\n    for (int i = 0; i < qs.size(); i++)  {\n      try {\n        \n        Object query = qs.get(i);\n        Query q = null;\n        if (query instanceof String) {\n          q = qp.parse((String) query);\n          \n        } else if (query instanceof Query) {\n          q = (Query) query;\n          \n        } else {\n          System.err.println(\"Unsupported Query Type: \" + query);\n        }\n        \n        if (q != null) {\n          queries.add(q);\n        }\n        \n      } catch (Exception e)  {\n        e.printStackTrace();\n      }\n    }\n    \n    return (Query[]) queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["ba1116b3450a9c1642c89445d131b37344055245"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"ba1116b3450a9c1642c89445d131b37344055245":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"ba1116b3450a9c1642c89445d131b37344055245":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}