{"path":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Object[] fields = new Object[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\treturn doc;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa","date":1080060596,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Object[] fields = new Object[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\tif (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n\t\treturn doc;\n\t}\n\n","sourceOld":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Object[] fields = new Object[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\treturn doc;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35c39157e8b6bc585e3a07e703d75db0f2ad56b2","date":1082672595,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Comparable[] fields = new Comparable[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\tif (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n\t\treturn doc;\n\t}\n\n","sourceOld":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Object[] fields = new Object[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\tif (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n\t\treturn doc;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":4,"author":"Tim Jones","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiFieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Given a FieldDoc object, stores the values used\n\t * to sort the given document.  These values are not the raw\n\t * values out of the index, but the internal representation\n\t * of them.  This is so the given search hit can be collated\n\t * by a MultiSearcher with other search hits.\n\t * @param  doc  The FieldDoc to store sort values into.\n\t * @return  The same FieldDoc passed in.\n\t * @see Searchable#search(Query,Filter,int,Sort)\n\t */\n\tFieldDoc fillFields (final FieldDoc doc) {\n\t\tfinal int n = comparators.length;\n\t\tfinal Comparable[] fields = new Comparable[n];\n\t\tfor (int i=0; i<n; ++i)\n\t\t\tfields[i] = comparators[i].sortValue(doc);\n\t\tdoc.fields = fields;\n\t\tif (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n\t\treturn doc;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"35c39157e8b6bc585e3a07e703d75db0f2ad56b2":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["35c39157e8b6bc585e3a07e703d75db0f2ad56b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}