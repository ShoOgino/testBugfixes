{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/GoLive#goLive(Options,FileStatus[]).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/GoLive#goLive(Options,FileStatus[]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: handle clusters with replicas\n  public boolean goLive(Options options, FileStatus[] outDirs) {\n    LOG.info(\"Live merging of output shards into Solr cluster...\");\n    boolean success = false;\n    long start = System.currentTimeMillis();\n    int concurrentMerges = options.goLiveThreads;\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(concurrentMerges,\n        concurrentMerges, 1, TimeUnit.SECONDS,\n        new LinkedBlockingQueue<Runnable>());\n    \n    try {\n      CompletionService<Request> completionService = new ExecutorCompletionService<Request>(executor);\n      Set<Future<Request>> pending = new HashSet<Future<Request>>();\n      int cnt = -1;\n      for (final FileStatus dir : outDirs) {\n        \n        LOG.debug(\"processing: \" + dir.getPath());\n\n        cnt++;\n        List<String> urls = options.shardUrls.get(cnt);\n        \n        for (String url : urls) {\n          \n          String baseUrl = url;\n          if (baseUrl.endsWith(\"/\")) {\n            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n          }\n          \n          int lastPathIndex = baseUrl.lastIndexOf(\"/\");\n          if (lastPathIndex == -1) {\n            LOG.error(\"Found unexpected shardurl, live merge failed: \" + baseUrl);\n            return false;\n          }\n          \n          final String name = baseUrl.substring(lastPathIndex + 1);\n          baseUrl = baseUrl.substring(0, lastPathIndex);\n          final String mergeUrl = baseUrl;\n          \n          Callable<Request> task = new Callable<Request>() {\n            @Override\n            public Request call() {\n              Request req = new Request();\n              LOG.info(\"Live merge \" + dir.getPath() + \" into \" + mergeUrl);\n              final HttpSolrServer server = new HttpSolrServer(mergeUrl);\n              try {\n                CoreAdminRequest.MergeIndexes mergeRequest = new CoreAdminRequest.MergeIndexes();\n                mergeRequest.setCoreName(name);\n                mergeRequest.setIndexDirs(Arrays.asList(dir.getPath().toString() + \"/data/index\"));\n                try {\n                  mergeRequest.process(server);\n                  req.success = true;\n                } catch (SolrServerException e) {\n                  req.e = e;\n                  return req;\n                } catch (IOException e) {\n                  req.e = e;\n                  return req;\n                }\n              } finally {\n                server.shutdown();\n              }\n              return req;\n            }\n          };\n          pending.add(completionService.submit(task));\n        }\n      }\n      \n      while (pending != null && pending.size() > 0) {\n        try {\n          Future<Request> future = completionService.take();\n          if (future == null) break;\n          pending.remove(future);\n          \n          try {\n            Request req = future.get();\n            \n            if (!req.success) {\n              // failed\n              LOG.error(\"A live merge command failed\", req.e);\n              return false;\n            }\n            \n          } catch (ExecutionException e) {\n            LOG.error(\"Error sending live merge command\", e);\n            return false;\n          }\n          \n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          LOG.error(\"Live merge process interrupted\", e);\n          return false;\n        }\n      }\n      \n      cnt = -1;\n      \n      \n      try {\n        LOG.info(\"Committing live merge...\");\n        if (options.zkHost != null) {\n          CloudSolrServer server = new CloudSolrServer(options.zkHost);\n          server.setDefaultCollection(options.collection);\n          server.commit();\n          server.shutdown();\n        } else {\n          for (List<String> urls : options.shardUrls) {\n            for (String url : urls) {\n              // TODO: we should do these concurrently\n              HttpSolrServer server = new HttpSolrServer(url);\n              server.commit();\n              server.shutdown();\n            }\n          }\n        }\n        LOG.info(\"Done committing live merge\");\n      } catch (Exception e) {\n        LOG.error(\"Error sending commits to live Solr cluster\", e);\n        return false;\n      }\n\n      success = true;\n      return true;\n    } finally {\n      shutdownNowAndAwaitTermination(executor);\n      float secs = (System.currentTimeMillis() - start) / 1000.0f;\n      LOG.info(\"Live merging of index shards into Solr cluster took \" + secs + \" secs\");\n      if (success) {\n        LOG.info(\"Live merging completed successfully\");\n      } else {\n        LOG.info(\"Live merging failed\");\n      }\n    }\n    \n    // if an output dir does not exist, we should fail and do no merge?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive#goLive(Options,FileStatus[]).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/GoLive#goLive(Options,FileStatus[]).mjava","sourceNew":"  // TODO: handle clusters with replicas\n  public boolean goLive(Options options, FileStatus[] outDirs) {\n    LOG.info(\"Live merging of output shards into Solr cluster...\");\n    boolean success = false;\n    long start = System.currentTimeMillis();\n    int concurrentMerges = options.goLiveThreads;\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(concurrentMerges,\n        concurrentMerges, 1, TimeUnit.SECONDS,\n        new LinkedBlockingQueue<Runnable>());\n    \n    try {\n      CompletionService<Request> completionService = new ExecutorCompletionService<Request>(executor);\n      Set<Future<Request>> pending = new HashSet<Future<Request>>();\n      int cnt = -1;\n      for (final FileStatus dir : outDirs) {\n        \n        LOG.debug(\"processing: \" + dir.getPath());\n\n        cnt++;\n        List<String> urls = options.shardUrls.get(cnt);\n        \n        for (String url : urls) {\n          \n          String baseUrl = url;\n          if (baseUrl.endsWith(\"/\")) {\n            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n          }\n          \n          int lastPathIndex = baseUrl.lastIndexOf(\"/\");\n          if (lastPathIndex == -1) {\n            LOG.error(\"Found unexpected shardurl, live merge failed: \" + baseUrl);\n            return false;\n          }\n          \n          final String name = baseUrl.substring(lastPathIndex + 1);\n          baseUrl = baseUrl.substring(0, lastPathIndex);\n          final String mergeUrl = baseUrl;\n          \n          Callable<Request> task = new Callable<Request>() {\n            @Override\n            public Request call() {\n              Request req = new Request();\n              LOG.info(\"Live merge \" + dir.getPath() + \" into \" + mergeUrl);\n              final HttpSolrServer server = new HttpSolrServer(mergeUrl);\n              try {\n                CoreAdminRequest.MergeIndexes mergeRequest = new CoreAdminRequest.MergeIndexes();\n                mergeRequest.setCoreName(name);\n                mergeRequest.setIndexDirs(Arrays.asList(dir.getPath().toString() + \"/data/index\"));\n                try {\n                  mergeRequest.process(server);\n                  req.success = true;\n                } catch (SolrServerException e) {\n                  req.e = e;\n                  return req;\n                } catch (IOException e) {\n                  req.e = e;\n                  return req;\n                }\n              } finally {\n                server.shutdown();\n              }\n              return req;\n            }\n          };\n          pending.add(completionService.submit(task));\n        }\n      }\n      \n      while (pending != null && pending.size() > 0) {\n        try {\n          Future<Request> future = completionService.take();\n          if (future == null) break;\n          pending.remove(future);\n          \n          try {\n            Request req = future.get();\n            \n            if (!req.success) {\n              // failed\n              LOG.error(\"A live merge command failed\", req.e);\n              return false;\n            }\n            \n          } catch (ExecutionException e) {\n            LOG.error(\"Error sending live merge command\", e);\n            return false;\n          }\n          \n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          LOG.error(\"Live merge process interrupted\", e);\n          return false;\n        }\n      }\n      \n      cnt = -1;\n      \n      \n      try {\n        LOG.info(\"Committing live merge...\");\n        if (options.zkHost != null) {\n          CloudSolrServer server = new CloudSolrServer(options.zkHost);\n          server.setDefaultCollection(options.collection);\n          server.commit();\n          server.shutdown();\n        } else {\n          for (List<String> urls : options.shardUrls) {\n            for (String url : urls) {\n              // TODO: we should do these concurrently\n              HttpSolrServer server = new HttpSolrServer(url);\n              server.commit();\n              server.shutdown();\n            }\n          }\n        }\n        LOG.info(\"Done committing live merge\");\n      } catch (Exception e) {\n        LOG.error(\"Error sending commits to live Solr cluster\", e);\n        return false;\n      }\n\n      success = true;\n      return true;\n    } finally {\n      shutdownNowAndAwaitTermination(executor);\n      float secs = (System.currentTimeMillis() - start) / 1000.0f;\n      LOG.info(\"Live merging of index shards into Solr cluster took \" + secs + \" secs\");\n      if (success) {\n        LOG.info(\"Live merging completed successfully\");\n      } else {\n        LOG.info(\"Live merging failed\");\n      }\n    }\n    \n    // if an output dir does not exist, we should fail and do no merge?\n  }\n\n","sourceOld":"  // TODO: handle clusters with replicas\n  public boolean goLive(Options options, FileStatus[] outDirs) {\n    LOG.info(\"Live merging of output shards into Solr cluster...\");\n    boolean success = false;\n    long start = System.currentTimeMillis();\n    int concurrentMerges = options.goLiveThreads;\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(concurrentMerges,\n        concurrentMerges, 1, TimeUnit.SECONDS,\n        new LinkedBlockingQueue<Runnable>());\n    \n    try {\n      CompletionService<Request> completionService = new ExecutorCompletionService<Request>(executor);\n      Set<Future<Request>> pending = new HashSet<Future<Request>>();\n      int cnt = -1;\n      for (final FileStatus dir : outDirs) {\n        \n        LOG.debug(\"processing: \" + dir.getPath());\n\n        cnt++;\n        List<String> urls = options.shardUrls.get(cnt);\n        \n        for (String url : urls) {\n          \n          String baseUrl = url;\n          if (baseUrl.endsWith(\"/\")) {\n            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n          }\n          \n          int lastPathIndex = baseUrl.lastIndexOf(\"/\");\n          if (lastPathIndex == -1) {\n            LOG.error(\"Found unexpected shardurl, live merge failed: \" + baseUrl);\n            return false;\n          }\n          \n          final String name = baseUrl.substring(lastPathIndex + 1);\n          baseUrl = baseUrl.substring(0, lastPathIndex);\n          final String mergeUrl = baseUrl;\n          \n          Callable<Request> task = new Callable<Request>() {\n            @Override\n            public Request call() {\n              Request req = new Request();\n              LOG.info(\"Live merge \" + dir.getPath() + \" into \" + mergeUrl);\n              final HttpSolrServer server = new HttpSolrServer(mergeUrl);\n              try {\n                CoreAdminRequest.MergeIndexes mergeRequest = new CoreAdminRequest.MergeIndexes();\n                mergeRequest.setCoreName(name);\n                mergeRequest.setIndexDirs(Arrays.asList(dir.getPath().toString() + \"/data/index\"));\n                try {\n                  mergeRequest.process(server);\n                  req.success = true;\n                } catch (SolrServerException e) {\n                  req.e = e;\n                  return req;\n                } catch (IOException e) {\n                  req.e = e;\n                  return req;\n                }\n              } finally {\n                server.shutdown();\n              }\n              return req;\n            }\n          };\n          pending.add(completionService.submit(task));\n        }\n      }\n      \n      while (pending != null && pending.size() > 0) {\n        try {\n          Future<Request> future = completionService.take();\n          if (future == null) break;\n          pending.remove(future);\n          \n          try {\n            Request req = future.get();\n            \n            if (!req.success) {\n              // failed\n              LOG.error(\"A live merge command failed\", req.e);\n              return false;\n            }\n            \n          } catch (ExecutionException e) {\n            LOG.error(\"Error sending live merge command\", e);\n            return false;\n          }\n          \n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          LOG.error(\"Live merge process interrupted\", e);\n          return false;\n        }\n      }\n      \n      cnt = -1;\n      \n      \n      try {\n        LOG.info(\"Committing live merge...\");\n        if (options.zkHost != null) {\n          CloudSolrServer server = new CloudSolrServer(options.zkHost);\n          server.setDefaultCollection(options.collection);\n          server.commit();\n          server.shutdown();\n        } else {\n          for (List<String> urls : options.shardUrls) {\n            for (String url : urls) {\n              // TODO: we should do these concurrently\n              HttpSolrServer server = new HttpSolrServer(url);\n              server.commit();\n              server.shutdown();\n            }\n          }\n        }\n        LOG.info(\"Done committing live merge\");\n      } catch (Exception e) {\n        LOG.error(\"Error sending commits to live Solr cluster\", e);\n        return false;\n      }\n\n      success = true;\n      return true;\n    } finally {\n      shutdownNowAndAwaitTermination(executor);\n      float secs = (System.currentTimeMillis() - start) / 1000.0f;\n      LOG.info(\"Live merging of index shards into Solr cluster took \" + secs + \" secs\");\n      if (success) {\n        LOG.info(\"Live merging completed successfully\");\n      } else {\n        LOG.info(\"Live merging failed\");\n      }\n    }\n    \n    // if an output dir does not exist, we should fail and do no merge?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}