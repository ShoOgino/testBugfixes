{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator(null));\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(NumericRangeQuery.newIntRange(\"trieInt\", NumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(NumericRangeQuery.newLongRange(\"trieLong\", NumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = NumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = NumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = NumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = NumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        StoredDocument d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":null,"sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":null,"sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNumericFields().mjava","sourceNew":null,"sourceOld":"  public void testNumericFields() throws Exception {\n    for (String name : oldNames) {\n      \n      Directory dir = oldIndexDirs.get(name);\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      \n      for (int id=10; id<15; id++) {\n        ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.valueOf(id), Integer.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        Document d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n        \n        hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.valueOf(id), Long.valueOf(id), true, true), 100).scoreDocs;\n        assertEquals(\"wrong number of hits\", 1, hits.length);\n        d = searcher.doc(hits[0].doc);\n        assertEquals(String.valueOf(id), d.get(\"id\"));\n      }\n      \n      // check that also lower-precision fields are ok\n      ScoreDoc[] hits = searcher.search(LegacyNumericRangeQuery.newIntRange(\"trieInt\", LegacyNumericUtils.PRECISION_STEP_DEFAULT_32, Integer.MIN_VALUE, Integer.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      hits = searcher.search(LegacyNumericRangeQuery.newLongRange(\"trieLong\", LegacyNumericUtils.PRECISION_STEP_DEFAULT, Long.MIN_VALUE, Long.MAX_VALUE, false, false), 100).scoreDocs;\n      assertEquals(\"wrong number of hits\", 34, hits.length);\n      \n      // check decoding of terms\n      Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieInt\");\n      TermsEnum termsEnum = LegacyNumericUtils.filterPrefixCodedInts(terms.iterator());\n      while (termsEnum.next() != null) {\n        int val = LegacyNumericUtils.prefixCodedToInt(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0 && val < 35);\n      }\n      \n      terms = MultiFields.getTerms(searcher.getIndexReader(), \"trieLong\");\n      termsEnum = LegacyNumericUtils.filterPrefixCodedLongs(terms.iterator());\n      while (termsEnum.next() != null) {\n        long val = LegacyNumericUtils.prefixCodedToLong(termsEnum.term());\n        assertTrue(\"value in id bounds\", val >= 0L && val < 35L);\n      }\n      \n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a178ac3dec643551e66363c457a9074f55545f86":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["770342641f7b505eaa8dccdc666158bff2419109"],"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}