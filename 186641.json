{"path":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"/dev/null","sourceNew":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(getAlias());\n    cols = new ArrayList<>(cols);\n    cols.sort(String::compareTo); // don't really care about the order here.\n    assert !cols.isEmpty();\n\n    int totalNumFound = 0;\n    for (String col : cols) {\n      final QueryResponse colResponse = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\"));\n      long numFound = colResponse.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n      }\n    }\n    final QueryResponse colResponse = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    long aliasNumFound = colResponse.getResults().getNumFound();\n    List<String> actual = Arrays.asList(expectedColls);\n    actual.sort(String::compareTo);\n    assertArrayEquals(\"Expected \" + expectedColls.length + \" collections, found \" + cols.size() + \":\\n\" +\n            cols + \" vs \\n\" + actual, expectedColls, cols.toArray());\n    assertEquals(\"Expected collections and alias to have same number of documents\",\n        aliasNumFound, totalNumFound);\n    assertEquals(\"Expected to find \" + expectNumFound + \" docs but found \" + aliasNumFound,\n        expectNumFound, aliasNumFound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf78a55e1864fa3f0c50ca04de0a010a800e533","date":1554818536,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#assertInvariants(String...).mjava","sourceNew":"  /*\n   * We expect the following invariants:\n   *    1.) to see all the supplied collections\n   *    2.) Independently Querying all collections we can find to yield the same number of docs as querying the alias\n   *    3.) find as many docs as have been added but not deleted/failed\n   */\n  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    List<String> observedCols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(getAlias());\n    observedCols = new ArrayList<>(observedCols);\n    observedCols.sort(String::compareTo); // don't really care about the order here.\n    assert !observedCols.isEmpty();\n\n    int numFoundViaCollections = 0;\n    for (String col : observedCols) {\n      final QueryResponse colResponse = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\"));\n      long numFound = colResponse.getResults().getNumFound();\n      if (numFound > 0) {\n        numFoundViaCollections += numFound;\n      }\n    }\n    final QueryResponse colResponse = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    long numFoundViaAlias = colResponse.getResults().getNumFound();\n    List<String> expectedList = Arrays.asList(expectedColls);\n    expectedList.sort(String::compareTo);\n    assertArrayEquals(\"Expected \" + expectedColls.length + \" collections, found \" + observedCols.size() + \":\\n\" +\n            observedCols + \" vs \\n\" + expectedList, expectedColls, observedCols.toArray());\n    assertEquals(\"Expected collections and alias to have same number of documents\",\n        numFoundViaAlias, numFoundViaCollections);\n    assertEquals(\"Expected to find \" + expectNumFound + \" docs but found \" + numFoundViaAlias,\n        expectNumFound, numFoundViaAlias);\n  }\n\n","sourceOld":"  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {\n    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs\n\n    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(getAlias());\n    cols = new ArrayList<>(cols);\n    cols.sort(String::compareTo); // don't really care about the order here.\n    assert !cols.isEmpty();\n\n    int totalNumFound = 0;\n    for (String col : cols) {\n      final QueryResponse colResponse = solrClient.query(col, params(\n          \"q\", \"*:*\",\n          \"rows\", \"0\"));\n      long numFound = colResponse.getResults().getNumFound();\n      if (numFound > 0) {\n        totalNumFound += numFound;\n      }\n    }\n    final QueryResponse colResponse = solrClient.query(getAlias(), params(\n        \"q\", \"*:*\",\n        \"rows\", \"0\"));\n    long aliasNumFound = colResponse.getResults().getNumFound();\n    List<String> actual = Arrays.asList(expectedColls);\n    actual.sort(String::compareTo);\n    assertArrayEquals(\"Expected \" + expectedColls.length + \" collections, found \" + cols.size() + \":\\n\" +\n            cols + \" vs \\n\" + actual, expectedColls, cols.toArray());\n    assertEquals(\"Expected collections and alias to have same number of documents\",\n        aliasNumFound, totalNumFound);\n    assertEquals(\"Expected to find \" + expectNumFound + \" docs but found \" + aliasNumFound,\n        expectNumFound, aliasNumFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}