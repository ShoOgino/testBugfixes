{"path":"src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","commits":[{"id":"80c633e661becbcb6deb6ea2ef4588d230102f50","date":1234308117,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"/dev/null","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","pathOld":"src/test/org/apache/solr/common/util/TestHash#testEqualsLOOKUP3().mjava","sourceNew":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","sourceOld":"  // Test that the java version produces the same output as the C version\n  public void testEqualsLOOKUP3() {\n    int[] hashes = new int[] {0xc4c20dd5,0x3ab04cc3,0xebe874a3,0x0e770ef3,0xec321498,0x73845e86,0x8a2db728,0x03c313bb,0xfe5b9199,0x95965125,0xcbc4e7c2};\n    /*** the hash values were generated by adding the following to lookup3.c\n     *\n     * char* s = \"hello world\";\n     * int len = strlen(s);\n     * uint32_t a[len];\n     * for (int i=0; i<len; i++) {\n     *   a[i]=s[i];\n     *   uint32_t result = hashword(a, i+1, i*12345);\n     *   printf(\"0x%.8x\\n\", result);\n     * }\n     *\n     */\n\n    String s = \"hello world\";\n    int[] a = new int[s.length()];\n    for (int i=0; i<s.length(); i++) {\n      a[i] = s.charAt(i);\n      int len = i+1;\n      int hash = Hash.lookup3(a, 0, len, i*12345);\n      assertEquals(hashes[i], hash);\n      int hash2 = Hash.lookup3ycs(a, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash2);\n      int hash3 = Hash.lookup3ycs(s, 0, len, i*12345+(len<<2));\n      assertEquals(hashes[i], hash3);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"80c633e661becbcb6deb6ea2ef4588d230102f50":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80c633e661becbcb6deb6ea2ef4588d230102f50":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}