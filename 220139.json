{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#BinaryDictionary().mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#BinaryDictionary().mjava","pathOld":"/dev/null","sourceNew":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#BinaryDictionary().mjava","pathOld":"/dev/null","sourceNew":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c149f6975379ebb860e93139126a8aabf8e2b66d","date":1562857174,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#BinaryDictionary().mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/BinaryDictionary#BinaryDictionary().mjava","sourceNew":"  protected BinaryDictionary() throws IOException {\n    this(ResourceScheme.CLASSPATH, null);\n  }\n\n","sourceOld":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    ByteBuffer buffer = null;\n    boolean success = false;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n\n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new POS.Tag[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = POS.resolveTag(in.readByte());\n      }\n      posIS.close(); posIS = null;\n\n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(mapIS, dictIS);\n      } else {\n        IOUtils.closeWhileHandlingException(mapIS, dictIS);\n      }\n    }\n\n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.buffer = buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["5c6453827f947004a68ad9db7418781e9df2f660"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"c149f6975379ebb860e93139126a8aabf8e2b66d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["c149f6975379ebb860e93139126a8aabf8e2b66d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}