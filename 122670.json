{"path":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","pathOld":"/dev/null","sourceNew":"  public void testNextCursorMark() {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd3693b696a64d987bf4b3a14399d2105f16b05e","date":1396054865,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","sourceNew":"  public void testNextCursorMark() throws IOException {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","sourceOld":"  public void testNextCursorMark() {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","sourceNew":"  public void testNextCursorMark() throws IOException {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","sourceOld":"  public void testNextCursorMark() {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testNextCursorMark().mjava","sourceNew":"  public void testNextCursorMark() throws IOException {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = SortSpecParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = SortSpecParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","sourceOld":"  public void testNextCursorMark() throws IOException {\n    final Collection<String> allFieldNames = getAllFieldNames();\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n\n    final String randomSortString = CursorPagingTest.buildRandomSort(allFieldNames);\n    final SortSpec ss = QueryParsing.parseSortSpec(randomSortString, req);\n\n    final CursorMark previous = new CursorMark(schema, ss);\n    previous.parseSerializedTotem(CURSOR_MARK_START);\n\n    List<Object> nextValues = Arrays.<Object>asList(buildRandomSortObjects(ss));\n    final CursorMark next = previous.createNext(nextValues);\n    assertEquals(\"next values not correct\", nextValues, next.getSortValues());\n    assertEquals(\"next SortSpec not correct\", ss, next.getSortSpec());\n\n    try {\n      // append to our random sort string so we know it has wrong num clauses\n      final SortSpec otherSort = QueryParsing.parseSortSpec(randomSortString+\",id asc\", req);\n      CursorMark trash = previous.createNext(Arrays.<Object>asList\n                                             (buildRandomSortObjects(otherSort)));\n      fail(\"didn't fail on next with incorrect num of sortvalues\");\n    } catch (AssertionError e) {\n      // NOOP: we're happy\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"6c8dc56dbae186505066de8a78986cba31525ef0":["cd3693b696a64d987bf4b3a14399d2105f16b05e"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8dc56dbae186505066de8a78986cba31525ef0"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6c8dc56dbae186505066de8a78986cba31525ef0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["5eb2511ababf862ea11e10761c70ee560cd84510","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["5eb2511ababf862ea11e10761c70ee560cd84510","6c8dc56dbae186505066de8a78986cba31525ef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}