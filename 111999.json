{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, dimOffset, packedValue, packedValueOffset + dimOffset);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, dimOffset, packedValue, packedValueOffset + dimOffset);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, dimOffset, packedValue, packedValueOffset + dimOffset);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = FutureArrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, dimOffset, packedValue, packedValueOffset + dimOffset);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = Arrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = FutureArrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = Arrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0  && numDataDims > numIndexDims) {\n        int dataOffset = numIndexDims * bytesPerDim;\n        cmp = Arrays.compareUnsigned(lastPackedValue, dataOffset, packedBytesLength, packedValue, packedValueOffset + dataOffset, packedValueOffset + packedBytesLength);\n        if (cmp > 0) {\n          throw new AssertionError(\"data values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n        }\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = Arrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(BKDConfig,long,int,byte[],byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,int,byte[],byte[],int,int,int).mjava","sourceNew":"  // only called from assert\n  private static boolean valueInOrder(BKDConfig config, long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * config.bytesPerDim;\n    if (ord > 0) {\n      int cmp = Arrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + config.bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + config.bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, config.packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0  && config.numDims > config.numIndexDims) {\n        cmp = Arrays.compareUnsigned(lastPackedValue, config.packedIndexBytesLength, config.packedBytesLength, packedValue, packedValueOffset + config.packedIndexBytesLength, packedValueOffset + config.packedBytesLength);\n        if (cmp > 0) {\n          throw new AssertionError(\"data values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, config.packedBytesLength) + \" ord=\" + ord);\n        }\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, config.packedBytesLength);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, int sortedDim, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset,\n      int doc, int lastDoc) {\n    int dimOffset = sortedDim * bytesPerDim;\n    if (ord > 0) {\n      int cmp = Arrays.compareUnsigned(lastPackedValue, dimOffset, dimOffset + bytesPerDim, packedValue, packedValueOffset + dimOffset, packedValueOffset + dimOffset + bytesPerDim);\n      if (cmp > 0) {\n        throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n      }\n      if (cmp == 0  && numDataDims > numIndexDims) {\n        int dataOffset = numIndexDims * bytesPerDim;\n        cmp = Arrays.compareUnsigned(lastPackedValue, dataOffset, packedBytesLength, packedValue, packedValueOffset + dataOffset, packedValueOffset + packedBytesLength);\n        if (cmp > 0) {\n          throw new AssertionError(\"data values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n        }\n      }\n      if (cmp == 0 && doc < lastDoc) {\n        throw new AssertionError(\"docs out of order: last doc=\" + lastDoc + \" current doc=\" + doc + \" ord=\" + ord);\n      }\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, packedBytesLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c7f06758793500ca773d0df1037290e6e404fb33"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}