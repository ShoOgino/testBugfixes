{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"/dev/null","sourceNew":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(Vector v) {\n        double t = this.evaluate(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","sourceNew":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = this.evaluate(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","sourceOld":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(Vector v) {\n        double t = this.evaluate(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4762743d2f10f32ae47dc222ef92e0807ffe2ab8","date":1429841956,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","sourceNew":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = x*v.x + y*v.y + z*v.z;\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","sourceOld":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = this.evaluate(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47619c5413e53c4d414c1ececa274bef0cd3c799","date":1430506189,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","sourceNew":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = dotProduct(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","sourceOld":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = x*v.x + y*v.y + z*v.z;\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","sourceNew":"  /**\n   * Compute the square of the normal distance to a vector described by a\n   * vector taken from the origin.\n   * Monotonically increasing for arc distances up to PI/2.\n   *\n   * @param v is the vector to compute a distance to.\n   * @return the square of the normal distance.\n   */\n  public double normalDistanceSquared(final Vector v) {\n    double t = dotProduct(v);\n    double deltaX = this.x * t - v.x;\n    double deltaY = this.y * t - v.y;\n    double deltaZ = this.z * t - v.z;\n    return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n  }\n\n","sourceOld":"    /** Compute the square of the normal distance to a vector described by a\n     * vector taken from the origin.\n     * Monotonically increasing for arc distances up to PI/2.\n     *@param v is the vector to compute a distance to.\n     *@return the square of the normal distance.\n     */\n    public double normalDistanceSquared(final Vector v) {\n        double t = dotProduct(v);\n        double deltaX = this.x * t - v.x;\n        double deltaY = this.y * t - v.y;\n        double deltaZ = this.z * t - v.z;\n        return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the square of the normal distance to a vector described by a\n   * vector taken from the origin.\n   * Monotonically increasing for arc distances up to PI/2.\n   *\n   * @param v is the vector to compute a distance to.\n   * @return the square of the normal distance.\n   */\n  public double normalDistanceSquared(final Vector v) {\n    double t = dotProduct(v);\n    double deltaX = this.x * t - v.x;\n    double deltaY = this.y * t - v.y;\n    double deltaZ = this.z * t - v.z;\n    return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Vector#normalDistanceSquared(Vector).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Vector#normalDistanceSquared(Vector).mjava","sourceNew":"  /**\n   * Compute the square of the normal distance to a vector described by a\n   * vector taken from the origin.\n   * Monotonically increasing for arc distances up to PI/2.\n   *\n   * @param v is the vector to compute a distance to.\n   * @return the square of the normal distance.\n   */\n  public double normalDistanceSquared(final Vector v) {\n    double t = dotProduct(v);\n    double deltaX = this.x * t - v.x;\n    double deltaY = this.y * t - v.y;\n    double deltaZ = this.z * t - v.z;\n    return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n  }\n\n","sourceOld":"  /**\n   * Compute the square of the normal distance to a vector described by a\n   * vector taken from the origin.\n   * Monotonically increasing for arc distances up to PI/2.\n   *\n   * @param v is the vector to compute a distance to.\n   * @return the square of the normal distance.\n   */\n  public double normalDistanceSquared(final Vector v) {\n    double t = dotProduct(v);\n    double deltaX = this.x * t - v.x;\n    double deltaY = this.y * t - v.y;\n    double deltaZ = this.z * t - v.z;\n    return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"47619c5413e53c4d414c1ececa274bef0cd3c799":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["47619c5413e53c4d414c1ececa274bef0cd3c799"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}