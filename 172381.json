{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:$back domain for this test.\n      sb.append(\", refine: true, domain: { query: '{!v=$back}' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bd47e89c87cf4ff6e6c91af7f383ee810968fc3","date":1531457318,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:'*:*' domain for this test.\n      sb.append(\", refine: true, domain: { query: '*:*' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:$back domain for this test.\n      sb.append(\", refine: true, domain: { query: '{!v=$back}' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:'*:*' domain for this test.\n      sb.append(\", refine: true, domain: { query: '*:*' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:$back domain for this test.\n      sb.append(\", refine: true, domain: { query: '{!v=$back}' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:'*:*' domain for this test.\n      sb.append(\", refine: true, domain: { query: '*:*' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:$back domain for this test.\n      sb.append(\", refine: true, domain: { query: '{!v=$back}' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#toJSONFacetParamValue().mjava","sourceNew":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:'*:*' domain for this test.\n      sb.append(\", refine: true, domain: { query: '*:*' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","sourceOld":"    /**\n     * recursively generates the <code>json.facet</code> param value to use for testing this facet\n     */\n    private CharSequence toJSONFacetParamValue() {\n      final String limitStr = (null == limit) ? \"\" : (\", limit:\" + limit);\n      final String overrequestStr = (null == overrequest) ? \"\" : (\", overrequest:\" + overrequest);\n      final String sortStr = (null == sort) ? \"\" : (\", sort: '\" + sort + \"'\");\n      final StringBuilder sb\n        = new StringBuilder(\"{ type:terms, field:\" + field + limitStr + overrequestStr + sortStr);\n\n      // see class javadocs for why we always use refine:true & the query:'*:*' domain for this test.\n      sb.append(\", refine: true, domain: { query: '*:*' }, facet:\");\n      sb.append(toJSONFacetParamValue(subFacets, \"skg : 'relatedness($fore,$back)'\"));\n      sb.append(\"}\");\n      return sb;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["2c705a0d590cf911e7c942df49563ca2ea176e22","1bd47e89c87cf4ff6e6c91af7f383ee810968fc3"],"1bd47e89c87cf4ff6e6c91af7f383ee810968fc3":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["1bd47e89c87cf4ff6e6c91af7f383ee810968fc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["2c705a0d590cf911e7c942df49563ca2ea176e22","1bd47e89c87cf4ff6e6c91af7f383ee810968fc3"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","1bd47e89c87cf4ff6e6c91af7f383ee810968fc3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1bd47e89c87cf4ff6e6c91af7f383ee810968fc3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","92910727264a23a47b7a6c94b0f75d655537b9ea","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}