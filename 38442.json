{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,File).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrClient client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6","date":1423132645,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,File).mjava","sourceNew":null,"sourceOld":"  private void checkForBackupSuccess(final HttpSolrClient client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6"],"5939c5b1ac54c5b24bd7dbcaf6c68b510470e2c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}