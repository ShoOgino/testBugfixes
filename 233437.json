{"path":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","commits":[{"id":"0138e5e71484c40f557127baea701fd6d938c728","date":1241215944,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n    \n    primaryDir.close();\n    secondaryDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2","date":1241432181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n    \n    primaryDir.close();\n    secondaryDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(IndexFileNames.FIELDS_EXTENSION);\n    fileExtensions.add(IndexFileNames.FIELDS_INDEX_EXTENSION);\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundDocStore(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"775efee7f959e0dd3df7960b93767d9e00b78751":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2":["0138e5e71484c40f557127baea701fd6d938c728"],"0138e5e71484c40f557127baea701fd6d938c728":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["775efee7f959e0dd3df7960b93767d9e00b78751"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"775efee7f959e0dd3df7960b93767d9e00b78751":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"0138e5e71484c40f557127baea701fd6d938c728":["6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["775efee7f959e0dd3df7960b93767d9e00b78751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0138e5e71484c40f557127baea701fd6d938c728"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}