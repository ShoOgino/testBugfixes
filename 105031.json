{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","commits":[{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      Writer w = Ints.getWriter(dir, \"test\", false);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      Writer w = Ints.getWriter(dir, \"test\", false);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n        LongsRef ints = attr.ints();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        DocValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        DocValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        ValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        DocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final AtomicLong trackBytes = new AtomicLong(0);\n      Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        values[i] = v;\n        w.add(i, v);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n\n      DocValues r = Ints.getValues(dir, \"test\", false);\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        DocValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i++) {\n          assertEquals(i, iEnum.nextDoc());\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n\n      for (int iter = 0; iter < 2; iter++) {\n        DocValuesEnum iEnum = r.getEnum();\n        LongsRef ints = iEnum.getInt();\n        for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n          assertEquals(i, iEnum.advance(i));\n          assertEquals(values[i], ints.get());\n        }\n        if (iEnum.docID() < NUM_VALUES - 1) {\n          assertEquals(NUM_VALUES - 1, iEnum.advance(NUM_VALUES - 1));\n        }\n        for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n        }\n\n        iEnum.close();\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        DocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          DocValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(DocValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"/dev/null","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"/dev/null","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":null,"sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":null,"sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes, newIOContext(random));\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false, newIOContext(random));\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes);\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","sourceNew":null,"sourceOld":"  public void testInts() throws IOException {\n    long[] maxMin = new long[] { \n        Long.MIN_VALUE, Long.MAX_VALUE,\n        1, Long.MAX_VALUE,\n        0, Long.MAX_VALUE,\n        -1, Long.MAX_VALUE,\n        Long.MIN_VALUE, -1,\n        random.nextInt(), random.nextInt() };\n    for (int j = 0; j < maxMin.length; j+=2) {\n      long maxV = 1;\n      final int NUM_VALUES = 777 + random.nextInt(777);\n      final long[] values = new long[NUM_VALUES];\n      for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n        Directory dir = newDirectory();\n        final AtomicLong trackBytes = new AtomicLong(0);\n        Writer w = Ints.getWriter(dir, \"test\", false, trackBytes, newIOContext(random));\n        values[0] = maxMin[j];\n        w.add(0, values[0]);\n        values[1] = maxMin[j+1];\n        w.add(1, values[1]);\n        for (int i = 2; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n        assertEquals(0, trackBytes.get());\n\n        IndexDocValues r = Ints.getValues(dir, \"test\", false, newIOContext(random));\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.nextDoc());\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = getEnum(r);\n          LongsRef ints = iEnum.getInt();\n          for (int i = 0; i < NUM_VALUES + additionalDocs; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            if (i < NUM_VALUES) {\n              assertEquals(values[i], ints.get());\n            } else {\n              assertEquals(0, ints.get());\n            }\n          }\n          assertEquals(ValuesEnum.NO_MORE_DOCS, iEnum.advance(NUM_VALUES + additionalDocs));\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["3bb13258feba31ab676502787ab2e1779f129b7a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"b5c559c875836474bafae7243263d93b1b1965db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["b5c559c875836474bafae7243263d93b1b1965db"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93c59ad5034eecd863f267bd75e1df7b8a51e427"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["3bb13258feba31ab676502787ab2e1779f129b7a"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2553b00f699380c64959ccb27991289aae87be2e":[],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"b5c559c875836474bafae7243263d93b1b1965db":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","b6f9be74ca7baaef11857ad002cad40419979516"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b5c559c875836474bafae7243263d93b1b1965db","2e8d7ba2175f47e280231533f7d3016249cea88b","3bb13258feba31ab676502787ab2e1779f129b7a"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["605b061fadf71aa6458c0005eaae83a98350c403"],"3bb13258feba31ab676502787ab2e1779f129b7a":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}