{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","commits":[{"id":"37ba6c2d18fe05b92cb264c3d67e4cae76f75136","date":1495126259,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   * @deprecated         Use the constructor that has a SolrParams obj rather than a Map\n   */\n  \n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","sourceNew":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   */\n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   * @deprecated         Use the constructor that has a SolrParams obj rather than a Map\n   */\n  \n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","sourceNew":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   */\n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   * @deprecated         Use the constructor that has a SolrParams obj rather than a Map\n   */\n  \n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SqlStream#SqlStream(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param zkHost         Zookeeper ensemble connection string\n   * @param collectionName Name of the collection to operate on\n   * @param params         Map&lt;String, String&gt; of parameter/value pairs\n   * @throws IOException Something went wrong\n   *                     <p>\n   *                     This form does not allow specifying multiple clauses, say \"fq\" clauses, use the form that\n   *                     takes a SolrParams. Transition code can call the preferred method that takes SolrParams\n   *                     by calling CloudSolrStream(zkHost, collectionName,\n   *                     new ModifiableSolrParams(SolrParams.toMultiMap(new NamedList(Map&lt;String, String&gt;)));\n   */\n  public SqlStream(String zkHost, String collectionName, SolrParams params) throws IOException {\n    init(collectionName, zkHost, params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136","63a1978c6710c767fa084741e3d6424840003a62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}