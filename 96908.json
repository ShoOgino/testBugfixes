{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"db8535b557900d292554ea8663e48d19733977e0","date":1376915424,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n   \n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n    \n    termState.docStartFP = longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP = longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP = longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n   \n    if (absolute) {\n      termState.docStartFP = 0;\n      termState.posStartFP = 0;\n      termState.payStartFP = 0;\n    }\n    termState.docStartFP += longs[0];\n    if (fieldHasPositions) {\n      termState.posStartFP += longs[1];\n      if (fieldHasOffsets || fieldHasPayloads) {\n        termState.payStartFP += longs[2];\n      }\n    }\n\n    if (termState.docFreq == 1) {\n      termState.singletonDocID = in.readVInt();\n    } else {\n      termState.singletonDocID = -1;\n    }\n    if (fieldHasPositions) {\n      if (termState.totalTermFreq > BLOCK_SIZE) {\n        termState.lastPosBlockOffset = in.readVLong();\n      } else {\n        termState.lastPosBlockOffset = -1;\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db8535b557900d292554ea8663e48d19733977e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["db8535b557900d292554ea8663e48d19733977e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"db8535b557900d292554ea8663e48d19733977e0":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db8535b557900d292554ea8663e48d19733977e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}