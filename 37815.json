{"path":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ab129f02d1eab2dd2407cfe612f47affe88803","date":1360701006,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.DEFAULT;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.DEFAULT;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.ALL_PARENTS;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":null,"sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.DEFAULT;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#testMultipleIndices().mjava","sourceNew":null,"sourceOld":"  /**\n   * Simple test to make sure the TotalFacetCountsManager updates the\n   * TotalFacetCounts array only when it is supposed to, and whether it\n   * is recomputed or read from disk, but this time with TWO different\n   * TotalFacetCounts\n   */\n  @Test\n  public void testMultipleIndices() throws IOException {\n    Directory indexDir1 = newDirectory(), indexDir2 = newDirectory();\n    Directory taxoDir1 = newDirectory(), taxoDir2 = newDirectory();\n    \n    // Create our index/taxonomy writers\n    IndexWriter indexWriter1 = new IndexWriter(indexDir1, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    IndexWriter indexWriter2 = new IndexWriter(indexDir2, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    TaxonomyWriter taxoWriter1 = new DirectoryTaxonomyWriter(taxoDir1);\n    TaxonomyWriter taxoWriter2 = new DirectoryTaxonomyWriter(taxoDir2);\n    FacetIndexingParams iParams = FacetIndexingParams.DEFAULT;\n\n    // Add a facet to the index\n    addFacets(iParams, indexWriter1, taxoWriter1, \"a\", \"b\");\n    addFacets(iParams, indexWriter1, taxoWriter1, \"d\", \"e\");\n    // Commit Changes\n    indexWriter1.commit();\n    indexWriter2.commit();\n    taxoWriter1.commit();\n    taxoWriter2.commit();\n\n    // Open two readers\n    DirectoryReader indexReader1 = DirectoryReader.open(indexDir1);\n    DirectoryReader indexReader2 = DirectoryReader.open(indexDir2);\n    TaxonomyReader taxoReader1 = new DirectoryTaxonomyReader(taxoDir1);\n    TaxonomyReader taxoReader2 = new DirectoryTaxonomyReader(taxoDir2);\n\n    // As this is the first time we have invoked the TotalFacetCountsManager, we\n    // should expect to compute.\n    TotalFacetCounts totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    int prevGen = -1;\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 1\");\n    assertTrue(\"attempt 1b for same input [0] shout find it in cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    \n    // 2nd Reader - As this is the first time we have invoked the\n    // TotalFacetCountsManager, we should expect a state of NEW to be returned.\n    TotalFacetCounts totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 2\");\n    assertTrue(\"attempt 2b for same input [1] shout find it in cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n\n    // Right now cache size is one, so first TFC is gone and should be recomputed  \n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 3\");\n    \n    // Similarly will recompute the second result  \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    prevGen = assertRecomputed(totalCounts1, prevGen, \"after attempt 4\");\n\n    // Now we set the cache size to two, meaning both should exist in the\n    // cache simultaneously\n    TFC.setCacheSize(2);\n\n    // Re-compute totalCounts0 (was evicted from the cache when the cache was smaller)\n    totalCounts0 = TFC.getTotalCounts(indexReader1, taxoReader1, iParams);\n    prevGen = assertRecomputed(totalCounts0, prevGen, \"after attempt 5\");\n\n    // now both are in the larger cache and should not be recomputed \n    totalCounts1 = TFC.getTotalCounts(indexReader2, taxoReader2, iParams);\n    assertTrue(\"with cache of size 2 res no. 0 should come from cache\",\n        totalCounts0 == TFC.getTotalCounts(indexReader1, taxoReader1, iParams));\n    assertTrue(\"with cache of size 2 res no. 1 should come from cache\",\n        totalCounts1 == TFC.getTotalCounts(indexReader2, taxoReader2, iParams));\n    \n    IOUtils.close(indexWriter1, indexWriter2, taxoWriter1, taxoWriter2);\n    IOUtils.close(indexReader1, indexReader2, taxoReader1, taxoReader2);\n    IOUtils.close(indexDir1, indexDir2, taxoDir1, taxoDir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["68ab129f02d1eab2dd2407cfe612f47affe88803"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["607428da722dcb3e86bbd11c63de8986e6275c36","68ab129f02d1eab2dd2407cfe612f47affe88803"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68ab129f02d1eab2dd2407cfe612f47affe88803":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["68ab129f02d1eab2dd2407cfe612f47affe88803","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","68ab129f02d1eab2dd2407cfe612f47affe88803"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"68ab129f02d1eab2dd2407cfe612f47affe88803":["d33e19a97046248623a7591aeaa6547233fd15e2","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}