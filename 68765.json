{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.perThread.pendingDeletes.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.perThread.pendingDeletes.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingDeletes.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.perThread.pendingDeletes.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingDeletes.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      final ArrayList<ThreadState> notPending = new ArrayList<DocumentsWriterPerThreadPool.ThreadState>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else if (flushOnDeleteTerms()\n          && state.dwpt.pendingUpdates.numTermDeletes.get() >= indexWriterConfig\n              .getMaxBufferedDeleteTerms()) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.MockDefaultFlushPolicy#onDelete(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n      final ArrayList<DocumentsWriterPerThread> pending = new ArrayList<>();\n      final ArrayList<DocumentsWriterPerThread> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = perThread.isFlushPending();\n      final DocumentsWriterPerThread toFlush;\n      if (perThread.isFlushPending()) {\n        toFlush = perThread;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, perThread);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.isFlushPending());\n        hasMarkedPending = true;\n      }\n\n      for (DocumentsWriterPerThread dwpt : notPending) {\n        assertFalse(dwpt.isFlushPending());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void onDelete(DocumentsWriterFlushControl control, ThreadState state) {\n      final ArrayList<ThreadState> pending = new ArrayList<>();\n      final ArrayList<ThreadState> notPending = new ArrayList<>();\n      findPending(control, pending, notPending);\n      final boolean flushCurrent = state.flushPending;\n      final ThreadState toFlush;\n      if (state.flushPending) {\n        toFlush = state;\n      } else {\n        toFlush = null;\n      }\n      super.onDelete(control, state);\n      if (toFlush != null) {\n        if (flushCurrent) {\n          assertTrue(pending.remove(toFlush));\n        } else {\n          assertTrue(notPending.remove(toFlush));\n        }\n        assertTrue(toFlush.flushPending);\n        hasMarkedPending = true;\n      }\n\n      for (ThreadState threadState : notPending) {\n        assertFalse(threadState.flushPending);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["28288370235ed02234a64753cdbf0c6ec096304a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}