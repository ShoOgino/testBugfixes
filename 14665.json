{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DimensionalRangeQuery#DimensionalRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  public PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    this.field = field;\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  public DimensionalRangeQuery(String field,\n                               byte[][] lowerPoint, boolean[] lowerInclusive,\n                               byte[][] upperPoint, boolean[] upperInclusive) {\n    this.field = field;\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  public PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    this.field = field;\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  public PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    this.field = field;\n    if (lowerPoint == null) {\n      throw new IllegalArgumentException(\"lowerPoint must not be null\");\n    }\n    if (upperPoint == null) {\n      throw new IllegalArgumentException(\"upperPoint must not be null\");\n    }\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * This is for subclasses and works on the underlying binary encoding: to\n   * create range queries for lucene's standard {@code Point} types, refer to these factory methods:\n   * <ul>\n   *   <li>{@link #newIntRange newIntRange()}/{@link #newMultiIntRange newMultiIntRange()} for fields indexed with {@link IntPoint}\n   *   <li>{@link #newIntRange newLongRange()}/{@link #newMultiIntRange newMultiLongRange()} for fields indexed with {@link LongPoint}\n   *   <li>{@link #newIntRange newFloatRange()}/{@link #newMultiIntRange newMultiFloatRange()} for fields indexed with {@link FloatPoint}\n   *   <li>{@link #newIntRange newDoubleRange()}/{@link #newMultiIntRange newMultiDoubleRange()} for fields indexed with {@link DoublePoint}\n   *   <li>{@link #newIntRange newBinaryRange()}/{@link #newMultiIntRange newMultiBinaryRange()} for fields indexed with {@link BinaryPoint}\n   * </ul>\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781d424d5cb04a1e2b47a26a0080e299279e56d3","date":1456427035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    if (lowerInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"lowerInclusive has length=\" + lowerInclusive.length + \" but expected=\" + numDims);\n    }\n    if (upperInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"upperInclusive has length=\" + upperInclusive.length + \" but expected=\" + numDims);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    if (lowerInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"lowerInclusive has length=\" + lowerInclusive.length + \" but expected=\" + numDims);\n    }\n    if (upperInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"upperInclusive has length=\" + upperInclusive.length + \" but expected=\" + numDims);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    if (lowerInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"lowerInclusive has length=\" + lowerInclusive.length + \" but expected=\" + numDims);\n    }\n    if (upperInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"upperInclusive has length=\" + upperInclusive.length + \" but expected=\" + numDims);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperPoint upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field,\n                         byte[][] lowerPoint, boolean[] lowerInclusive,\n                         byte[][] upperPoint, boolean[] upperInclusive) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    numDims = lowerPoint.length;\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    if (lowerInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"lowerInclusive has length=\" + lowerInclusive.length + \" but expected=\" + numDims);\n    }\n    if (upperInclusive.length != numDims) {\n      throw new IllegalArgumentException(\"upperInclusive has length=\" + upperInclusive.length + \" but expected=\" + numDims);\n    }\n    this.lowerPoint = lowerPoint;\n    this.lowerInclusive = lowerInclusive;\n    this.upperPoint = upperPoint;\n    this.upperInclusive = upperInclusive;\n\n    int bytesPerDim = -1;\n    for(byte[] value : lowerPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    for(byte[] value : upperPoint) {\n      if (value != null) {\n        if (bytesPerDim == -1) {\n          bytesPerDim = value.length;\n        } else if (value.length != bytesPerDim) {\n          throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + value.length);\n        }\n      }\n    }\n    if (bytesPerDim == -1) {\n      this.bytesPerDim = null;\n    } else {\n      this.bytesPerDim = bytesPerDim;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["781d424d5cb04a1e2b47a26a0080e299279e56d3","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["781d424d5cb04a1e2b47a26a0080e299279e56d3"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["781d424d5cb04a1e2b47a26a0080e299279e56d3","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"781d424d5cb04a1e2b47a26a0080e299279e56d3":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["781d424d5cb04a1e2b47a26a0080e299279e56d3"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"781d424d5cb04a1e2b47a26a0080e299279e56d3":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}