{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", Field.Index.ANALYZED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", Field.Index.ANALYZED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator().next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testZeroTerms().mjava","sourceNew":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testZeroTerms() throws Exception {\n    d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"one two three\", TextField.TYPE_UNSTORED));\n    doc = new Document();\n    doc.add(newField(\"field2\", \"one two three\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit();\n    w.deleteDocuments(new Term(\"field\", \"one\"));\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(1, r.numDocs());\n    assertEquals(1, r.maxDoc());\n    Terms terms = MultiFields.getTerms(r, \"field\");\n    if (terms != null) {\n      assertNull(terms.iterator(null).next());\n    }\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}