{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test3().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test3().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test3().mjava","sourceNew":"  @Test\n  public void test3() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i * 64*1.1f, 100 + i);\n    }\n    HashSet<Float> keySet = new HashSet<Float>();\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64*1.1f));\n    }\n\n    HashSet<Integer> valueSet = new HashSet<Integer>();\n    for (Iterator<Integer> iit = map.iterator(); iit.hasNext();) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    Object[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (Object value : array) {\n      assertTrue(valueSet.contains(value));\n    }\n\n    Integer[] array2 = new Integer[80];\n    array2 = map.toArray(array2);\n    for (int value : array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    Integer[] array3 = new Integer[120];\n    array3 = map.toArray(array3);\n    for (int i = 0; i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    assertNull(array3[length]);\n\n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i * 64*1.1f));\n    }\n\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void test3() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i * 64*1.1f, 100 + i);\n    }\n    HashSet<Float> keySet = new HashSet<Float>();\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64*1.1f));\n    }\n\n    HashSet<Integer> valueSet = new HashSet<Integer>();\n    for (Iterator<Integer> iit = map.iterator(); iit.hasNext();) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    Object[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (Object value : array) {\n      assertTrue(valueSet.contains(value));\n    }\n\n    Integer[] array2 = new Integer[80];\n    array2 = map.toArray(array2);\n    for (int value : array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    Integer[] array3 = new Integer[120];\n    array3 = map.toArray(array3);\n    for (int i = 0; i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    assertNull(array3[length]);\n\n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i * 64*1.1f));\n    }\n\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/FloatToObjectMapTest#test3().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/FloatToObjectMapTest#test3().mjava","sourceNew":"  @Test\n  public void test3() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i * 64*1.1f, 100 + i);\n    }\n    HashSet<Float> keySet = new HashSet<Float>();\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64*1.1f));\n    }\n\n    HashSet<Integer> valueSet = new HashSet<Integer>();\n    for (Iterator<Integer> iit = map.iterator(); iit.hasNext();) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    Object[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (Object value : array) {\n      assertTrue(valueSet.contains(value));\n    }\n\n    Integer[] array2 = new Integer[80];\n    array2 = map.toArray(array2);\n    for (int value : array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    Integer[] array3 = new Integer[120];\n    array3 = map.toArray(array3);\n    for (int i = 0; i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    assertNull(array3[length]);\n\n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i * 64*1.1f));\n    }\n\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n\n  }\n\n","sourceOld":"  @Test\n  public void test3() {\n    FloatToObjectMap<Integer> map = new FloatToObjectMap<Integer>();\n    int length = 100;\n    for (int i = 0; i < length; ++i) {\n      map.put(i * 64*1.1f, 100 + i);\n    }\n    HashSet<Float> keySet = new HashSet<Float>();\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      keySet.add(iit.next());\n    }\n    assertEquals(length, keySet.size());\n    for (int i = 0; i < length; ++i) {\n      assertTrue(keySet.contains(i * 64*1.1f));\n    }\n\n    HashSet<Integer> valueSet = new HashSet<Integer>();\n    for (Iterator<Integer> iit = map.iterator(); iit.hasNext();) {\n      valueSet.add(iit.next());\n    }\n    assertEquals(length, valueSet.size());\n    Object[] array = map.toArray();\n    assertEquals(length, array.length);\n    for (Object value : array) {\n      assertTrue(valueSet.contains(value));\n    }\n\n    Integer[] array2 = new Integer[80];\n    array2 = map.toArray(array2);\n    for (int value : array2) {\n      assertTrue(valueSet.contains(value));\n    }\n    Integer[] array3 = new Integer[120];\n    array3 = map.toArray(array3);\n    for (int i = 0; i < length; ++i) {\n      assertTrue(valueSet.contains(array3[i]));\n    }\n    assertNull(array3[length]);\n\n    for (int i = 0; i < length; ++i) {\n      assertTrue(map.containsValue(i + 100));\n      assertTrue(map.containsKey(i * 64*1.1f));\n    }\n\n    for (FloatIterator iit = map.keyIterator(); iit.hasNext();) {\n      iit.next();\n      iit.remove();\n    }\n    assertTrue(map.isEmpty());\n    assertEquals(0, map.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}