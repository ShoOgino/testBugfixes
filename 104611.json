{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","commits":[{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways. */\n  public void testMixedRangeAndNonRange() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for(long l=0;l<100;l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final FacetSearchParams fsp = new FacetSearchParams(\n                                new CountFacetRequest(new CategoryPath(\"dim\"), 2),\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":6,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRangeSortedSet().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and SortedSet. */\n  public void testMixedRangeAndNonRangeSortedSet() throws Exception {\n    assumeTrue(\"Test requires SortedSetDV support\", defaultCodecSupportsSortedSet());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    SortedSetDocValuesFacetFields ff = new SortedSetDocValuesFacetFields();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    final SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(s.getIndexReader());\n\n    final CountFacetRequest countRequest = new CountFacetRequest(new CategoryPath(\"dim\"), 2);\n    final RangeFacetRequest<LongRange> rangeRequest = new RangeFacetRequest<LongRange>(\"field\",\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    FacetSearchParams fsp = new FacetSearchParams(countRequest, rangeRequest);\n    \n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, state) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) throws IOException {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, state, null);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) throws IOException {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, state, null);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways. */\n  public void testMixedRangeAndNonRange() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for(long l=0;l<100;l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final FacetSearchParams fsp = new FacetSearchParams(\n                                new CountFacetRequest(new CategoryPath(\"dim\"), 2),\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final CountFacetRequest countRequest = new CountFacetRequest(new CategoryPath(\"dim\"), 2);\n    final RangeFacetRequest<LongRange> rangeRequest = new RangeFacetRequest<LongRange>(\"field\",\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    FacetSearchParams fsp = new FacetSearchParams(countRequest, rangeRequest);\n    \n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways. */\n  public void testMixedRangeAndNonRange() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for(long l=0;l<100;l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final FacetSearchParams fsp = new FacetSearchParams(\n                                new CountFacetRequest(new CategoryPath(\"dim\"), 2),\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":6,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRangeSortedSet().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and SortedSet. */\n  public void testMixedRangeAndNonRangeSortedSet() throws Exception {\n    assumeTrue(\"Test requires SortedSetDV support\", defaultCodecSupportsSortedSet());\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    SortedSetDocValuesFacetFields ff = new SortedSetDocValuesFacetFields();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    final SortedSetDocValuesReaderState state = new SortedSetDocValuesReaderState(s.getIndexReader());\n\n    final CountFacetRequest countRequest = new CountFacetRequest(new CategoryPath(\"dim\"), 2);\n    final RangeFacetRequest<LongRange> rangeRequest = new RangeFacetRequest<LongRange>(\"field\",\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    FacetSearchParams fsp = new FacetSearchParams(countRequest, rangeRequest);\n    \n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, state) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) throws IOException {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, state, null);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) throws IOException {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, state, null);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways. */\n  public void testMixedRangeAndNonRange() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for(long l=0;l<100;l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final FacetSearchParams fsp = new FacetSearchParams(\n                                new CountFacetRequest(new CategoryPath(\"dim\"), 2),\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testMixedRangeAndNonRange().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final CountFacetRequest countRequest = new CountFacetRequest(new CategoryPath(\"dim\"), 2);\n    final RangeFacetRequest<LongRange> rangeRequest = new RangeFacetRequest<LongRange>(\"field\",\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false));\n    FacetSearchParams fsp = new FacetSearchParams(countRequest, rangeRequest);\n    \n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return FacetsAccumulator.create(fsp, r, tr, null);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways. */\n  public void testMixedRangeAndNonRange() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n    FacetFields ff = new FacetFields(tw);\n\n    for(long l=0;l<100;l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      CategoryPath cp;\n      if ((l&3) == 0) {\n        cp = new CategoryPath(\"dim\", \"a\");\n      } else {\n        cp = new CategoryPath(\"dim\", \"b\");\n      }\n      ff.addFields(doc, Collections.singletonList(cp));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n    tw.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final FacetSearchParams fsp = new FacetSearchParams(\n                                new CountFacetRequest(new CategoryPath(\"dim\"), 2),\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    final Set<String> dimSeen = new HashSet<String>();\n\n    DrillSideways ds = new DrillSideways(s, tr) {\n        @Override\n        protected FacetsAccumulator getDrillDownAccumulator(FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        @Override\n        protected FacetsAccumulator getDrillSidewaysAccumulator(String dim, FacetSearchParams fsp) {\n          checkSeen(fsp);\n          return RangeFacetsAccumulatorWrapper.create(fsp, searcher.getIndexReader(), tr);\n        }\n\n        private void checkSeen(FacetSearchParams fsp) {\n          // Each dim should should up only once, across\n          // both drillDown and drillSideways requests:\n          for(FacetRequest fr : fsp.facetRequests) {\n            String dim = fr.categoryPath.components[0];\n            assertFalse(\"dim \" + dim + \" already seen\", dimSeen.contains(dim));\n            dimSeen.add(dim);\n          }\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(new CategoryPath(\"dim\", \"b\"));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (75)\\n  a (25)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(FacetIndexingParams.DEFAULT, new MatchAllDocsQuery());\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dimSeen.clear();\n    dsr = ds.search(null, ddq, 10, fsp);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(2, dsr.facetResults.size());\n    assertEquals(\"dim (0)\\n  b (8)\\n  a (3)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(0)));\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(dsr.facetResults.get(1)));\n\n    IOUtils.close(tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}