{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    MockRAMDirectory directory = newDirectory(random);\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory(random);\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    MockRAMDirectory directory = newDirectory(random);\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory(random);\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de0f5e125829eea1b1dc488997d777957edb4102","date":1285095866,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n      // have to use compound file to prevent running out of\n      // descripters when newDirectory returns a file-system\n      // backed directory:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(true);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n      // have to use compound file to prevent running out of\n      // descripters when newDirectory returns a file-system\n      // backed directory:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(true);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n\n      // have to use compound file to prevent running out of\n      // descripters when newDirectory returns a file-system\n      // backed directory:\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(true);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2);\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);\n      \n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              // have to use compound file to prevent running out of\n              // descripters when newDirectory returns a file-system\n              // backed directory:\n              setMergePolicy(newLogMergePolicy(false, 10))\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb76794301d4c4400df7a65e6d1ca9ec3065b037","date":1305408840,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriter writer = new IndexWriter(\n          directory,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy())\n      );\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n        writer.setInfoStream(VERBOSE ? System.out : null);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"de0f5e125829eea1b1dc488997d777957edb4102":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"c19f985e36a65cc969e8e564fe337a0d41512075":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cb76794301d4c4400df7a65e6d1ca9ec3065b037"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cb76794301d4c4400df7a65e6d1ca9ec3065b037"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","cb76794301d4c4400df7a65e6d1ca9ec3065b037"],"cb76794301d4c4400df7a65e6d1ca9ec3065b037":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["de0f5e125829eea1b1dc488997d777957edb4102","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["de0f5e125829eea1b1dc488997d777957edb4102"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"de0f5e125829eea1b1dc488997d777957edb4102":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["de0f5e125829eea1b1dc488997d777957edb4102"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cb76794301d4c4400df7a65e6d1ca9ec3065b037"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":[],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"cb76794301d4c4400df7a65e6d1ca9ec3065b037":["1509f151d7692d84fae414b2b799ac06ba60fcb4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","8be580b58bcc650d428f3f22de81cadcf51d650a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","962d04139994fce5193143ef35615499a9a96d78","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}