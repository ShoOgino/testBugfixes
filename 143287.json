{"path":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"/dev/null","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    LFUCache other = (LFUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getMostUsedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d7d3943904804560937e6239effeebda0f920e4":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["4d7d3943904804560937e6239effeebda0f920e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}