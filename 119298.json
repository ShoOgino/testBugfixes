{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#incrementToken().mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}