{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","commits":[{"id":"342c2472c1ae168beaaa48cb95efccb003fa4160","date":1173745813,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","pathOld":"/dev/null","sourceNew":"  private void ngram(Token token) { \n    String inStr = token.termText();\n    int inLen = inStr.length();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= inLen) {     // while there is input\n        String gram = inStr.substring(pos, pos+gramSize);\n        Token tok = new Token(gram, pos, pos+gramSize);\n//        tok.setPositionIncrement(pos);\n        ngrams.add(tok);\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","sourceNew":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","sourceOld":"  private void ngram(Token token) { \n    String inStr = token.termText();\n    int inLen = inStr.length();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= inLen) {     // while there is input\n        String gram = inStr.substring(pos, pos+gramSize);\n        Token tok = new Token(gram, pos, pos+gramSize);\n//        tok.setPositionIncrement(pos);\n        ngrams.add(tok);\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#ngram(Token).mjava","sourceNew":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","sourceOld":"  private void ngram(Token token) { \n    char[] termBuffer = token.termBuffer();\n    int termLength = token.termLength();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      int pos = 0;                        // reset to beginning of string\n      while (pos+gramSize <= termLength) {     // while there is input\n        ngrams.add(token.clone(termBuffer, pos, gramSize, pos, pos+gramSize));\n        pos++;\n      }\n      gramSize++;                         // increase n-gram size\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["342c2472c1ae168beaaa48cb95efccb003fa4160"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"342c2472c1ae168beaaa48cb95efccb003fa4160":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"342c2472c1ae168beaaa48cb95efccb003fa4160":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["342c2472c1ae168beaaa48cb95efccb003fa4160"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}