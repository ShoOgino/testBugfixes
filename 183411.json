{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n    if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n      throw new SolrException(SERVER_ERROR,\n          \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n    }\n\n    try {\n      ValueSource vs = userVersionField.getType().getValueSource(userVersionField, null);\n      useFieldCache = true;\n    } catch (Exception e) {\n      log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n    if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n      throw new SolrException(SERVER_ERROR,\n          \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n    }\n\n    try {\n      ValueSource vs = userVersionField.getType().getValueSource(userVersionField, null);\n      useFieldCache = true;\n    } catch (Exception e) {\n      log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n    if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n      throw new SolrException(SERVER_ERROR,\n          \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n    }\n\n    try {\n      ValueSource vs = userVersionField.getType().getValueSource(userVersionField, null);\n      useFieldCache = true;\n    } catch (Exception e) {\n      log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n    if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n      throw new SolrException(SERVER_ERROR,\n          \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n    }\n\n    try {\n      ValueSource vs = userVersionField.getType().getValueSource(userVersionField, null);\n      useFieldCache = true;\n    } catch (Exception e) {\n      log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          if (log.isWarnEnabled()) {\n            log.warn(\"Can't use fieldcache/valuesource: {}\", e.getMessage());\n          }\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: \" + e.getMessage());\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: {}\", e.getMessage());\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          if (log.isWarnEnabled()) {\n            log.warn(\"Can't use fieldcache/valuesource: {}\", e.getMessage());\n          }\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: \", e);\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"updateLog must be enabled.\");\n    }\n\n    if (core.getLatestSchema().getUniqueKeyField() == null) {\n      throw new SolrException(SERVER_ERROR,\n          \"schema must have uniqueKey defined.\");\n    }\n\n    useFieldCache = true;\n    for (String versionField : versionFields) {\n      SchemaField userVersionField = core.getLatestSchema().getField(versionField);\n      if (userVersionField == null || !userVersionField.stored() || userVersionField.multiValued()) {\n        throw new SolrException(SERVER_ERROR,\n            \"field \" + versionField + \" must be defined in schema, be stored, and be single valued.\");\n      }\n      if (useFieldCache) {\n        try {\n          userVersionField.getType().getValueSource(userVersionField, null);\n        } catch (Exception e) {\n          useFieldCache = false;\n          log.warn(\"Can't use fieldcache/valuesource: {}\", e.getMessage());\n        }\n      }\n    }\n    \n    canCreateTombstoneDocument(core.getLatestSchema());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["575e66bd4b2349209027f6801184da7fc3cba13f"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["740d649f013f07efbeb73ca854f106c60166e7c0"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["740d649f013f07efbeb73ca854f106c60166e7c0"],"575e66bd4b2349209027f6801184da7fc3cba13f":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}