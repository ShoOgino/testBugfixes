{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","commits":[{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (BooleanClause.Occur occur : clauseSets.keySet()) {\n      if (clauseSets.get(occur).size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(occur, this);\n        for (Query q : clauseSets.get(occur)) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1396e3b0fcfd01168a7d1eff424bc952eacde1bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (Map.Entry<Occur, Collection<Query>> entry : clauseSets.entrySet()) {\n      Occur clauseOccur = entry.getKey();\n      Collection<Query> clauseQueries = entry.getValue();\n\n      if (clauseQueries.size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(clauseOccur, this);\n        for (Query q : clauseQueries) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (BooleanClause.Occur occur : clauseSets.keySet()) {\n      if (clauseSets.get(occur).size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(occur, this);\n        for (Query q : clauseSets.get(occur)) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1396e3b0fcfd01168a7d1eff424bc952eacde1bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (Map.Entry<Occur, Collection<Query>> entry : clauseSets.entrySet()) {\n      Occur clauseOccur = entry.getKey();\n      Collection<Query> clauseQueries = entry.getValue();\n\n      if (clauseQueries.size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(clauseOccur, this);\n        for (Query q : clauseQueries) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (BooleanClause.Occur occur : clauseSets.keySet()) {\n      if (clauseSets.get(occur).size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(occur, this);\n        for (Query q : clauseSets.get(occur)) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1396e3b0fcfd01168a7d1eff424bc952eacde1bb","date":1571243145,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#visit(QueryVisitor).mjava","sourceNew":"  @Override\n  public void visit(QueryVisitor visitor) {\n    QueryVisitor sub = visitor.getSubVisitor(Occur.MUST, this);\n    for (BooleanClause.Occur occur : clauseSets.keySet()) {\n      if (clauseSets.get(occur).size() > 0) {\n        if (occur == Occur.MUST) {\n          for (Query q : clauseSets.get(occur)) {\n            q.visit(sub);\n          }\n        }\n        else {\n          QueryVisitor v = sub.getSubVisitor(occur, this);\n          for (Query q : clauseSets.get(occur)) {\n            q.visit(v);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visit(QueryVisitor visitor) {\n    for (Map.Entry<Occur, Collection<Query>> entry : clauseSets.entrySet()) {\n      Occur clauseOccur = entry.getKey();\n      Collection<Query> clauseQueries = entry.getValue();\n\n      if (clauseQueries.size() > 0) {\n        QueryVisitor v = visitor.getSubVisitor(clauseOccur, this);\n        for (Query q : clauseQueries) {\n          q.visit(v);\n        }\n      }\n    }\n  }\n\n","bugFix":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1396e3b0fcfd01168a7d1eff424bc952eacde1bb":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1396e3b0fcfd01168a7d1eff424bc952eacde1bb"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["1396e3b0fcfd01168a7d1eff424bc952eacde1bb","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"1396e3b0fcfd01168a7d1eff424bc952eacde1bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}