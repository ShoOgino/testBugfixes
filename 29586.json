{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","pathOld":"/dev/null","sourceNew":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      if (index == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        return firstDoc(i4096 + 1);\n      } else {\n        // now we are on a block that contains at least one document\n        assert Long.bitCount(index) <= bits[i4096].length;\n        int i64 = doc >>> 6;\n        long indexBits = index >>> i64; // shifts are mod 64 in java\n        if (indexBits == 0) {\n          // if neither the i64-th bit or any other bit on its left is set then\n          // it means that there are no more documents in this block, go to the\n          // next one\n          return firstDoc(i4096 + 1);\n        }\n\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a786641be13f4046757b33d3c0226ca3cb92ae2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","pathOld":"/dev/null","sourceNew":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      if (index == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        return firstDoc(i4096 + 1);\n      } else {\n        // now we are on a block that contains at least one document\n        assert Long.bitCount(index) <= bits[i4096].length;\n        int i64 = doc >>> 6;\n        long indexBits = index >>> i64; // shifts are mod 64 in java\n        if (indexBits == 0) {\n          // if neither the i64-th bit or any other bit on its left is set then\n          // it means that there are no more documents in this block, go to the\n          // next one\n          return firstDoc(i4096 + 1);\n        }\n\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a786641be13f4046757b33d3c0226ca3cb92ae2","date":1412940633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","sourceNew":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      int i64 = doc >>> 6;\n      long indexBits = index >>> i64;\n      if (indexBits == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        // or\n        // if neither the i64-th bit or any other bit on its left is set then\n        // it means that there are no more documents in this block, go to the\n        // next one\n        return firstDoc(i4096 + 1);\n      } else {\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","sourceOld":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      if (index == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        return firstDoc(i4096 + 1);\n      } else {\n        // now we are on a block that contains at least one document\n        assert Long.bitCount(index) <= bits[i4096].length;\n        int i64 = doc >>> 6;\n        long indexBits = index >>> i64; // shifts are mod 64 in java\n        if (indexBits == 0) {\n          // if neither the i64-th bit or any other bit on its left is set then\n          // it means that there are no more documents in this block, go to the\n          // next one\n          return firstDoc(i4096 + 1);\n        }\n\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","sourceNew":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      int i64 = doc >>> 6;\n      long indexBits = index >>> i64;\n      if (indexBits == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        // or\n        // if neither the i64-th bit or any other bit on its left is set then\n        // it means that there are no more documents in this block, go to the\n        // next one\n        return firstDoc(i4096 + 1);\n      } else {\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","sourceOld":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      if (index == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        return firstDoc(i4096 + 1);\n      } else {\n        // now we are on a block that contains at least one document\n        assert Long.bitCount(index) <= bits[i4096].length;\n        int i64 = doc >>> 6;\n        long indexBits = index >>> i64; // shifts are mod 64 in java\n        if (indexBits == 0) {\n          // if neither the i64-th bit or any other bit on its left is set then\n          // it means that there are no more documents in this block, go to the\n          // next one\n          return firstDoc(i4096 + 1);\n        }\n\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b","date":1413468113,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","sourceNew":null,"sourceOld":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      int i64 = doc >>> 6;\n      long indexBits = index >>> i64;\n      if (indexBits == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        // or\n        // if neither the i64-th bit or any other bit on its left is set then\n        // it means that there are no more documents in this block, go to the\n        // next one\n        return firstDoc(i4096 + 1);\n      } else {\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet.Iterator#currentOrNextDoc().mjava","sourceNew":null,"sourceOld":"    private int currentOrNextDoc() {\n      final int i4096 = doc >>> 12;\n      final long index = indices[i4096];\n      int i64 = doc >>> 6;\n      long indexBits = index >>> i64;\n      if (indexBits == 0) {\n        // if the index is zero, it means that there is no value in the\n        // current block, so return the first document of the next block\n        // or\n        // if neither the i64-th bit or any other bit on its left is set then\n        // it means that there are no more documents in this block, go to the\n        // next one\n        return firstDoc(i4096 + 1);\n      } else {\n        // We know we still have some 64-bits blocks that have bits set, let's\n        // advance to the next one by skipping trailing zeros of the index\n        int i1 = doc & 0x3F;\n        int trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        if (trailingZeros != 0) {\n          // no bits in the current long, go to the next one\n          i64 += trailingZeros;\n          i1 = 0;\n        }\n\n        // So now we are on a sub 64-bits block that has values\n        assert (index & (1L << i64)) != 0;\n        // we count the number of ones on the left of i64 to figure out the\n        // index of the long that contains the bits we are interested in\n        int longIndex = Long.bitCount(index & ((1L << i64) - 1)); // shifts are mod 64 in java\n        final long[] longArray = bits[i4096];\n        assert longArray[longIndex] != 0;\n        long bits = SparseFixedBitSet.this.bits[i4096][longIndex] >>> i1; // shifts are mod 64 in java\n        if (bits != 0L) {\n          // hurray, we found some non-zero bits, this gives us the next document:\n          i1 += Long.numberOfTrailingZeros(bits);\n          return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n        }\n\n        // otherwise it means that although we were on a sub-64 block that contains\n        // documents, all documents of this sub-block have already been consumed\n        // so two cases:\n        indexBits = index >>> i64 >>> 1; // we don't shift by (i64+1) otherwise we might shift by a multiple of 64 which is a no-op\n        if (indexBits == 0) {\n          // Case 1: this was the last long of the block of 4096 bits, then go\n          // to the next block\n          return firstDoc(i4096 + 1);\n        }\n        // Case 2: go to the next sub 64-bits block in the current block of 4096 bits\n        // by skipping trailing zeros of the index\n        trailingZeros = Long.numberOfTrailingZeros(indexBits);\n        i64 += 1 + trailingZeros;\n        bits = longArray[longIndex + 1];\n        assert bits != 0;\n        i1 = Long.numberOfTrailingZeros(bits);\n        return doc = (i4096 << 12) | ((i64 & 0x3F) << 6) | i1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","9a786641be13f4046757b33d3c0226ca3cb92ae2"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a786641be13f4046757b33d3c0226ca3cb92ae2":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b":["9a786641be13f4046757b33d3c0226ca3cb92ae2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"9a786641be13f4046757b33d3c0226ca3cb92ae2":["55980207f1977bd1463465de1659b821347e2fa8","d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["9a786641be13f4046757b33d3c0226ca3cb92ae2","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}