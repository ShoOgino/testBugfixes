{"path":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        initArgs.add(STORAGE_DIR_INIT_ARG, resourceLoader.getConfigDir());      \n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c96e8691b755a4e9bf9d8b419790e12a5c2c39ff","date":1404230819,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        initArgs.add(STORAGE_DIR_INIT_ARG, resourceLoader.getConfigDir());      \n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0aa02fe8c7d5213219c987a970723bcec43729a","date":1471808327,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO = null;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name for collection {} due to: {}\", \n            collection, e.toString());\n      } \n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.info(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);      \n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: {}\", znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          if (log.isWarnEnabled()) {\n            log.warn(\"Cannot write to config directory {} ; switching to use InMemory storage instead.\", configDir.getAbsolutePath());\n          }\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: \"+znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory \"+configDir.getAbsolutePath()+\n              \"; switching to use InMemory storage instead.\");\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/ManagedResourceStorage#newStorageIO(String,SolrResourceLoader,NamedList[String]).mjava","sourceNew":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: {}\", znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          log.warn(\"Cannot write to config directory {} ; switching to use InMemory storage instead.\", configDir.getAbsolutePath());\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","sourceOld":"  /**\n   * Creates a new StorageIO instance for a Solr core, taking into account\n   * whether the core is running in cloud mode as well as initArgs. \n   */\n  public static StorageIO newStorageIO(String collection, SolrResourceLoader resourceLoader, NamedList<String> initArgs) {\n    StorageIO storageIO;\n\n    SolrZkClient zkClient = null;\n    String zkConfigName = null;\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      zkClient = ((ZkSolrResourceLoader)resourceLoader).getZkController().getZkClient();\n      try {\n        zkConfigName = ((ZkSolrResourceLoader)resourceLoader).getZkController().\n            getZkStateReader().readConfigName(collection);\n      } catch (Exception e) {\n        log.error(\"Failed to get config name due to\", e);\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to load config name for collection:\" + collection  + \" due to: \", e);\n      }\n      if (zkConfigName == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Could not find config name for collection:\" + collection);\n      }\n    }\n    \n    if (initArgs.get(STORAGE_IO_CLASS_INIT_ARG) != null) {\n      storageIO = resourceLoader.newInstance(initArgs.get(STORAGE_IO_CLASS_INIT_ARG), StorageIO.class); \n    } else {\n      if (zkClient != null) {\n        String znodeBase = \"/configs/\"+zkConfigName;\n        log.debug(\"Setting up ZooKeeper-based storage for the RestManager with znodeBase: {}\", znodeBase);\n        storageIO = new ManagedResourceStorage.ZooKeeperStorageIO(zkClient, znodeBase);\n      } else {\n        storageIO = new FileStorageIO();        \n      }\n    }\n    \n    if (storageIO instanceof FileStorageIO) {\n      // using local fs, if storageDir is not set in the solrconfig.xml, assume the configDir for the core\n      if (initArgs.get(STORAGE_DIR_INIT_ARG) == null) {\n        File configDir = new File(resourceLoader.getConfigDir());\n        boolean hasAccess = false;\n        try {\n          hasAccess = configDir.isDirectory() && configDir.canWrite();\n        } catch (java.security.AccessControlException ace) {}\n        \n        if (hasAccess) {\n          initArgs.add(STORAGE_DIR_INIT_ARG, configDir.getAbsolutePath());\n        } else {\n          // most likely this is because of a unit test \n          // that doesn't have write-access to the config dir\n          // while this failover approach is not ideal, it's better\n          // than causing the core to fail esp. if managed resources aren't being used\n          if (log.isWarnEnabled()) {\n            log.warn(\"Cannot write to config directory {} ; switching to use InMemory storage instead.\", configDir.getAbsolutePath());\n          }\n          storageIO = new ManagedResourceStorage.InMemoryStorageIO();\n        }\n      }       \n    }\n    \n    storageIO.configure(resourceLoader, initArgs);     \n    \n    return storageIO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0aa02fe8c7d5213219c987a970723bcec43729a":["c96e8691b755a4e9bf9d8b419790e12a5c2c39ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"c96e8691b755a4e9bf9d8b419790e12a5c2c39ff":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["c96e8691b755a4e9bf9d8b419790e12a5c2c39ff","f0aa02fe8c7d5213219c987a970723bcec43729a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c96e8691b755a4e9bf9d8b419790e12a5c2c39ff","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["c96e8691b755a4e9bf9d8b419790e12a5c2c39ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["140be51d03394488536f4aacedace29f9b318347","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f0aa02fe8c7d5213219c987a970723bcec43729a":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c96e8691b755a4e9bf9d8b419790e12a5c2c39ff":["f0aa02fe8c7d5213219c987a970723bcec43729a","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["0d62172dd2fc1195c7e475550ac394a9948a18ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}