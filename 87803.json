{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","commits":[{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"/dev/null","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"/dev/null","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"/dev/null","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NumericDocValuesWriter(fieldInfo, docState.docWriter.bytesUsed, false);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba","date":1412089824,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        if (invertState.length != 0) {\n          norms.addValue(docState.docID, similarity.computeNorm(invertState));\n        }\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":["52c7e49be259508735752fba88085255014a6ecf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        if (invertState.length != 0) {\n          norms.addValue(docState.docID, similarity.computeNorm(invertState));\n        }\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false && invertState.length != 0) {\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        if (invertState.length != 0) {\n          norms.addValue(docState.docID, similarity.computeNorm(invertState));\n        }\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false && invertState.length != 0) {\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        if (norms == null) {\n          fieldInfo.setNormValueType(FieldInfo.DocValuesType.NUMERIC);\n          norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n        }\n        if (invertState.length != 0) {\n          norms.addValue(docState.docID, similarity.computeNorm(invertState));\n        }\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n        }\n        norms.addValue(docState.docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false && invertState.length != 0) {\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n        }\n        norms.addValue(docState.docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false && invertState.length != 0) {\n        norms.addValue(docState.docID, similarity.computeNorm(invertState));\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n          if (normValue == 0) {\n            throw new IllegalStateException(\"Similarity \" + similarity + \" return 0 for non-empty field\");\n          }\n        }\n        norms.addValue(docState.docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n        }\n        norms.addValue(docState.docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#finish().mjava","sourceNew":"    public void finish(int docID) throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n          if (normValue == 0) {\n            throw new IllegalStateException(\"Similarity \" + similarity + \" return 0 for non-empty field\");\n          }\n        }\n        norms.addValue(docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if (fieldInfo.omitsNorms() == false) {\n        long normValue;\n        if (invertState.length == 0) {\n          // the field exists in this document, but it did not have\n          // any indexed tokens, so we assign a default value of zero\n          // to the norm\n          normValue = 0;\n        } else {\n          normValue = similarity.computeNorm(invertState);\n          if (normValue == 0) {\n            throw new IllegalStateException(\"Similarity \" + similarity + \" return 0 for non-empty field\");\n          }\n        }\n        norms.addValue(docState.docID, normValue);\n      }\n\n      termsHashPerField.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"05da2d758a6089e737cdfc230e57a51b472b94b6":["00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["d9a47902d6207303f5ed3e7aaca62ca33433af66","05da2d758a6089e737cdfc230e57a51b472b94b6"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["22a2e66dfda83847e80095b8693c660742ab3e9c","00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba"],"00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05da2d758a6089e737cdfc230e57a51b472b94b6","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["622a708571e534680618b3c5e0c28ac539a47776"],"52c7e49be259508735752fba88085255014a6ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","622a708571e534680618b3c5e0c28ac539a47776"],"05da2d758a6089e737cdfc230e57a51b472b94b6":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba":["05da2d758a6089e737cdfc230e57a51b472b94b6","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","22a2e66dfda83847e80095b8693c660742ab3e9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"622a708571e534680618b3c5e0c28ac539a47776":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["d9a47902d6207303f5ed3e7aaca62ca33433af66","00330c2dc6ff06b4972e9b6bb62d0dd1bc64a3ba"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}