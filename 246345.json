{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = (TaskStats) stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSumByPrefTask#reportSumByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSumByPrefix (List<TaskStats> taskStats) {\n    // aggregate by task name\n    int reported = 0;\n    LinkedHashMap<String,TaskStats> p2 = new LinkedHashMap<String,TaskStats>();\n    for (final TaskStats stat1 : taskStats) {\n      if (stat1.getElapsed()>=0 && stat1.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        String name = stat1.getTask().getName();\n        TaskStats stat2 = p2.get(name);\n        if (stat2 == null) {\n          try {\n            stat2 = stat1.clone();\n          } catch (CloneNotSupportedException e) {\n            throw new RuntimeException(e);\n          }\n          p2.put(name,stat2);\n        } else {\n          stat2.add(stat1);\n        }\n      }\n    }\n    // now generate report from secondary list p2    \n    return genPartialReport(reported, p2, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","399d5903979ca52514d2bc7e3a362e1c45885c94","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}