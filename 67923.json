{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","commits":[{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer]).mjava","sourceNew":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","sourceOld":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","sourceNew":null,"sourceOld":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForCollection(String,List[Integer],List[String]).mjava","sourceNew":null,"sourceOld":"  private void checkForCollection(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards)\n      throws Exception {\n    // check for an expectedSlices new collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 120000;\n    boolean success = false;\n    String checkResult = \"Didnt get to perform a single check\";\n    while (System.currentTimeMillis() < timeoutAt) {\n      checkResult = checkCollectionExpectations(collectionName, numShardsNumReplicaList, nodesAllowedToRunShards);\n      if (checkResult == null) {\n        success = true;\n        break;\n      }\n      Thread.sleep(500);\n    }\n    if (!success) {\n      super.printLayout();\n      fail(checkResult);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c8567c25c02eeeb3e719841606a1269f3538ca":["9a57adc9bfabbc207ed17740dd86e0a2401ea385","81a4a1810b619aea1d002a09c1878b498e20bf33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81a4a1810b619aea1d002a09c1878b498e20bf33"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}