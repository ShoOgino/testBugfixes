{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSQLException().mjava","commits":[{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","sourceNew":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","sourceOld":"  private void testSQLException() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text='XXXX' order by field_iff desc\");\n    \n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSQLException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSQLException().mjava","sourceNew":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSQLException() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(id, \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(id, \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(id, \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(id, \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(id, \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(id, \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(id, \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select id, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    SolrStream solrStream = new SolrStream(baseUrl, sParams);\n    Tuple tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id, field_iff, str_s from collection1 where text_t='XXXX' order by field_iff desc\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"Column 'field_iff' not found in any table\"));\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\",\n        \"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(baseUrl, sParams);\n    tuple = getTuple(new ExceptionStream(solrStream));\n    assert (tuple.EOF);\n    assert (tuple.EXCEPTION);\n    assert (tuple.getException().contains(\"No match found for function signature blah\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}