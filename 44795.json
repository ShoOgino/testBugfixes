{"path":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","commits":[{"id":"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd","date":1225474382,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"template.\")) {\n        templates.put(name.substring(9) + \".vm\",params.get(name));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2c3d4f571dc88d6a6e293211698753905d47e55","date":1225514996,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"template.\")) {\n        templates.put(name.substring(9) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"template.\")) {\n        templates.put(name.substring(9) + \".vm\",params.get(name));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5607c036daa81c1936379c1c1f943fbe2403c8fb","date":1227004397,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"template.\")) {\n        templates.put(name.substring(9) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65c941e8dcb3bb0ee6b785e349a931111c65e8ff","date":1268850890,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0c840fcaa8a53dc8e038a0f7776c84283637f9","date":1268855982,"type":5,"author":"Yonik Seeley","isMerge":true,"pathNew":"contrib/velocity/src/main/java/org/apache/solr/response/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","pathOld":"contrib/velocity/src/main/java/org/apache/solr/request/SolrParamResourceLoader#SolrParamResourceLoader(SolrQueryRequest).mjava","sourceNew":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  public SolrParamResourceLoader(SolrQueryRequest request) {\n    super();\n\n    // TODO: Consider using content streams, but need a template name associated with each stream\n    // for now, a custom param convention of template.<name>=<template body> is a nice example\n    // of per-request overrides of templates\n\n    org.apache.solr.common.params.SolrParams params = request.getParams();\n    Iterator<String> names = params.getParameterNamesIterator();\n    while (names.hasNext()) {\n      String name = names.next();\n      \n      if (name.startsWith(\"v.template.\")) {\n        templates.put(name.substring(11) + \".vm\",params.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["5607c036daa81c1936379c1c1f943fbe2403c8fb"],"5607c036daa81c1936379c1c1f943fbe2403c8fb":["a2c3d4f571dc88d6a6e293211698753905d47e55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a2c3d4f571dc88d6a6e293211698753905d47e55":["4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":["5607c036daa81c1936379c1c1f943fbe2403c8fb","65c941e8dcb3bb0ee6b785e349a931111c65e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"65c941e8dcb3bb0ee6b785e349a931111c65e8ff":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"5607c036daa81c1936379c1c1f943fbe2403c8fb":["65c941e8dcb3bb0ee6b785e349a931111c65e8ff","fb0c840fcaa8a53dc8e038a0f7776c84283637f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd"],"4e371e5cc5fa0d900720a4a38ecf0b81ed44a6cd":["a2c3d4f571dc88d6a6e293211698753905d47e55"],"a2c3d4f571dc88d6a6e293211698753905d47e55":["5607c036daa81c1936379c1c1f943fbe2403c8fb"],"fb0c840fcaa8a53dc8e038a0f7776c84283637f9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb0c840fcaa8a53dc8e038a0f7776c84283637f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}