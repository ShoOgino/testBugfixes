{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#setFloorData(ByteArrayDataInput,BytesRef).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#setFloorData(ByteArrayDataInput,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n    final int numBytes = source.length - (in.getPosition() - source.offset);\n    if (numBytes > floorData.length) {\n      floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n    floorDataReader.reset(floorData, 0, numBytes);\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    //if (DEBUG) {\n    //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n    //}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#setFloorData(ByteArrayDataInput,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n    final int numBytes = source.length - (in.getPosition() - source.offset);\n    if (numBytes > floorData.length) {\n      floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n    floorDataReader.reset(floorData, 0, numBytes);\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    //if (DEBUG) {\n    //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n    //}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#setFloorData(ByteArrayDataInput,BytesRef).mjava","sourceNew":null,"sourceOld":"  public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n    final int numBytes = source.length - (in.getPosition() - source.offset);\n    if (numBytes > floorData.length) {\n      floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n    }\n    System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n    floorDataReader.reset(floorData, 0, numBytes);\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    //if (DEBUG) {\n    //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n    //}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}