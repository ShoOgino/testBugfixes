{"path":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testLoadingAndStoringOfManagedData() throws Exception {\n    String resourceId = \"/config/test/foo\";\n    String storedResourceId = \"_config_test_foo.json\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    String storedJson = \"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\"\n                      + \" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'\"\n                      + ManagedResource.MANAGED_JSON_LIST_FIELD+\"':['1','2','3']}\";\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, new BytesRef(json(storedJson)));\n    \n    ManagedTestResource res = \n        new ManagedTestResource(resourceId, new SolrResourceLoader(\"./\"), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now update the managed data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    StringReader stringReader = \n        new StringReader(storageIO.storage.get(storedResourceId).utf8ToString());\n    Map<String,Object> jsonObject = \n        (Map<String,Object>) ObjectBuilder.getVal(new JSONParser(stringReader)); \n    List<String> jsonList = \n        (List<String>)jsonObject.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    \n    assertTrue(\"Managed data was not updated correctly!\", jsonList.contains(\"4\"));    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","sourceNew":"  /**\n   * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testLoadingAndStoringOfManagedData() throws Exception {\n    String resourceId = \"/config/test/foo\";\n    String storedResourceId = \"_config_test_foo.json\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    String storedJson = \"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\"\n                      + \" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'\"\n                      + ManagedResource.MANAGED_JSON_LIST_FIELD+\"':['1','2','3']}\";\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, new BytesRef(json(storedJson)));\n    \n    ManagedTestResource res = \n        new ManagedTestResource(resourceId, new SolrResourceLoader(Paths.get(\"./\")), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now update the managed data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    StringReader stringReader = \n        new StringReader(storageIO.storage.get(storedResourceId).utf8ToString());\n    Map<String,Object> jsonObject = \n        (Map<String,Object>) ObjectBuilder.getVal(new JSONParser(stringReader)); \n    List<String> jsonList = \n        (List<String>)jsonObject.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    \n    assertTrue(\"Managed data was not updated correctly!\", jsonList.contains(\"4\"));    \n  }\n\n","sourceOld":"  /**\n   * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testLoadingAndStoringOfManagedData() throws Exception {\n    String resourceId = \"/config/test/foo\";\n    String storedResourceId = \"_config_test_foo.json\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    String storedJson = \"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\"\n                      + \" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'\"\n                      + ManagedResource.MANAGED_JSON_LIST_FIELD+\"':['1','2','3']}\";\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, new BytesRef(json(storedJson)));\n    \n    ManagedTestResource res = \n        new ManagedTestResource(resourceId, new SolrResourceLoader(\"./\"), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now update the managed data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    StringReader stringReader = \n        new StringReader(storageIO.storage.get(storedResourceId).utf8ToString());\n    Map<String,Object> jsonObject = \n        (Map<String,Object>) ObjectBuilder.getVal(new JSONParser(stringReader)); \n    List<String> jsonList = \n        (List<String>)jsonObject.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    \n    assertTrue(\"Managed data was not updated correctly!\", jsonList.contains(\"4\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResource#testLoadingAndStoringOfManagedData().mjava","sourceNew":"  /**\n   * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testLoadingAndStoringOfManagedData() throws Exception {\n    String resourceId = \"/config/test/foo\";\n    String storedResourceId = \"_config_test_foo.json\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    String storedJson = \"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\"\n                      + \" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'\"\n                      + ManagedResource.MANAGED_JSON_LIST_FIELD+\"':['1','2','3']}\";\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, new BytesRef(json(storedJson)));\n    \n    ManagedTestResource res = \n        new ManagedTestResource(resourceId, new SolrResourceLoader(Paths.get(\"./\")), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now update the managed data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n\n    Map<String,Object> jsonObject =\n        (Map<String,Object>) Utils.fromJSONString(storageIO.storage.get(storedResourceId).utf8ToString());\n    List<String> jsonList = \n        (List<String>)jsonObject.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    \n    assertTrue(\"Managed data was not updated correctly!\", jsonList.contains(\"4\"));    \n  }\n\n","sourceOld":"  /**\n   * Tests managed data storage to and loading from {@link ManagedResourceStorage.InMemoryStorageIO}.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testLoadingAndStoringOfManagedData() throws Exception {\n    String resourceId = \"/config/test/foo\";\n    String storedResourceId = \"_config_test_foo.json\";\n    \n    MockAnalysisComponent observer = new MockAnalysisComponent();\n    List<ManagedResourceObserver> observers = \n        Arrays.asList((ManagedResourceObserver)observer);\n    \n    // put some data in the storage impl so that we can test \n    // initialization of managed data from storage\n    String storedJson = \"{'initArgs':{'someArg':'someVal', 'arg2':true, 'arg3':['one','two','three'],\"\n                      + \" 'arg4':18, 'arg5':0.9, 'arg6':{ 'uno':1, 'dos':2}},'\"\n                      + ManagedResource.MANAGED_JSON_LIST_FIELD+\"':['1','2','3']}\";\n    ManagedResourceStorage.InMemoryStorageIO storageIO = \n        new ManagedResourceStorage.InMemoryStorageIO();\n    storageIO.storage.put(storedResourceId, new BytesRef(json(storedJson)));\n    \n    ManagedTestResource res = \n        new ManagedTestResource(resourceId, new SolrResourceLoader(Paths.get(\"./\")), storageIO);\n    res.loadManagedDataAndNotify(observers);\n    \n    assertTrue(\"Observer was not notified by ManagedResource!\", observer.wasNotified);\n\n    // now update the managed data (as if it came from the REST API)\n    List<String> updatedData = new ArrayList<>();\n    updatedData.add(\"1\");\n    updatedData.add(\"2\");\n    updatedData.add(\"3\");\n    updatedData.add(\"4\");    \n    res.storeManagedData(updatedData);\n    \n    StringReader stringReader = \n        new StringReader(storageIO.storage.get(storedResourceId).utf8ToString());\n    Map<String,Object> jsonObject = \n        (Map<String,Object>) ObjectBuilder.getVal(new JSONParser(stringReader)); \n    List<String> jsonList = \n        (List<String>)jsonObject.get(ManagedResource.MANAGED_JSON_LIST_FIELD);\n    \n    assertTrue(\"Managed data was not updated correctly!\", jsonList.contains(\"4\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}