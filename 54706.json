{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testReducerStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testReducerStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testReducerStream().mjava","sourceNew":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    Tuple t0, t1, t2;\n    List<Map> maps0, maps1, maps2;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"group\", GroupOperation.class);\n\n    try {\n      // basic\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f asc\\\"),\"\n          + \"by=\\\"a_s\\\",\"\n          + \"group(sort=\\\"a_f desc\\\", n=\\\"4\\\"))\");\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assertMaps(maps0, 9, 1, 2, 0);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 8, 7, 5, 3);\n\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 6, 4);\n\n      // basic w/spaces\n      expression = StreamExpressionParser.parse(\"reduce(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_s asc, a_f       asc\\\"),\"\n          + \"by=\\\"a_s\\\",\" +\n          \"group(sort=\\\"a_i asc\\\", n=\\\"2\\\"))\");\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      t0 = tuples.get(0);\n      maps0 = t0.getMaps(\"group\");\n      assert (maps0.size() == 2);\n\n      assertMaps(maps0, 0, 1);\n\n      t1 = tuples.get(1);\n      maps1 = t1.getMaps(\"group\");\n      assertMaps(maps1, 3, 5);\n\n      t2 = tuples.get(2);\n      maps2 = t2.getMaps(\"group\");\n      assertMaps(maps2, 4, 6);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}