{"path":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#test().mjava","commits":[{"id":"4c94837f36779069fd9b6b70e462b57515473d88","date":1249677298,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    BoostingFunctionTermQuery query = new BoostingFunctionTermQuery(new Term(\"field\", \"seventy\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 100, hits.totalHits == 100);\n\n    //they should all have the exact same score, because they all contain seventy once, and we set\n    //all the other similarity factors to be 1\n\n    assertTrue(hits.getMaxScore() + \" does not equal: \" + 1, hits.getMaxScore() == 1);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      ScoreDoc doc = hits.scoreDocs[i];\n      assertTrue(doc.score + \" does not equal: \" + 1, doc.score == 1);\n    }\n    CheckHits.checkExplanations(query, PayloadHelper.FIELD, searcher, true);\n    Spans spans = query.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans is not an instanceof \" + TermSpans.class, spans instanceof TermSpans);\n    /*float score = hits.score(0);\n    for (int i =1; i < hits.length(); i++)\n    {\n      assertTrue(\"scores are not equal and they should be\", score == hits.score(i));\n    }*/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#test().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/BoostingFunctionTermQueryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    PayloadTermQuery query = new PayloadTermQuery(new Term(\"field\", \"seventy\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 100, hits.totalHits == 100);\n\n    //they should all have the exact same score, because they all contain seventy once, and we set\n    //all the other similarity factors to be 1\n\n    assertTrue(hits.getMaxScore() + \" does not equal: \" + 1, hits.getMaxScore() == 1);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      ScoreDoc doc = hits.scoreDocs[i];\n      assertTrue(doc.score + \" does not equal: \" + 1, doc.score == 1);\n    }\n    CheckHits.checkExplanations(query, PayloadHelper.FIELD, searcher, true);\n    Spans spans = query.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans is not an instanceof \" + TermSpans.class, spans instanceof TermSpans);\n    /*float score = hits.score(0);\n    for (int i =1; i < hits.length(); i++)\n    {\n      assertTrue(\"scores are not equal and they should be\", score == hits.score(i));\n    }*/\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    BoostingFunctionTermQuery query = new BoostingFunctionTermQuery(new Term(\"field\", \"seventy\"),\n            new MaxPayloadFunction());\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 100, hits.totalHits == 100);\n\n    //they should all have the exact same score, because they all contain seventy once, and we set\n    //all the other similarity factors to be 1\n\n    assertTrue(hits.getMaxScore() + \" does not equal: \" + 1, hits.getMaxScore() == 1);\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      ScoreDoc doc = hits.scoreDocs[i];\n      assertTrue(doc.score + \" does not equal: \" + 1, doc.score == 1);\n    }\n    CheckHits.checkExplanations(query, PayloadHelper.FIELD, searcher, true);\n    Spans spans = query.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    assertTrue(\"spans is not an instanceof \" + TermSpans.class, spans instanceof TermSpans);\n    /*float score = hits.score(0);\n    for (int i =1; i < hits.length(); i++)\n    {\n      assertTrue(\"scores are not equal and they should be\", score == hits.score(i));\n    }*/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c94837f36779069fd9b6b70e462b57515473d88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["4c94837f36779069fd9b6b70e462b57515473d88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"4c94837f36779069fd9b6b70e462b57515473d88":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c94837f36779069fd9b6b70e462b57515473d88"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}