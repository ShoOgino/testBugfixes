{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = (PayloadAttribute) filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = (PayloadAttribute) filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = (PayloadAttribute) filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testIntEncoding().mjava","sourceNew":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testIntEncoding() throws Exception {\n    String test = \"The quick|1 red|2 fox|3 jumped over the lazy|5 brown|99 dogs|83\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), '|', new IntegerEncoder());\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeInt(1));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeInt(2));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeInt(3));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeInt(5));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeInt(99));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeInt(83));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}