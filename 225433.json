{"path":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","commits":[{"id":"dfc6076b23c4069ed33fce21fd75a8ccfbf5019c","date":1317456621,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n\n    final SearcherManager searcherManager = new SearcherManager(dir,\n        new SearcherWarmer() {\n          @Override\n          public void warm(IndexSearcher s) throws IOException {\n            try {\n              awaitEnterWarm.countDown();\n              awaitClose.await();\n            } catch (InterruptedException e) {\n              //\n            }\n          }\n        });\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? SearcherManager.open(dir,\n        warmer, es) : SearcherManager.open(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n\n    final SearcherManager searcherManager = new SearcherManager(dir,\n        new SearcherWarmer() {\n          @Override\n          public void warm(IndexSearcher s) throws IOException {\n            try {\n              awaitEnterWarm.countDown();\n              awaitClose.await();\n            } catch (InterruptedException e) {\n              //\n            }\n          }\n        });\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0820dc571166c0852da71ee25737fb2f4f5280a4","date":1318718704,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? SearcherManager.open(dir,\n        warmer, es) : SearcherManager.open(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? SearcherManager.open(dir,\n        warmer, es) : SearcherManager.open(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? SearcherManager.open(dir,\n        warmer, es) : SearcherManager.open(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherWarmer warmer = new SearcherWarmer() {\n      @Override\n      public void warm(IndexSearcher s) throws IOException {\n        try {\n          awaitEnterWarm.countDown();\n          awaitClose.await();\n        } catch (InterruptedException e) {\n          //\n        }\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() ? new SearcherManager(dir,\n        warmer, es) : new SearcherManager(writer, random.nextBoolean(), warmer, es);\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    awaitEnterWarm.await();\n    for (int i = 0; i < 2; i++) {\n      searcherManager.close();\n    }\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dfc6076b23c4069ed33fce21fd75a8ccfbf5019c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0820dc571166c0852da71ee25737fb2f4f5280a4":["606baff722a317c76a92b111d183b54b6e6e5741"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43369d257d14f61a881aa609962ef95e8a334d3a":["0820dc571166c0852da71ee25737fb2f4f5280a4"],"606baff722a317c76a92b111d183b54b6e6e5741":["dfc6076b23c4069ed33fce21fd75a8ccfbf5019c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"dfc6076b23c4069ed33fce21fd75a8ccfbf5019c":["606baff722a317c76a92b111d183b54b6e6e5741"],"0820dc571166c0852da71ee25737fb2f4f5280a4":["43369d257d14f61a881aa609962ef95e8a334d3a"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dfc6076b23c4069ed33fce21fd75a8ccfbf5019c"],"606baff722a317c76a92b111d183b54b6e6e5741":["0820dc571166c0852da71ee25737fb2f4f5280a4"],"43369d257d14f61a881aa609962ef95e8a334d3a":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}