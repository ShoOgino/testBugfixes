{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#pointInPolygon(double,double).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#pointInPolygon(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  boolean pointInPolygon(double lat, double lon) {\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n\n    // TODO: this quantizes a bit differently ... boundary cases will fail here:\n    boolean inPoly = false;\n    for (int i = 1; i < polyLons.length; i++) {\n      if (polyLons[i] <= lon && polyLons[i-1] > lon || polyLons[i-1] <= lon && polyLons[i] > lon) {\n        if (polyLats[i] + (lon - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"087ab61b67c554befcfe6f666ca3bb613eac8fe3","date":1433956986,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery#pointInPolygon(double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * simple even-odd point in polygon computation\n   *    1.  Determine if point is contained in the longitudinal range\n   *    2.  Determine whether point crosses the edge by computing the latitudinal delta\n   *        between the end-point of a parallel vector (originating at the point) and the\n   *        y-component of the edge sink\n   *\n   * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise\n   */\n  boolean pointInPolygon(double lat, double lon) {\n    /**\n     * Note: This is using a euclidean coordinate system which could result in\n     * upwards of 110KM error at the equator.\n     * TODO convert coordinates to cylindrical projection (e.g. mercator)\n     */\n\n    // TODO: this quantizes a bit differently ... boundary cases will fail here:\n    boolean inPoly = false;\n    for (int i = 1; i < polyLons.length; i++) {\n      if (polyLons[i] <= lon && polyLons[i-1] > lon || polyLons[i-1] <= lon && polyLons[i] > lon) {\n        if (polyLats[i] + (lon - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= lat) {\n          inPoly = !inPoly;\n        }\n      }\n    }\n    return inPoly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"087ab61b67c554befcfe6f666ca3bb613eac8fe3":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["087ab61b67c554befcfe6f666ca3bb613eac8fe3"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"087ab61b67c554befcfe6f666ca3bb613eac8fe3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["087ab61b67c554befcfe6f666ca3bb613eac8fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}