{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testRoundTrip() throws Exception {\n    Calendar cal = tree.newCal();\n\n    assertEquals(\"*\", tree.toString(cal));\n\n    //test no underflow\n    assertTrue(tree.toShape(new int[]{0}, 1).toString().startsWith(\"-\"));\n\n    //Some arbitrary date\n    cal.set(2014, Calendar.MAY, 9);\n    roundTrip(cal);\n    assertEquals(\"2014-05-09\",tree.toString(cal));\n\n    //Earliest date\n    cal.setTimeInMillis(Long.MIN_VALUE);\n    roundTrip(cal);\n\n    //Farthest date\n    cal.setTimeInMillis(Long.MAX_VALUE);\n    roundTrip(cal);\n\n    //1BC is \"0000\".\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0000\", tree.toString(cal));\n    //adding a \"+\" parses to the same; and a trailing 'Z' is fine too\n    assertEquals(cal, tree.parseCalendar(\"+0000Z\"));\n\n    //2BC is \"-0001\"\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 2);\n    roundTrip(cal);\n    assertEquals(\"-0001\", tree.toString(cal));\n\n    //1AD is \"0001\"\n    cal.clear();\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0001\", tree.toString(cal));\n\n    //test random\n    cal.setTimeInMillis(random().nextLong());\n    roundTrip(cal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","sourceNew":"  public void testRoundTrip() throws Exception {\n    Calendar cal = tree.newCal();\n\n    assertEquals(\"*\", tree.toString(cal));\n\n    //test no underflow\n    assertTrue(tree.toShape(new int[]{0}, 1).toString().startsWith(\"-\"));\n\n    //Some arbitrary date\n    cal.set(2014, Calendar.MAY, 9);\n    roundTrip(cal);\n    assertEquals(\"2014-05-09\",tree.toString(cal));\n\n    //Earliest date\n    cal.setTimeInMillis(Long.MIN_VALUE);\n    roundTrip(cal);\n\n    //Farthest date\n    cal.setTimeInMillis(Long.MAX_VALUE);\n    roundTrip(cal);\n\n    //1BC is \"0000\".\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0000\", tree.toString(cal));\n    //adding a \"+\" parses to the same; and a trailing 'Z' is fine too\n    assertEquals(cal, tree.parseCalendar(\"+0000Z\"));\n\n    //2BC is \"-0001\"\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 2);\n    roundTrip(cal);\n    assertEquals(\"-0001\", tree.toString(cal));\n\n    //1AD is \"0001\"\n    cal.clear();\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0001\", tree.toString(cal));\n\n    //test random\n    cal.setTimeInMillis(random().nextLong());\n    roundTrip(cal);\n  }\n\n","sourceOld":"  public void testRoundTrip() throws Exception {\n    Calendar cal = tree.newCal();\n\n    assertEquals(\"*\", tree.toString(cal));\n\n    //test no underflow\n    assertTrue(tree.toShape(new int[]{0}, 1).toString().startsWith(\"-\"));\n\n    //Some arbitrary date\n    cal.set(2014, Calendar.MAY, 9);\n    roundTrip(cal);\n    assertEquals(\"2014-05-09\",tree.toString(cal));\n\n    //Earliest date\n    cal.setTimeInMillis(Long.MIN_VALUE);\n    roundTrip(cal);\n\n    //Farthest date\n    cal.setTimeInMillis(Long.MAX_VALUE);\n    roundTrip(cal);\n\n    //1BC is \"0000\".\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0000\", tree.toString(cal));\n    //adding a \"+\" parses to the same; and a trailing 'Z' is fine too\n    assertEquals(cal, tree.parseCalendar(\"+0000Z\"));\n\n    //2BC is \"-0001\"\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 2);\n    roundTrip(cal);\n    assertEquals(\"-0001\", tree.toString(cal));\n\n    //1AD is \"0001\"\n    cal.clear();\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0001\", tree.toString(cal));\n\n    //test random\n    cal.setTimeInMillis(random().nextLong());\n    roundTrip(cal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testRoundTrip().mjava","sourceNew":"  public void testRoundTrip() throws Exception {\n    Calendar cal = tree.newCal();\n\n    assertEquals(\"*\", tree.toString(cal));\n\n    //test no underflow\n    assertTrue(tree.toShape(new int[]{0}, 1).toString().startsWith(\"-\"));\n\n    //Some arbitrary date\n    cal.set(2014, Calendar.MAY, 9);\n    roundTrip(cal);\n    assertEquals(\"2014-05-09\",tree.toString(cal));\n\n    //Earliest date\n    cal.setTimeInMillis(Long.MIN_VALUE);\n    roundTrip(cal);\n\n    //Farthest date\n    cal.setTimeInMillis(Long.MAX_VALUE);\n    roundTrip(cal);\n\n    //1BC is \"0000\".\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0000\", tree.toString(cal));\n    //adding a \"+\" parses to the same; and a trailing 'Z' is fine too\n    assertEquals(cal, tree.parseCalendar(\"+0000Z\"));\n\n    //2BC is \"-0001\"\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 2);\n    roundTrip(cal);\n    assertEquals(\"-0001\", tree.toString(cal));\n\n    //1AD is \"0001\"\n    cal.clear();\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0001\", tree.toString(cal));\n\n    //test random\n    cal.setTimeInMillis(random().nextLong());\n    roundTrip(cal);\n  }\n\n","sourceOld":"  public void testRoundTrip() throws Exception {\n    Calendar cal = tree.newCal();\n\n    assertEquals(\"*\", tree.toString(cal));\n\n    //test no underflow\n    assertTrue(tree.toShape(new int[]{0}, 1).toString().startsWith(\"-\"));\n\n    //Some arbitrary date\n    cal.set(2014, Calendar.MAY, 9);\n    roundTrip(cal);\n    assertEquals(\"2014-05-09\",tree.toString(cal));\n\n    //Earliest date\n    cal.setTimeInMillis(Long.MIN_VALUE);\n    roundTrip(cal);\n\n    //Farthest date\n    cal.setTimeInMillis(Long.MAX_VALUE);\n    roundTrip(cal);\n\n    //1BC is \"0000\".\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0000\", tree.toString(cal));\n    //adding a \"+\" parses to the same; and a trailing 'Z' is fine too\n    assertEquals(cal, tree.parseCalendar(\"+0000Z\"));\n\n    //2BC is \"-0001\"\n    cal.clear();\n    cal.set(Calendar.ERA, GregorianCalendar.BC);\n    cal.set(Calendar.YEAR, 2);\n    roundTrip(cal);\n    assertEquals(\"-0001\", tree.toString(cal));\n\n    //1AD is \"0001\"\n    cal.clear();\n    cal.set(Calendar.YEAR, 1);\n    roundTrip(cal);\n    assertEquals(\"0001\", tree.toString(cal));\n\n    //test random\n    cal.setTimeInMillis(random().nextLong());\n    roundTrip(cal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}