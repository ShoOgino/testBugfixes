{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","commits":[{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa","date":1461326984,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}. Also, only clauses whose cost is\n   * no more than {@code maxCostFactor} times the cost of the top-level query\n   * will be cached in order to not slow down queries too much due to caching.\n   * Pass {@link Float#POSITIVE_INFINITY} to cache regardless of costs.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache,\n      float maxCostFactor) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n    if (maxCostFactor < 1) {\n      throw new IllegalArgumentException(\"maxCostFactor must be no less than 1, got \" + maxCostFactor);\n    }\n    this.maxCostFactor = maxCostFactor;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}. Also, only clauses whose cost is\n   * no more than {@code maxCostFactor} times the cost of the top-level query\n   * will be cached in order to not slow down queries too much due to caching.\n   * Pass {@link Float#POSITIVE_INFINITY} to cache regardless of costs.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache,\n      float maxCostFactor) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n    if (maxCostFactor < 1) {\n      throw new IllegalArgumentException(\"maxCostFactor must be no less than 1, got \" + maxCostFactor);\n    }\n    this.maxCostFactor = maxCostFactor;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache};\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext],float).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}. Also, only clauses whose cost is\n   * no more than {@code maxCostFactor} times the cost of the top-level query\n   * will be cached in order to not slow down queries too much due to caching.\n   * Pass {@link Float#POSITIVE_INFINITY} to cache regardless of costs.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache,\n      float maxCostFactor) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n    if (maxCostFactor < 1) {\n      throw new IllegalArgumentException(\"maxCostFactor must be no less than 1, got \" + maxCostFactor);\n    }\n    this.maxCostFactor = maxCostFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext],float).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}. Also, only clauses whose cost is\n   * no more than {@code maxCostFactor} times the cost of the top-level query\n   * will be cached in order to not slow down queries too much due to caching.\n   * Pass {@link Float#POSITIVE_INFINITY} to cache regardless of costs.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache,\n      float maxCostFactor) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n    if (maxCostFactor < 1) {\n      throw new IllegalArgumentException(\"maxCostFactor must be no less than 1, got \" + maxCostFactor);\n    }\n    this.maxCostFactor = maxCostFactor;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":5,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long,Predicate[LeafReaderContext]).mjava","sourceNew":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}.\n   *\n   * Also, clauses whose cost is {@code skipCacheFactor} times more than the cost of the top-level query\n   * will not be cached in order to not slow down queries too much.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n                       Predicate<LeafReaderContext> leavesToCache, float skipCacheFactor) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    if (skipCacheFactor >= 1 == false) { // NaN >= 1 evaluates true\n      throw new IllegalArgumentException(\"skipCacheFactor must be no less than 1, get \" + skipCacheFactor);\n    }\n    this.skipCacheFactor = skipCacheFactor;\n\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Expert: Create a new instance that will cache at most <code>maxSize</code>\n   * queries with at most <code>maxRamBytesUsed</code> bytes of memory, only on\n   * leaves that satisfy {@code leavesToCache}.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed,\n      Predicate<LeafReaderContext> leavesToCache) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    this.leavesToCache = leavesToCache;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    lock = new ReentrantLock();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["aac61ee5b4492f174e60bd54939aba9539906edf","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["aac61ee5b4492f174e60bd54939aba9539906edf"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}