{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String,boolean).mjava","commits":[{"id":"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7","date":1445955220,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId, boolean persistIndex) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", \"solr.RAMDirectoryFactory\");\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26fc9c59806c587f9b96f0ea15fa9a0aa8001568","date":1452027155,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String,boolean).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId,\n      Boolean indexToPersist, Map<String,String> collectionProperties) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    final boolean persistIndex = (indexToPersist != null ? indexToPersist.booleanValue() : random().nextBoolean());\n    if (collectionProperties == null) {\n      collectionProperties = new HashMap<>();\n    }\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId, boolean persistIndex) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26fc9c59806c587f9b96f0ea15fa9a0aa8001568"],"26fc9c59806c587f9b96f0ea15fa9a0aa8001568":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["26fc9c59806c587f9b96f0ea15fa9a0aa8001568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"26fc9c59806c587f9b96f0ea15fa9a0aa8001568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}