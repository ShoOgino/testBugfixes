{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    AtomicInteger coldReplicas2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas2.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes\", 1, coldNodes2.get());\n    assertEquals(\"colReplicas\", 1, coldReplicas2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    AtomicInteger coldReplicas2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas2.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes\", 1, coldNodes2.get());\n    assertEquals(\"colReplicas\", 1, coldReplicas2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    AtomicInteger coldReplicas2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas2.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes\", 1, coldNodes2.get());\n    assertEquals(\"colReplicas\", 1, coldReplicas2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 1, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    AtomicInteger coldReplicas2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas2.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes\", 1, coldNodes2.get());\n    assertEquals(\"colReplicas\", 1, coldReplicas2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0921a3414432a896e242b56e81736020946fe960","date":1548182831,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 15-Sep-2018\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        // RecoveryStrategy calls /admin/ping, which calls /select so this may not be zero\n        // even when no external requests were made\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        // do nothing but generate an op\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger2',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 4 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 7, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 4, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n    // wait for waitFor to elapse for all types of violations\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds * 2, TimeUnit.SECONDS));\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger2',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.3,\" +\n        \"'aboveNodeRate' : 1.0,\" +\n        \"'belowNodeRate' : 0.3,\" +\n        \"'minReplicas' : 1,\" +\n        \"'belowNodeOp' : 'none',\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend trigger\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1));\n  }\n\n","sourceOld":"  @Test\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testBelowSearchRate().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBelowSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"belowRate_collection\";\n    // replicationFactor == 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    // add a couple of spare replicas above RF. Use different types.\n    // these additional replicas will be placed on other nodes in the cluster\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.NRT));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.TLOG));\n    solrClient.request(CollectionAdminRequest.addReplicaToShard(COLL1, \"shard1\", Replica.Type.PULL));\n\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 5));\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : false,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       // RecoveryStrategy calls /admin/ping, which calls /select so the rate may not be zero\n       // even when no external requests were made .. but it's hard to predict exactly\n       // what it will be.  use an insanely high rate so all shards/nodes are suspect\n       // and produce an Op regardless of how much internal traffic is produced...\n       \"'belowRate' : 1.0,\" +\n       \"'belowNodeRate' : 1.0,\" +\n       // ...but do absolutely nothing to nodes except generate an 'NONE' Op\n       \"'belowNodeOp' : 'none',\" +\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'started',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['STARTED'],\" +\n       \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'srt',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['FAILED','SUCCEEDED'],\" +\n       \"'afterAction': ['compute', 'execute'],\" +\n       \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n    listenerEventLatch = new CountDownLatch(3);\n    \n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager, \n       \"{\" +\n       \"'set-listener' : \" +\n       \"{\" +\n       \"'name' : 'finished',\" +\n       \"'trigger' : 'search_rate_trigger2',\" +\n       \"'stage' : ['SUCCEEDED'],\" +\n       \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n       \"}\" +\n       \"}\");\n\n    // Explicitly Do Nothing Here\n\n    // enable the trigger\n    final String resumeTriggerCommand = \"{ 'resume-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    final String suspendTriggerCommand = \"{ 'suspend-trigger' : { 'name' : 'search_rate_trigger2' } }\";\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n    CapturedEvent ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    // 5 cold nodes, 3 cold replicas\n    assertEquals(ops.toString(), 5 + 3, ops.size());\n    AtomicInteger coldNodes = new AtomicInteger();\n    AtomicInteger coldReplicas = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        coldReplicas.incrementAndGet();\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n    assertEquals(\"cold nodes\", 5, coldNodes.get());\n    assertEquals(\"cold replicas\", 3, coldReplicas.get());\n\n    // now the collection should be down to RF = 2\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 2));\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    // resume trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, resumeTriggerCommand);\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    // there should be only coldNode ops now, and no coldReplica ops since searchable RF == collection RF\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n    assertEquals(ops.toString(), 2, ops.size());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(0).getAction());\n    assertEquals(ops.toString(), CollectionParams.CollectionAction.NONE, ops.get(1).getAction());\n\n\n    listenerEvents.clear();\n    listenerEventLatch = new CountDownLatch(3);\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n\n    log.info(\"## test single replicas.\");\n\n    // now allow single replicas\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'search_rate_trigger2',\" +\n       \"'event' : 'searchRate',\" +\n       \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n       \"'enabled' : true,\" +\n       \"'collections' : '\" + COLL1 + \"',\" +\n       \"'aboveRate' : 1.0,\" +\n       \"'aboveNodeRate' : 1.0,\" +\n       \"'belowRate' : 1.0,\" + // same excessively high values\n       \"'belowNodeRate' : 1.0,\" +\n       \"'minReplicas' : 1,\" + // NEW: force lower replicas\n       \"'belowNodeOp' : 'none',\" + // still do nothing to nodes\n       \"'actions' : [\" +\n       \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n       \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n       \"]\" +\n       \"}}\");\n\n    assertTrue(\"The trigger did not start in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"The trigger did not finish in a reasonable amount of time\",\n               started.await(60, TimeUnit.SECONDS));\n    \n    assertTrue(\"the listener should have recorded all events w/in a reasonable amount of time\",\n               listenerEventLatch.await(60, TimeUnit.SECONDS));\n\n    // suspend the trigger\n    CloudTestUtils.assertAutoScalingRequest(cloudManager, suspendTriggerCommand);\n\n    events = listenerEvents.get(\"srt\");\n    assertEquals(events.toString(), 3, events.size());\n\n    ev = events.get(0);\n    assertEquals(ev.toString(), \"compute\", ev.actionName);\n    ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"there should be some requestedOps: \" + ev.toString(), ops);\n\n    assertTrue(ops.toString(), ops.size() > 0);\n    AtomicInteger coldNodes2 = new AtomicInteger();\n    ops.forEach(op -> {\n      if (op.getAction().equals(CollectionParams.CollectionAction.NONE)) {\n        coldNodes2.incrementAndGet();\n      } else if (op.getAction().equals(CollectionParams.CollectionAction.DELETEREPLICA)) {\n        // ignore\n      } else {\n        fail(\"unexpected op: \" + op);\n      }\n    });\n\n    assertEquals(\"coldNodes: \" +ops.toString(), 2, coldNodes2.get());\n\n    // now the collection should be at RF == 1, with one additional PULL replica\n    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"0921a3414432a896e242b56e81736020946fe960":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"43ad790248d7f7daee5d9cced548c546f37c7218":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["43ad790248d7f7daee5d9cced548c546f37c7218"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["0921a3414432a896e242b56e81736020946fe960"],"89948af0461fead48f44ba8fb7866f107ce83f22":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["8d35c84fdef07284c122012ca4000d3b7285a66e","0921a3414432a896e242b56e81736020946fe960"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"0921a3414432a896e242b56e81736020946fe960":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["89948af0461fead48f44ba8fb7866f107ce83f22"],"43ad790248d7f7daee5d9cced548c546f37c7218":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["0921a3414432a896e242b56e81736020946fe960","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["43ad790248d7f7daee5d9cced548c546f37c7218"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}