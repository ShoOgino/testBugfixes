{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPercentiles().mjava","commits":[{"id":"8b4d567cfa76681fe80b621fd74a673d7db7937b","date":1494979945,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPercentiles().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPercentiles() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=percentile(e, 88), \" +\n        \"p2=percentile(e, 2), \" +\n        \"p3=percentile(e, 99), \" +\n        \"p4=percentile(e, 77), \" +\n        \"p5=percentile(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPercentiles().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPercentiles() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=percentile(e, 88), \" +\n        \"p2=percentile(e, 2), \" +\n        \"p3=percentile(e, 99), \" +\n        \"p4=percentile(e, 77), \" +\n        \"p5=percentile(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5156e47b791bd464473781bacfd0f1a03130a6b","date":1496675957,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCumulativeProbability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPercentiles().mjava","sourceNew":"  @Test\n  public void testCumulativeProbability() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=cumulativeProbability(e, 88), \" +\n        \"p2=cumulativeProbability(e, 2), \" +\n        \"p3=cumulativeProbability(e, 99), \" +\n        \"p4=cumulativeProbability(e, 77), \" +\n        \"p5=cumulativeProbability(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testPercentiles() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=percentile(e, 88), \" +\n        \"p2=percentile(e, 2), \" +\n        \"p3=percentile(e, 99), \" +\n        \"p4=percentile(e, 77), \" +\n        \"p5=percentile(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPercentiles().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPercentiles() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<100) {\n      i=i+2;\n      updateRequest.add(id, \"id_\"+(i), \"price_f\", Integer.toString(i));\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"price_f\\\", sort=\\\"price_f asc\\\", rows=\\\"200\\\")\";\n    String cexpr = \"let(a=\"+expr+\", c=col(a, price_f), e=empiricalDistribution(c), \" +\n        \"tuple(p1=percentile(e, 88), \" +\n        \"p2=percentile(e, 2), \" +\n        \"p3=percentile(e, 99), \" +\n        \"p4=percentile(e, 77), \" +\n        \"p5=percentile(e, 98)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    double percentile1 = tuples.get(0).getDouble(\"p1\");\n    double percentile2 = tuples.get(0).getDouble(\"p2\");\n    double percentile3 = tuples.get(0).getDouble(\"p3\");\n    double percentile4 = tuples.get(0).getDouble(\"p4\");\n    double percentile5 = tuples.get(0).getDouble(\"p5\");\n\n\n    assertEquals(.88D, percentile1, 0.001);\n    assertEquals(.0D, percentile2, 0.001);\n    assertEquals(1.0D, percentile3, 0.001);\n    assertEquals(.78D, percentile4, 0.001);\n    assertEquals(.98D, percentile5, 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b4d567cfa76681fe80b621fd74a673d7db7937b"],"28288370235ed02234a64753cdbf0c6ec096304a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","c5156e47b791bd464473781bacfd0f1a03130a6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c5156e47b791bd464473781bacfd0f1a03130a6b":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b4d567cfa76681fe80b621fd74a673d7db7937b","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["28288370235ed02234a64753cdbf0c6ec096304a","c5156e47b791bd464473781bacfd0f1a03130a6b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5156e47b791bd464473781bacfd0f1a03130a6b":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}