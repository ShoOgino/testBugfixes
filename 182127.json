{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"/dev/null","sourceNew":"    public void mTokens() throws RecognitionException {\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n        int alt16=32;\n        switch ( input.LA(1) ) {\n        case '+':\n            {\n            alt16=1;\n            }\n            break;\n        case '&':\n            {\n            int LA16_2 = input.LA(2);\n\n            if ( (LA16_2=='&') ) {\n                alt16=9;\n            }\n            else {\n                alt16=2;\n            }\n            }\n            break;\n        case '~':\n            {\n            alt16=3;\n            }\n            break;\n        case '|':\n            {\n            int LA16_4 = input.LA(2);\n\n            if ( (LA16_4=='|') ) {\n                alt16=11;\n            }\n            else {\n                alt16=4;\n            }\n            }\n            break;\n        case '<':\n            {\n            switch ( input.LA(2) ) {\n            case '<':\n                {\n                alt16=5;\n                }\n                break;\n            case '=':\n                {\n                alt16=18;\n                }\n                break;\n            default:\n                alt16=17;\n            }\n\n            }\n            break;\n        case '>':\n            {\n            switch ( input.LA(2) ) {\n            case '>':\n                {\n                int LA16_31 = input.LA(3);\n\n                if ( (LA16_31=='>') ) {\n                    alt16=7;\n                }\n                else {\n                    alt16=6;\n                }\n                }\n                break;\n            case '=':\n                {\n                alt16=16;\n                }\n                break;\n            default:\n                alt16=15;\n            }\n\n            }\n            break;\n        case '^':\n            {\n            alt16=8;\n            }\n            break;\n        case '!':\n            {\n            int LA16_8 = input.LA(2);\n\n            if ( (LA16_8=='=') ) {\n                alt16=19;\n            }\n            else {\n                alt16=10;\n            }\n            }\n            break;\n        case ':':\n            {\n            alt16=12;\n            }\n            break;\n        case ',':\n            {\n            alt16=13;\n            }\n            break;\n        case '=':\n            {\n            alt16=14;\n            }\n            break;\n        case '?':\n            {\n            alt16=20;\n            }\n            break;\n        case '/':\n            {\n            alt16=21;\n            }\n            break;\n        case '.':\n            {\n            int LA16_14 = input.LA(2);\n\n            if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n                alt16=30;\n            }\n            else {\n                alt16=22;\n            }\n            }\n            break;\n        case '(':\n            {\n            alt16=23;\n            }\n            break;\n        case '%':\n            {\n            alt16=24;\n            }\n            break;\n        case '*':\n            {\n            alt16=25;\n            }\n            break;\n        case ')':\n            {\n            alt16=26;\n            }\n            break;\n        case '-':\n            {\n            alt16=27;\n            }\n            break;\n        case 'A':\n        case 'B':\n        case 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case '_':\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            {\n            alt16=28;\n            }\n            break;\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case ' ':\n            {\n            alt16=29;\n            }\n            break;\n        case '0':\n            {\n            switch ( input.LA(2) ) {\n            case 'X':\n            case 'x':\n                {\n                alt16=32;\n                }\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n                {\n                alt16=31;\n                }\n                break;\n            default:\n                alt16=30;\n            }\n\n            }\n            break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            {\n            alt16=30;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 16, 0, input);\n\n            throw nvae;\n\n        }\n\n        switch (alt16) {\n            case 1 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n                {\n                mAT_ADD(); \n\n\n                }\n                break;\n            case 2 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n                {\n                mAT_BIT_AND(); \n\n\n                }\n                break;\n            case 3 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n                {\n                mAT_BIT_NOT(); \n\n\n                }\n                break;\n            case 4 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n                {\n                mAT_BIT_OR(); \n\n\n                }\n                break;\n            case 5 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n                {\n                mAT_BIT_SHL(); \n\n\n                }\n                break;\n            case 6 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n                {\n                mAT_BIT_SHR(); \n\n\n                }\n                break;\n            case 7 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n                {\n                mAT_BIT_SHU(); \n\n\n                }\n                break;\n            case 8 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n                {\n                mAT_BIT_XOR(); \n\n\n                }\n                break;\n            case 9 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n                {\n                mAT_BOOL_AND(); \n\n\n                }\n                break;\n            case 10 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n                {\n                mAT_BOOL_NOT(); \n\n\n                }\n                break;\n            case 11 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n                {\n                mAT_BOOL_OR(); \n\n\n                }\n                break;\n            case 12 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n                {\n                mAT_COLON(); \n\n\n                }\n                break;\n            case 13 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n                {\n                mAT_COMMA(); \n\n\n                }\n                break;\n            case 14 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n                {\n                mAT_COMP_EQ(); \n\n\n                }\n                break;\n            case 15 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n                {\n                mAT_COMP_GT(); \n\n\n                }\n                break;\n            case 16 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n                {\n                mAT_COMP_GTE(); \n\n\n                }\n                break;\n            case 17 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n                {\n                mAT_COMP_LT(); \n\n\n                }\n                break;\n            case 18 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n                {\n                mAT_COMP_LTE(); \n\n\n                }\n                break;\n            case 19 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n                {\n                mAT_COMP_NEQ(); \n\n\n                }\n                break;\n            case 20 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n                {\n                mAT_COND_QUE(); \n\n\n                }\n                break;\n            case 21 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n                {\n                mAT_DIVIDE(); \n\n\n                }\n                break;\n            case 22 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n                {\n                mAT_DOT(); \n\n\n                }\n                break;\n            case 23 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n                {\n                mAT_LPAREN(); \n\n\n                }\n                break;\n            case 24 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n                {\n                mAT_MODULO(); \n\n\n                }\n                break;\n            case 25 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n                {\n                mAT_MULTIPLY(); \n\n\n                }\n                break;\n            case 26 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n                {\n                mAT_RPAREN(); \n\n\n                }\n                break;\n            case 27 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n                {\n                mAT_SUBTRACT(); \n\n\n                }\n                break;\n            case 28 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n                {\n                mID(); \n\n\n                }\n                break;\n            case 29 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n                {\n                mWS(); \n\n\n                }\n                break;\n            case 30 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n                {\n                mDECIMAL(); \n\n\n                }\n                break;\n            case 31 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n                {\n                mOCTAL(); \n\n\n                }\n                break;\n            case 32 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n                {\n                mHEX(); \n\n\n                }\n                break;\n\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"    @Override\n    public void mTokens() throws RecognitionException {\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n        int alt16=32;\n        switch ( input.LA(1) ) {\n        case '+':\n            {\n            alt16=1;\n            }\n            break;\n        case '&':\n            {\n            int LA16_2 = input.LA(2);\n            if ( (LA16_2=='&') ) {\n                alt16=9;\n            }\n\n            else {\n                alt16=2;\n            }\n\n            }\n            break;\n        case '~':\n            {\n            alt16=3;\n            }\n            break;\n        case '|':\n            {\n            int LA16_4 = input.LA(2);\n            if ( (LA16_4=='|') ) {\n                alt16=11;\n            }\n\n            else {\n                alt16=4;\n            }\n\n            }\n            break;\n        case '<':\n            {\n            switch ( input.LA(2) ) {\n            case '<':\n                {\n                alt16=5;\n                }\n                break;\n            case '=':\n                {\n                alt16=18;\n                }\n                break;\n            default:\n                alt16=17;\n            }\n            }\n            break;\n        case '>':\n            {\n            switch ( input.LA(2) ) {\n            case '>':\n                {\n                int LA16_31 = input.LA(3);\n                if ( (LA16_31=='>') ) {\n                    alt16=7;\n                }\n\n                else {\n                    alt16=6;\n                }\n\n                }\n                break;\n            case '=':\n                {\n                alt16=16;\n                }\n                break;\n            default:\n                alt16=15;\n            }\n            }\n            break;\n        case '^':\n            {\n            alt16=8;\n            }\n            break;\n        case '!':\n            {\n            int LA16_8 = input.LA(2);\n            if ( (LA16_8=='=') ) {\n                alt16=19;\n            }\n\n            else {\n                alt16=10;\n            }\n\n            }\n            break;\n        case ':':\n            {\n            alt16=12;\n            }\n            break;\n        case ',':\n            {\n            alt16=13;\n            }\n            break;\n        case '=':\n            {\n            alt16=14;\n            }\n            break;\n        case '?':\n            {\n            alt16=20;\n            }\n            break;\n        case '/':\n            {\n            alt16=21;\n            }\n            break;\n        case '.':\n            {\n            int LA16_14 = input.LA(2);\n            if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n                alt16=30;\n            }\n\n            else {\n                alt16=22;\n            }\n\n            }\n            break;\n        case '(':\n            {\n            alt16=23;\n            }\n            break;\n        case '%':\n            {\n            alt16=24;\n            }\n            break;\n        case '*':\n            {\n            alt16=25;\n            }\n            break;\n        case ')':\n            {\n            alt16=26;\n            }\n            break;\n        case '-':\n            {\n            alt16=27;\n            }\n            break;\n        case 'A':\n        case 'B':\n        case 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case '_':\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            {\n            alt16=28;\n            }\n            break;\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case ' ':\n            {\n            alt16=29;\n            }\n            break;\n        case '0':\n            {\n            switch ( input.LA(2) ) {\n            case 'X':\n            case 'x':\n                {\n                alt16=32;\n                }\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n                {\n                alt16=31;\n                }\n                break;\n            default:\n                alt16=30;\n            }\n            }\n            break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            {\n            alt16=30;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 16, 0, input);\n            throw nvae;\n        }\n        switch (alt16) {\n            case 1 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n                {\n                mAT_ADD(); \n\n                }\n                break;\n            case 2 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n                {\n                mAT_BIT_AND(); \n\n                }\n                break;\n            case 3 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n                {\n                mAT_BIT_NOT(); \n\n                }\n                break;\n            case 4 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n                {\n                mAT_BIT_OR(); \n\n                }\n                break;\n            case 5 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n                {\n                mAT_BIT_SHL(); \n\n                }\n                break;\n            case 6 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n                {\n                mAT_BIT_SHR(); \n\n                }\n                break;\n            case 7 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n                {\n                mAT_BIT_SHU(); \n\n                }\n                break;\n            case 8 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n                {\n                mAT_BIT_XOR(); \n\n                }\n                break;\n            case 9 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n                {\n                mAT_BOOL_AND(); \n\n                }\n                break;\n            case 10 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n                {\n                mAT_BOOL_NOT(); \n\n                }\n                break;\n            case 11 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n                {\n                mAT_BOOL_OR(); \n\n                }\n                break;\n            case 12 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n                {\n                mAT_COLON(); \n\n                }\n                break;\n            case 13 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n                {\n                mAT_COMMA(); \n\n                }\n                break;\n            case 14 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n                {\n                mAT_COMP_EQ(); \n\n                }\n                break;\n            case 15 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n                {\n                mAT_COMP_GT(); \n\n                }\n                break;\n            case 16 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n                {\n                mAT_COMP_GTE(); \n\n                }\n                break;\n            case 17 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n                {\n                mAT_COMP_LT(); \n\n                }\n                break;\n            case 18 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n                {\n                mAT_COMP_LTE(); \n\n                }\n                break;\n            case 19 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n                {\n                mAT_COMP_NEQ(); \n\n                }\n                break;\n            case 20 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n                {\n                mAT_COND_QUE(); \n\n                }\n                break;\n            case 21 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n                {\n                mAT_DIVIDE(); \n\n                }\n                break;\n            case 22 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n                {\n                mAT_DOT(); \n\n                }\n                break;\n            case 23 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n                {\n                mAT_LPAREN(); \n\n                }\n                break;\n            case 24 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n                {\n                mAT_MODULO(); \n\n                }\n                break;\n            case 25 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n                {\n                mAT_MULTIPLY(); \n\n                }\n                break;\n            case 26 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n                {\n                mAT_RPAREN(); \n\n                }\n                break;\n            case 27 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n                {\n                mAT_SUBTRACT(); \n\n                }\n                break;\n            case 28 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n                {\n                mID(); \n\n                }\n                break;\n            case 29 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n                {\n                mWS(); \n\n                }\n                break;\n            case 30 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n                {\n                mDECIMAL(); \n\n                }\n                break;\n            case 31 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n                {\n                mOCTAL(); \n\n                }\n                break;\n            case 32 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n                {\n                mHEX(); \n\n                }\n                break;\n\n        }\n    }\n\n","sourceOld":"    public void mTokens() throws RecognitionException {\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n        int alt16=32;\n        switch ( input.LA(1) ) {\n        case '+':\n            {\n            alt16=1;\n            }\n            break;\n        case '&':\n            {\n            int LA16_2 = input.LA(2);\n\n            if ( (LA16_2=='&') ) {\n                alt16=9;\n            }\n            else {\n                alt16=2;\n            }\n            }\n            break;\n        case '~':\n            {\n            alt16=3;\n            }\n            break;\n        case '|':\n            {\n            int LA16_4 = input.LA(2);\n\n            if ( (LA16_4=='|') ) {\n                alt16=11;\n            }\n            else {\n                alt16=4;\n            }\n            }\n            break;\n        case '<':\n            {\n            switch ( input.LA(2) ) {\n            case '<':\n                {\n                alt16=5;\n                }\n                break;\n            case '=':\n                {\n                alt16=18;\n                }\n                break;\n            default:\n                alt16=17;\n            }\n\n            }\n            break;\n        case '>':\n            {\n            switch ( input.LA(2) ) {\n            case '>':\n                {\n                int LA16_31 = input.LA(3);\n\n                if ( (LA16_31=='>') ) {\n                    alt16=7;\n                }\n                else {\n                    alt16=6;\n                }\n                }\n                break;\n            case '=':\n                {\n                alt16=16;\n                }\n                break;\n            default:\n                alt16=15;\n            }\n\n            }\n            break;\n        case '^':\n            {\n            alt16=8;\n            }\n            break;\n        case '!':\n            {\n            int LA16_8 = input.LA(2);\n\n            if ( (LA16_8=='=') ) {\n                alt16=19;\n            }\n            else {\n                alt16=10;\n            }\n            }\n            break;\n        case ':':\n            {\n            alt16=12;\n            }\n            break;\n        case ',':\n            {\n            alt16=13;\n            }\n            break;\n        case '=':\n            {\n            alt16=14;\n            }\n            break;\n        case '?':\n            {\n            alt16=20;\n            }\n            break;\n        case '/':\n            {\n            alt16=21;\n            }\n            break;\n        case '.':\n            {\n            int LA16_14 = input.LA(2);\n\n            if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n                alt16=30;\n            }\n            else {\n                alt16=22;\n            }\n            }\n            break;\n        case '(':\n            {\n            alt16=23;\n            }\n            break;\n        case '%':\n            {\n            alt16=24;\n            }\n            break;\n        case '*':\n            {\n            alt16=25;\n            }\n            break;\n        case ')':\n            {\n            alt16=26;\n            }\n            break;\n        case '-':\n            {\n            alt16=27;\n            }\n            break;\n        case 'A':\n        case 'B':\n        case 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case '_':\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            {\n            alt16=28;\n            }\n            break;\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case ' ':\n            {\n            alt16=29;\n            }\n            break;\n        case '0':\n            {\n            switch ( input.LA(2) ) {\n            case 'X':\n            case 'x':\n                {\n                alt16=32;\n                }\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n                {\n                alt16=31;\n                }\n                break;\n            default:\n                alt16=30;\n            }\n\n            }\n            break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            {\n            alt16=30;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 16, 0, input);\n\n            throw nvae;\n\n        }\n\n        switch (alt16) {\n            case 1 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n                {\n                mAT_ADD(); \n\n\n                }\n                break;\n            case 2 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n                {\n                mAT_BIT_AND(); \n\n\n                }\n                break;\n            case 3 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n                {\n                mAT_BIT_NOT(); \n\n\n                }\n                break;\n            case 4 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n                {\n                mAT_BIT_OR(); \n\n\n                }\n                break;\n            case 5 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n                {\n                mAT_BIT_SHL(); \n\n\n                }\n                break;\n            case 6 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n                {\n                mAT_BIT_SHR(); \n\n\n                }\n                break;\n            case 7 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n                {\n                mAT_BIT_SHU(); \n\n\n                }\n                break;\n            case 8 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n                {\n                mAT_BIT_XOR(); \n\n\n                }\n                break;\n            case 9 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n                {\n                mAT_BOOL_AND(); \n\n\n                }\n                break;\n            case 10 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n                {\n                mAT_BOOL_NOT(); \n\n\n                }\n                break;\n            case 11 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n                {\n                mAT_BOOL_OR(); \n\n\n                }\n                break;\n            case 12 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n                {\n                mAT_COLON(); \n\n\n                }\n                break;\n            case 13 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n                {\n                mAT_COMMA(); \n\n\n                }\n                break;\n            case 14 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n                {\n                mAT_COMP_EQ(); \n\n\n                }\n                break;\n            case 15 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n                {\n                mAT_COMP_GT(); \n\n\n                }\n                break;\n            case 16 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n                {\n                mAT_COMP_GTE(); \n\n\n                }\n                break;\n            case 17 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n                {\n                mAT_COMP_LT(); \n\n\n                }\n                break;\n            case 18 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n                {\n                mAT_COMP_LTE(); \n\n\n                }\n                break;\n            case 19 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n                {\n                mAT_COMP_NEQ(); \n\n\n                }\n                break;\n            case 20 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n                {\n                mAT_COND_QUE(); \n\n\n                }\n                break;\n            case 21 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n                {\n                mAT_DIVIDE(); \n\n\n                }\n                break;\n            case 22 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n                {\n                mAT_DOT(); \n\n\n                }\n                break;\n            case 23 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n                {\n                mAT_LPAREN(); \n\n\n                }\n                break;\n            case 24 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n                {\n                mAT_MODULO(); \n\n\n                }\n                break;\n            case 25 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n                {\n                mAT_MULTIPLY(); \n\n\n                }\n                break;\n            case 26 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n                {\n                mAT_RPAREN(); \n\n\n                }\n                break;\n            case 27 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n                {\n                mAT_SUBTRACT(); \n\n\n                }\n                break;\n            case 28 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n                {\n                mID(); \n\n\n                }\n                break;\n            case 29 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n                {\n                mWS(); \n\n\n                }\n                break;\n            case 30 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n                {\n                mDECIMAL(); \n\n\n                }\n                break;\n            case 31 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n                {\n                mOCTAL(); \n\n\n                }\n                break;\n            case 32 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n                {\n                mHEX(); \n\n\n                }\n                break;\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n    int alt16=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt16=1;\n      }\n      break;\n    case '&':\n      {\n      int LA16_2 = input.LA(2);\n      if ( (LA16_2=='&') ) {\n        alt16=9;\n      }\n\n      else {\n        alt16=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt16=3;\n      }\n      break;\n    case '|':\n      {\n      int LA16_4 = input.LA(2);\n      if ( (LA16_4=='|') ) {\n        alt16=11;\n      }\n\n      else {\n        alt16=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt16=5;\n        }\n        break;\n      case '=':\n        {\n        alt16=18;\n        }\n        break;\n      default:\n        alt16=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA16_31 = input.LA(3);\n        if ( (LA16_31=='>') ) {\n          alt16=7;\n        }\n\n        else {\n          alt16=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt16=16;\n        }\n        break;\n      default:\n        alt16=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt16=8;\n      }\n      break;\n    case '!':\n      {\n      int LA16_8 = input.LA(2);\n      if ( (LA16_8=='=') ) {\n        alt16=19;\n      }\n\n      else {\n        alt16=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt16=12;\n      }\n      break;\n    case ',':\n      {\n      alt16=13;\n      }\n      break;\n    case '=':\n      {\n      alt16=14;\n      }\n      break;\n    case '?':\n      {\n      alt16=20;\n      }\n      break;\n    case '/':\n      {\n      alt16=21;\n      }\n      break;\n    case '.':\n      {\n      int LA16_14 = input.LA(2);\n      if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n        alt16=30;\n      }\n\n      else {\n        alt16=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt16=23;\n      }\n      break;\n    case '%':\n      {\n      alt16=24;\n      }\n      break;\n    case '*':\n      {\n      alt16=25;\n      }\n      break;\n    case ')':\n      {\n      alt16=26;\n      }\n      break;\n    case '-':\n      {\n      alt16=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt16=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt16=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt16=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt16=31;\n        }\n        break;\n      default:\n        alt16=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt16=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 16, 0, input);\n      throw nvae;\n    }\n    switch (alt16) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n        {\n        mID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":"    @Override\n    public void mTokens() throws RecognitionException {\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n        int alt16=32;\n        switch ( input.LA(1) ) {\n        case '+':\n            {\n            alt16=1;\n            }\n            break;\n        case '&':\n            {\n            int LA16_2 = input.LA(2);\n            if ( (LA16_2=='&') ) {\n                alt16=9;\n            }\n\n            else {\n                alt16=2;\n            }\n\n            }\n            break;\n        case '~':\n            {\n            alt16=3;\n            }\n            break;\n        case '|':\n            {\n            int LA16_4 = input.LA(2);\n            if ( (LA16_4=='|') ) {\n                alt16=11;\n            }\n\n            else {\n                alt16=4;\n            }\n\n            }\n            break;\n        case '<':\n            {\n            switch ( input.LA(2) ) {\n            case '<':\n                {\n                alt16=5;\n                }\n                break;\n            case '=':\n                {\n                alt16=18;\n                }\n                break;\n            default:\n                alt16=17;\n            }\n            }\n            break;\n        case '>':\n            {\n            switch ( input.LA(2) ) {\n            case '>':\n                {\n                int LA16_31 = input.LA(3);\n                if ( (LA16_31=='>') ) {\n                    alt16=7;\n                }\n\n                else {\n                    alt16=6;\n                }\n\n                }\n                break;\n            case '=':\n                {\n                alt16=16;\n                }\n                break;\n            default:\n                alt16=15;\n            }\n            }\n            break;\n        case '^':\n            {\n            alt16=8;\n            }\n            break;\n        case '!':\n            {\n            int LA16_8 = input.LA(2);\n            if ( (LA16_8=='=') ) {\n                alt16=19;\n            }\n\n            else {\n                alt16=10;\n            }\n\n            }\n            break;\n        case ':':\n            {\n            alt16=12;\n            }\n            break;\n        case ',':\n            {\n            alt16=13;\n            }\n            break;\n        case '=':\n            {\n            alt16=14;\n            }\n            break;\n        case '?':\n            {\n            alt16=20;\n            }\n            break;\n        case '/':\n            {\n            alt16=21;\n            }\n            break;\n        case '.':\n            {\n            int LA16_14 = input.LA(2);\n            if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n                alt16=30;\n            }\n\n            else {\n                alt16=22;\n            }\n\n            }\n            break;\n        case '(':\n            {\n            alt16=23;\n            }\n            break;\n        case '%':\n            {\n            alt16=24;\n            }\n            break;\n        case '*':\n            {\n            alt16=25;\n            }\n            break;\n        case ')':\n            {\n            alt16=26;\n            }\n            break;\n        case '-':\n            {\n            alt16=27;\n            }\n            break;\n        case 'A':\n        case 'B':\n        case 'C':\n        case 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case '_':\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            {\n            alt16=28;\n            }\n            break;\n        case '\\t':\n        case '\\n':\n        case '\\r':\n        case ' ':\n            {\n            alt16=29;\n            }\n            break;\n        case '0':\n            {\n            switch ( input.LA(2) ) {\n            case 'X':\n            case 'x':\n                {\n                alt16=32;\n                }\n                break;\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n                {\n                alt16=31;\n                }\n                break;\n            default:\n                alt16=30;\n            }\n            }\n            break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            {\n            alt16=30;\n            }\n            break;\n        default:\n            NoViableAltException nvae =\n                new NoViableAltException(\"\", 16, 0, input);\n            throw nvae;\n        }\n        switch (alt16) {\n            case 1 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n                {\n                mAT_ADD(); \n\n                }\n                break;\n            case 2 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n                {\n                mAT_BIT_AND(); \n\n                }\n                break;\n            case 3 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n                {\n                mAT_BIT_NOT(); \n\n                }\n                break;\n            case 4 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n                {\n                mAT_BIT_OR(); \n\n                }\n                break;\n            case 5 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n                {\n                mAT_BIT_SHL(); \n\n                }\n                break;\n            case 6 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n                {\n                mAT_BIT_SHR(); \n\n                }\n                break;\n            case 7 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n                {\n                mAT_BIT_SHU(); \n\n                }\n                break;\n            case 8 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n                {\n                mAT_BIT_XOR(); \n\n                }\n                break;\n            case 9 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n                {\n                mAT_BOOL_AND(); \n\n                }\n                break;\n            case 10 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n                {\n                mAT_BOOL_NOT(); \n\n                }\n                break;\n            case 11 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n                {\n                mAT_BOOL_OR(); \n\n                }\n                break;\n            case 12 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n                {\n                mAT_COLON(); \n\n                }\n                break;\n            case 13 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n                {\n                mAT_COMMA(); \n\n                }\n                break;\n            case 14 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n                {\n                mAT_COMP_EQ(); \n\n                }\n                break;\n            case 15 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n                {\n                mAT_COMP_GT(); \n\n                }\n                break;\n            case 16 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n                {\n                mAT_COMP_GTE(); \n\n                }\n                break;\n            case 17 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n                {\n                mAT_COMP_LT(); \n\n                }\n                break;\n            case 18 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n                {\n                mAT_COMP_LTE(); \n\n                }\n                break;\n            case 19 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n                {\n                mAT_COMP_NEQ(); \n\n                }\n                break;\n            case 20 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n                {\n                mAT_COND_QUE(); \n\n                }\n                break;\n            case 21 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n                {\n                mAT_DIVIDE(); \n\n                }\n                break;\n            case 22 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n                {\n                mAT_DOT(); \n\n                }\n                break;\n            case 23 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n                {\n                mAT_LPAREN(); \n\n                }\n                break;\n            case 24 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n                {\n                mAT_MODULO(); \n\n                }\n                break;\n            case 25 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n                {\n                mAT_MULTIPLY(); \n\n                }\n                break;\n            case 26 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n                {\n                mAT_RPAREN(); \n\n                }\n                break;\n            case 27 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n                {\n                mAT_SUBTRACT(); \n\n                }\n                break;\n            case 28 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n                {\n                mID(); \n\n                }\n                break;\n            case 29 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n                {\n                mWS(); \n\n                }\n                break;\n            case 30 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n                {\n                mDECIMAL(); \n\n                }\n                break;\n            case 31 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n                {\n                mOCTAL(); \n\n                }\n                break;\n            case 32 :\n                // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n                {\n                mHEX(); \n\n                }\n                break;\n\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n    int alt16=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt16=1;\n      }\n      break;\n    case '&':\n      {\n      int LA16_2 = input.LA(2);\n      if ( (LA16_2=='&') ) {\n        alt16=9;\n      }\n\n      else {\n        alt16=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt16=3;\n      }\n      break;\n    case '|':\n      {\n      int LA16_4 = input.LA(2);\n      if ( (LA16_4=='|') ) {\n        alt16=11;\n      }\n\n      else {\n        alt16=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt16=5;\n        }\n        break;\n      case '=':\n        {\n        alt16=18;\n        }\n        break;\n      default:\n        alt16=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA16_31 = input.LA(3);\n        if ( (LA16_31=='>') ) {\n          alt16=7;\n        }\n\n        else {\n          alt16=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt16=16;\n        }\n        break;\n      default:\n        alt16=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt16=8;\n      }\n      break;\n    case '!':\n      {\n      int LA16_8 = input.LA(2);\n      if ( (LA16_8=='=') ) {\n        alt16=19;\n      }\n\n      else {\n        alt16=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt16=12;\n      }\n      break;\n    case ',':\n      {\n      alt16=13;\n      }\n      break;\n    case '=':\n      {\n      alt16=14;\n      }\n      break;\n    case '?':\n      {\n      alt16=20;\n      }\n      break;\n    case '/':\n      {\n      alt16=21;\n      }\n      break;\n    case '.':\n      {\n      int LA16_14 = input.LA(2);\n      if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n        alt16=30;\n      }\n\n      else {\n        alt16=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt16=23;\n      }\n      break;\n    case '%':\n      {\n      alt16=24;\n      }\n      break;\n    case '*':\n      {\n      alt16=25;\n      }\n      break;\n    case ')':\n      {\n      alt16=26;\n      }\n      break;\n    case '-':\n      {\n      alt16=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt16=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt16=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt16=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt16=31;\n        }\n        break;\n      default:\n        alt16=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt16=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 16, 0, input);\n      throw nvae;\n    }\n    switch (alt16) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n        {\n        mID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d639dc27b5b3eae561ef321b06f3cad9280c529","date":1383945027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | ID | WS | DECIMAL | OCTAL | HEX )\n    int alt16=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt16=1;\n      }\n      break;\n    case '&':\n      {\n      int LA16_2 = input.LA(2);\n      if ( (LA16_2=='&') ) {\n        alt16=9;\n      }\n\n      else {\n        alt16=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt16=3;\n      }\n      break;\n    case '|':\n      {\n      int LA16_4 = input.LA(2);\n      if ( (LA16_4=='|') ) {\n        alt16=11;\n      }\n\n      else {\n        alt16=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt16=5;\n        }\n        break;\n      case '=':\n        {\n        alt16=18;\n        }\n        break;\n      default:\n        alt16=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA16_31 = input.LA(3);\n        if ( (LA16_31=='>') ) {\n          alt16=7;\n        }\n\n        else {\n          alt16=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt16=16;\n        }\n        break;\n      default:\n        alt16=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt16=8;\n      }\n      break;\n    case '!':\n      {\n      int LA16_8 = input.LA(2);\n      if ( (LA16_8=='=') ) {\n        alt16=19;\n      }\n\n      else {\n        alt16=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt16=12;\n      }\n      break;\n    case ',':\n      {\n      alt16=13;\n      }\n      break;\n    case '=':\n      {\n      alt16=14;\n      }\n      break;\n    case '?':\n      {\n      alt16=20;\n      }\n      break;\n    case '/':\n      {\n      alt16=21;\n      }\n      break;\n    case '.':\n      {\n      int LA16_14 = input.LA(2);\n      if ( ((LA16_14 >= '0' && LA16_14 <= '9')) ) {\n        alt16=30;\n      }\n\n      else {\n        alt16=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt16=23;\n      }\n      break;\n    case '%':\n      {\n      alt16=24;\n      }\n      break;\n    case '*':\n      {\n      alt16=25;\n      }\n      break;\n    case ')':\n      {\n      alt16=26;\n      }\n      break;\n    case '-':\n      {\n      alt16=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt16=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt16=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt16=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt16=31;\n        }\n        break;\n      default:\n        alt16=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt16=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 16, 0, input);\n      throw nvae;\n    }\n    switch (alt16) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: ID\n        {\n        mID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:301: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:304: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:312: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2284ec7b7c73174ca051dd51acdba799c2b5860c","date":1402649660,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case '$':\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case '$':\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | VARIABLE | WS | DECIMAL | OCTAL | HEX )\n    int alt24=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt24=1;\n      }\n      break;\n    case '&':\n      {\n      int LA24_2 = input.LA(2);\n      if ( (LA24_2=='&') ) {\n        alt24=9;\n      }\n\n      else {\n        alt24=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt24=3;\n      }\n      break;\n    case '|':\n      {\n      int LA24_4 = input.LA(2);\n      if ( (LA24_4=='|') ) {\n        alt24=11;\n      }\n\n      else {\n        alt24=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt24=5;\n        }\n        break;\n      case '=':\n        {\n        alt24=18;\n        }\n        break;\n      default:\n        alt24=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA24_31 = input.LA(3);\n        if ( (LA24_31=='>') ) {\n          alt24=7;\n        }\n\n        else {\n          alt24=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt24=16;\n        }\n        break;\n      default:\n        alt24=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt24=8;\n      }\n      break;\n    case '!':\n      {\n      int LA24_8 = input.LA(2);\n      if ( (LA24_8=='=') ) {\n        alt24=19;\n      }\n\n      else {\n        alt24=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt24=12;\n      }\n      break;\n    case ',':\n      {\n      alt24=13;\n      }\n      break;\n    case '=':\n      {\n      alt24=14;\n      }\n      break;\n    case '?':\n      {\n      alt24=20;\n      }\n      break;\n    case '/':\n      {\n      alt24=21;\n      }\n      break;\n    case '.':\n      {\n      int LA24_14 = input.LA(2);\n      if ( ((LA24_14 >= '0' && LA24_14 <= '9')) ) {\n        alt24=30;\n      }\n\n      else {\n        alt24=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt24=23;\n      }\n      break;\n    case '%':\n      {\n      alt24=24;\n      }\n      break;\n    case '*':\n      {\n      alt24=25;\n      }\n      break;\n    case ')':\n      {\n      alt24=26;\n      }\n      break;\n    case '-':\n      {\n      alt24=27;\n      }\n      break;\n    case '$':\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt24=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt24=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt24=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt24=31;\n        }\n        break;\n      default:\n        alt24=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt24=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 24, 0, input);\n      throw nvae;\n    }\n    switch (alt24) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: VARIABLE\n        {\n        mVARIABLE(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:307: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:310: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:324: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )\n    int alt17=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt17=1;\n      }\n      break;\n    case '&':\n      {\n      int LA17_2 = input.LA(2);\n      if ( (LA17_2=='&') ) {\n        alt17=9;\n      }\n\n      else {\n        alt17=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt17=3;\n      }\n      break;\n    case '|':\n      {\n      int LA17_4 = input.LA(2);\n      if ( (LA17_4=='|') ) {\n        alt17=11;\n      }\n\n      else {\n        alt17=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt17=5;\n        }\n        break;\n      case '=':\n        {\n        alt17=18;\n        }\n        break;\n      default:\n        alt17=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA17_31 = input.LA(3);\n        if ( (LA17_31=='>') ) {\n          alt17=7;\n        }\n\n        else {\n          alt17=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt17=16;\n        }\n        break;\n      default:\n        alt17=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt17=8;\n      }\n      break;\n    case '!':\n      {\n      int LA17_8 = input.LA(2);\n      if ( (LA17_8=='=') ) {\n        alt17=19;\n      }\n\n      else {\n        alt17=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt17=12;\n      }\n      break;\n    case ',':\n      {\n      alt17=13;\n      }\n      break;\n    case '=':\n      {\n      alt17=14;\n      }\n      break;\n    case '?':\n      {\n      alt17=20;\n      }\n      break;\n    case '/':\n      {\n      alt17=21;\n      }\n      break;\n    case '.':\n      {\n      int LA17_14 = input.LA(2);\n      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {\n        alt17=30;\n      }\n\n      else {\n        alt17=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt17=23;\n      }\n      break;\n    case '%':\n      {\n      alt17=24;\n      }\n      break;\n    case '*':\n      {\n      alt17=25;\n      }\n      break;\n    case ')':\n      {\n      alt17=26;\n      }\n      break;\n    case '-':\n      {\n      alt17=27;\n      }\n      break;\n    case '$':\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt17=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt17=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt17=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt17=31;\n        }\n        break;\n      default:\n        alt17=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt17=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 17, 0, input);\n      throw nvae;\n    }\n    switch (alt17) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID\n        {\n        mNAMESPACE_ID(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","bugFix":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer#mTokens().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void mTokens() throws RecognitionException {\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | VARIABLE | WS | DECIMAL | OCTAL | HEX )\n    int alt24=32;\n    switch ( input.LA(1) ) {\n    case '+':\n      {\n      alt24=1;\n      }\n      break;\n    case '&':\n      {\n      int LA24_2 = input.LA(2);\n      if ( (LA24_2=='&') ) {\n        alt24=9;\n      }\n\n      else {\n        alt24=2;\n      }\n\n      }\n      break;\n    case '~':\n      {\n      alt24=3;\n      }\n      break;\n    case '|':\n      {\n      int LA24_4 = input.LA(2);\n      if ( (LA24_4=='|') ) {\n        alt24=11;\n      }\n\n      else {\n        alt24=4;\n      }\n\n      }\n      break;\n    case '<':\n      {\n      switch ( input.LA(2) ) {\n      case '<':\n        {\n        alt24=5;\n        }\n        break;\n      case '=':\n        {\n        alt24=18;\n        }\n        break;\n      default:\n        alt24=17;\n      }\n      }\n      break;\n    case '>':\n      {\n      switch ( input.LA(2) ) {\n      case '>':\n        {\n        int LA24_31 = input.LA(3);\n        if ( (LA24_31=='>') ) {\n          alt24=7;\n        }\n\n        else {\n          alt24=6;\n        }\n\n        }\n        break;\n      case '=':\n        {\n        alt24=16;\n        }\n        break;\n      default:\n        alt24=15;\n      }\n      }\n      break;\n    case '^':\n      {\n      alt24=8;\n      }\n      break;\n    case '!':\n      {\n      int LA24_8 = input.LA(2);\n      if ( (LA24_8=='=') ) {\n        alt24=19;\n      }\n\n      else {\n        alt24=10;\n      }\n\n      }\n      break;\n    case ':':\n      {\n      alt24=12;\n      }\n      break;\n    case ',':\n      {\n      alt24=13;\n      }\n      break;\n    case '=':\n      {\n      alt24=14;\n      }\n      break;\n    case '?':\n      {\n      alt24=20;\n      }\n      break;\n    case '/':\n      {\n      alt24=21;\n      }\n      break;\n    case '.':\n      {\n      int LA24_14 = input.LA(2);\n      if ( ((LA24_14 >= '0' && LA24_14 <= '9')) ) {\n        alt24=30;\n      }\n\n      else {\n        alt24=22;\n      }\n\n      }\n      break;\n    case '(':\n      {\n      alt24=23;\n      }\n      break;\n    case '%':\n      {\n      alt24=24;\n      }\n      break;\n    case '*':\n      {\n      alt24=25;\n      }\n      break;\n    case ')':\n      {\n      alt24=26;\n      }\n      break;\n    case '-':\n      {\n      alt24=27;\n      }\n      break;\n    case '$':\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'H':\n    case 'I':\n    case 'J':\n    case 'K':\n    case 'L':\n    case 'M':\n    case 'N':\n    case 'O':\n    case 'P':\n    case 'Q':\n    case 'R':\n    case 'S':\n    case 'T':\n    case 'U':\n    case 'V':\n    case 'W':\n    case 'X':\n    case 'Y':\n    case 'Z':\n    case '_':\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n    case 'g':\n    case 'h':\n    case 'i':\n    case 'j':\n    case 'k':\n    case 'l':\n    case 'm':\n    case 'n':\n    case 'o':\n    case 'p':\n    case 'q':\n    case 'r':\n    case 's':\n    case 't':\n    case 'u':\n    case 'v':\n    case 'w':\n    case 'x':\n    case 'y':\n    case 'z':\n      {\n      alt24=28;\n      }\n      break;\n    case '\\t':\n    case '\\n':\n    case '\\r':\n    case ' ':\n      {\n      alt24=29;\n      }\n      break;\n    case '0':\n      {\n      switch ( input.LA(2) ) {\n      case 'X':\n      case 'x':\n        {\n        alt24=32;\n        }\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n        {\n        alt24=31;\n        }\n        break;\n      default:\n        alt24=30;\n      }\n      }\n      break;\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      {\n      alt24=30;\n      }\n      break;\n    default:\n      NoViableAltException nvae =\n        new NoViableAltException(\"\", 24, 0, input);\n      throw nvae;\n    }\n    switch (alt24) {\n      case 1 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD\n        {\n        mAT_ADD(); \n\n        }\n        break;\n      case 2 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND\n        {\n        mAT_BIT_AND(); \n\n        }\n        break;\n      case 3 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT\n        {\n        mAT_BIT_NOT(); \n\n        }\n        break;\n      case 4 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR\n        {\n        mAT_BIT_OR(); \n\n        }\n        break;\n      case 5 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL\n        {\n        mAT_BIT_SHL(); \n\n        }\n        break;\n      case 6 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR\n        {\n        mAT_BIT_SHR(); \n\n        }\n        break;\n      case 7 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU\n        {\n        mAT_BIT_SHU(); \n\n        }\n        break;\n      case 8 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR\n        {\n        mAT_BIT_XOR(); \n\n        }\n        break;\n      case 9 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND\n        {\n        mAT_BOOL_AND(); \n\n        }\n        break;\n      case 10 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT\n        {\n        mAT_BOOL_NOT(); \n\n        }\n        break;\n      case 11 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR\n        {\n        mAT_BOOL_OR(); \n\n        }\n        break;\n      case 12 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON\n        {\n        mAT_COLON(); \n\n        }\n        break;\n      case 13 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA\n        {\n        mAT_COMMA(); \n\n        }\n        break;\n      case 14 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ\n        {\n        mAT_COMP_EQ(); \n\n        }\n        break;\n      case 15 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT\n        {\n        mAT_COMP_GT(); \n\n        }\n        break;\n      case 16 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE\n        {\n        mAT_COMP_GTE(); \n\n        }\n        break;\n      case 17 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT\n        {\n        mAT_COMP_LT(); \n\n        }\n        break;\n      case 18 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE\n        {\n        mAT_COMP_LTE(); \n\n        }\n        break;\n      case 19 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ\n        {\n        mAT_COMP_NEQ(); \n\n        }\n        break;\n      case 20 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE\n        {\n        mAT_COND_QUE(); \n\n        }\n        break;\n      case 21 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE\n        {\n        mAT_DIVIDE(); \n\n        }\n        break;\n      case 22 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT\n        {\n        mAT_DOT(); \n\n        }\n        break;\n      case 23 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN\n        {\n        mAT_LPAREN(); \n\n        }\n        break;\n      case 24 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO\n        {\n        mAT_MODULO(); \n\n        }\n        break;\n      case 25 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY\n        {\n        mAT_MULTIPLY(); \n\n        }\n        break;\n      case 26 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN\n        {\n        mAT_RPAREN(); \n\n        }\n        break;\n      case 27 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT\n        {\n        mAT_SUBTRACT(); \n\n        }\n        break;\n      case 28 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: VARIABLE\n        {\n        mVARIABLE(); \n\n        }\n        break;\n      case 29 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:307: WS\n        {\n        mWS(); \n\n        }\n        break;\n      case 30 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:310: DECIMAL\n        {\n        mDECIMAL(); \n\n        }\n        break;\n      case 31 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:318: OCTAL\n        {\n        mOCTAL(); \n\n        }\n        break;\n      case 32 :\n        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:324: HEX\n        {\n        mHEX(); \n\n        }\n        break;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["2284ec7b7c73174ca051dd51acdba799c2b5860c"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8d639dc27b5b3eae561ef321b06f3cad9280c529","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"8d639dc27b5b3eae561ef321b06f3cad9280c529":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","2284ec7b7c73174ca051dd51acdba799c2b5860c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"2284ec7b7c73174ca051dd51acdba799c2b5860c":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["8d639dc27b5b3eae561ef321b06f3cad9280c529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}