{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random, 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    try {\n      runMultiSorts(searcher, false);\n    } finally {\n      exec.shutdown();\n      exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    try {\n      runMultiSorts(searcher, false);\n    } finally {\n      exec.shutdown();\n      exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    runMultiSorts(searcher, false);\n    exec.shutdown();\n    exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7fc5a2665a7fa1b9450097ae658193a11ee4d02c","17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":null,"sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    try {\n      runMultiSorts(searcher, false);\n    } finally {\n      exec.shutdown();\n      exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testParallelMultiSort().mjava","sourceNew":null,"sourceOld":"  // test a variety of sorts using a parallel multisearcher\n  public void testParallelMultiSort() throws Exception {\n    ExecutorService exec = Executors.newFixedThreadPool(_TestUtil.nextInt(random(), 2, 8), new NamedThreadFactory(\"testParallelMultiSort\"));\n    IndexSearcher searcher = new IndexSearcher(\n                                  new MultiReader(searchX.getIndexReader(),\n                                                  searchY.getIndexReader()), exec);\n    try {\n      runMultiSorts(searcher, false);\n    } finally {\n      exec.shutdown();\n      exec.awaitTermination(1000, TimeUnit.MILLISECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1c8719b2c0b382be11f5b193b6fc14bc310e906b","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","5f183729ece15402db94402d482f29ebac4f7f54"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5f183729ece15402db94402d482f29ebac4f7f54","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","95303ff3749680c743b9425f9cf99e6e4065e8a8","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}