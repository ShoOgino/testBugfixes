{"path":"solr/core/src/test/org/apache/solr/search/TestFiltering#testHossssSanity().mjava","commits":[{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testHossssSanity().mjava","pathOld":"/dev/null","sourceNew":"  public void testHossssSanity() throws Exception {\n    \n    SolrParams match_0 \n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=1 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=0 u=1}\\\"\");\n    \n    SolrParams match_1\n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\");\n    \n    final int numDocs = 10;\n\n    for (int i = 0; i < numDocs; i++) {\n      String val = Integer.toString(i);\n      assertU(adoc(\"id\",val,f,val));\n    }\n    assertU(commit());\n\n    // sanity check\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==\" + numDocs);\n\n    // 1 then 0\n    assertJQ(req(match_1), \"/response/numFound==1\");\n    assertJQ(req(match_0), \"/response/numFound==0\");\n\n    // clear caches\n    assertU(commit());\n\n    // 0 then 1\n    assertJQ(req(match_0), \"/response/numFound==0\");\n    assertJQ(req(match_1), \"/response/numFound==1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25d94871c534622325285ac40e746c3e28ea4c0a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d94871c534622325285ac40e746c3e28ea4c0a","date":1389330550,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testHossssSanity().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFiltering#testHossssSanity().mjava","sourceNew":"  public void testHossssSanity() throws Exception {\n    clearIndex();\n\n    SolrParams match_0 \n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=1 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=0 u=1}\\\"\");\n    \n    SolrParams match_1\n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\");\n    \n    final int numDocs = 10;\n\n    for (int i = 0; i < numDocs; i++) {\n      String val = Integer.toString(i);\n      assertU(adoc(\"id\",val,f,val));\n    }\n    assertU(commit());\n\n    // sanity check\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==\" + numDocs);\n\n    // 1 then 0\n    assertJQ(req(match_1), \"/response/numFound==1\");\n    assertJQ(req(match_0), \"/response/numFound==0\");\n\n    // clear caches\n    assertU(commit());\n\n    // 0 then 1\n    assertJQ(req(match_0), \"/response/numFound==0\");\n    assertJQ(req(match_1), \"/response/numFound==1\");\n  }\n\n","sourceOld":"  public void testHossssSanity() throws Exception {\n    \n    SolrParams match_0 \n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=1 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=0 u=1}\\\"\");\n    \n    SolrParams match_1\n      = params(\"q\",  \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"{!frange v=val_i l=0 u=1}\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\",\n               \"fq\", \"-_query_:\\\"{!frange v=val_i l=1 u=1}\\\"\");\n    \n    final int numDocs = 10;\n\n    for (int i = 0; i < numDocs; i++) {\n      String val = Integer.toString(i);\n      assertU(adoc(\"id\",val,f,val));\n    }\n    assertU(commit());\n\n    // sanity check\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==\" + numDocs);\n\n    // 1 then 0\n    assertJQ(req(match_1), \"/response/numFound==1\");\n    assertJQ(req(match_0), \"/response/numFound==0\");\n\n    // clear caches\n    assertU(commit());\n\n    // 0 then 1\n    assertJQ(req(match_0), \"/response/numFound==0\");\n    assertJQ(req(match_1), \"/response/numFound==1\");\n  }\n\n","bugFix":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25d94871c534622325285ac40e746c3e28ea4c0a":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25d94871c534622325285ac40e746c3e28ea4c0a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"25d94871c534622325285ac40e746c3e28ea4c0a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["25d94871c534622325285ac40e746c3e28ea4c0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}