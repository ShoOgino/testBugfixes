{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPrecision().mjava","commits":[{"id":"93f1e2e97b1cdca850c22c24102ab066aa1cdede","date":1509557735,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPrecision().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrecision() throws Exception {\n    String cexpr = \"let(echo=true, a=precision(array(1.44445, 1, 2.00006), 4), b=precision(1.44445, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Number> nums = (List<Number>)tuples.get(0).get(\"a\");\n    assertTrue(nums.size() == 3);\n    assertEquals(nums.get(0).doubleValue(), 1.4445, 0.0);\n    assertEquals(nums.get(1).doubleValue(), 1, 0.0);\n    assertEquals(nums.get(2).doubleValue(), 2.0001, 0.0);\n\n    double num = tuples.get(0).getDouble(\"b\");\n    assertEquals(num, 1.4445, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecision().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPrecision().mjava","sourceNew":"  @Test\n  public void testPrecision() throws Exception {\n    String cexpr = \"let(echo=true, a=precision(array(1.44445, 1, 2.00006), 4), b=precision(1.44445, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Number> nums = (List<Number>)tuples.get(0).get(\"a\");\n    assertTrue(nums.size() == 3);\n    assertEquals(nums.get(0).doubleValue(), 1.4445, 0.0);\n    assertEquals(nums.get(1).doubleValue(), 1, 0.0);\n    assertEquals(nums.get(2).doubleValue(), 2.0001, 0.0);\n\n    double num = tuples.get(0).getDouble(\"b\");\n    assertEquals(num, 1.4445, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecision() throws Exception {\n    String cexpr = \"let(echo=true, a=precision(array(1.44445, 1, 2.00006), 4), b=precision(1.44445, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<Number> nums = (List<Number>)tuples.get(0).get(\"a\");\n    assertTrue(nums.size() == 3);\n    assertEquals(nums.get(0).doubleValue(), 1.4445, 0.0);\n    assertEquals(nums.get(1).doubleValue(), 1, 0.0);\n    assertEquals(nums.get(2).doubleValue(), 2.0001, 0.0);\n\n    double num = tuples.get(0).getDouble(\"b\");\n    assertEquals(num, 1.4445, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93f1e2e97b1cdca850c22c24102ab066aa1cdede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["93f1e2e97b1cdca850c22c24102ab066aa1cdede"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93f1e2e97b1cdca850c22c24102ab066aa1cdede"],"93f1e2e97b1cdca850c22c24102ab066aa1cdede":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}