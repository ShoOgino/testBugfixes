{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(IndexSearcher,Query).mjava","commits":[{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(IndexSearcher,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(Object,Query).mjava","sourceNew":"  private float query(IndexSearcher searcher, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    try {\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private float query(Object index, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    Searcher searcher = null;\n    try {\n      if (index instanceof Directory)\n        searcher = new IndexSearcher((Directory)index, true);\n      else \n        searcher = ((MemoryIndex) index).createSearcher();\n\n      final float[] scores = new float[1]; // inits to 0.0f (no match)\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    } finally {\n      try {\n        if (searcher != null) searcher.close();\n      } catch (IOException e) { // should never happen (RAMDirectory)\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(IndexSearcher,Query).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#query(IndexSearcher,Query).mjava","sourceNew":"  private float query(IndexSearcher searcher, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    try {\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private float query(IndexSearcher searcher, Query query) {\n//    System.out.println(\"MB=\" + (getMemorySize(index) / (1024.0f * 1024.0f)));\n    try {\n      searcher.search(query, new Collector() {\n        private Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          scores[0] = scorer.score();\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase) { }\n      });\n      float score = scores[0];\n//      Hits hits = searcher.search(query);\n//      float score = hits.length() > 0 ? hits.score(0) : 0.0f;\n      return score;\n    } catch (IOException e) { // should never happen (RAMDirectory)\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}