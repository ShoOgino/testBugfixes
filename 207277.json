{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#addSidePath(Automaton.Builder,int,int,char[],List[Integer]).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#addSidePath(Automaton.Builder,int,int,char[],List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Just creates a side path from startState to endState with the provided tokens. */\n  private static void addSidePath(Automaton.Builder a, int startState, int endState, char[] tokens, List<Integer> flatStates) {\n    int lastState = startState;\n    for(int i=0;i<tokens.length;i++) {\n      int nextState;\n      if (i == tokens.length-1) {\n        nextState = endState;\n      } else if (flatStates == null || i >= flatStates.size()) {\n        nextState = a.createState();\n        if (flatStates != null) {\n          assert i == flatStates.size();\n          flatStates.add(nextState);\n        }\n      } else {\n        nextState = flatStates.get(i);\n      }\n      a.addTransition(lastState, nextState, tokens[i]);\n\n      lastState = nextState;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#addSidePath(Automaton.Builder,int,int,char[],List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Just creates a side path from startState to endState with the provided tokens. */\n  private static void addSidePath(Automaton.Builder a, int startState, int endState, char[] tokens, List<Integer> flatStates) {\n    int lastState = startState;\n    for(int i=0;i<tokens.length;i++) {\n      int nextState;\n      if (i == tokens.length-1) {\n        nextState = endState;\n      } else if (flatStates == null || i >= flatStates.size()) {\n        nextState = a.createState();\n        if (flatStates != null) {\n          assert i == flatStates.size();\n          flatStates.add(nextState);\n        }\n      } else {\n        nextState = flatStates.get(i);\n      }\n      a.addTransition(lastState, nextState, tokens[i]);\n\n      lastState = nextState;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}