{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#end(int,int,UTF8Sequence,int,boolean).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#end(int,int,UTF8Sequence,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8Light#end(int,int,UTF8Sequence,int,boolean).mjava","sourceNew":"  private void end(int start, int end, UTF8Sequence endUTF8, int upto, boolean doAll) {\n    if (upto == endUTF8.len-1) {\n      // Done recursing\n      //start.addTransition(new Transition(endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto), end));   // type=end\n      utf8.addTransition(start, end, endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto));\n    } else {\n      final int startCode;\n      if (endUTF8.numBits(upto) == 5) {\n        // special case -- avoid created unused edges (endUTF8\n        // doesn't accept certain byte sequences) -- there\n        // are other cases we could optimize too:\n        startCode = 194;\n      } else {\n        startCode = endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]);\n      }\n      if (doAll && endUTF8.byteAt(upto) != startCode) {\n        all(start, end, startCode, endUTF8.byteAt(upto)-1, endUTF8.len-upto-1);\n      }\n      int n = utf8.createState();\n      //start.addTransition(new Transition(endUTF8.byteAt(upto), n));  // type=end\n      utf8.addTransition(start, n, endUTF8.byteAt(upto));\n      end(n, end, endUTF8, 1+upto, true);\n    }\n  }\n\n","sourceOld":"  private void end(int start, int end, UTF8Sequence endUTF8, int upto, boolean doAll) {\n    if (upto == endUTF8.len-1) {\n      // Done recursing\n      //start.addTransition(new Transition(endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto), end));   // type=end\n      utf8.addTransition(start, end, endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto));\n    } else {\n      final int startCode;\n      if (endUTF8.numBits(upto) == 5) {\n        // special case -- avoid created unused edges (endUTF8\n        // doesn't accept certain byte sequences) -- there\n        // are other cases we could optimize too:\n        startCode = 194;\n      } else {\n        startCode = endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]);\n      }\n      if (doAll && endUTF8.byteAt(upto) != startCode) {\n        all(start, end, startCode, endUTF8.byteAt(upto)-1, endUTF8.len-upto-1);\n      }\n      int n = utf8.createState();\n      //start.addTransition(new Transition(endUTF8.byteAt(upto), n));  // type=end\n      utf8.addTransition(start, n, endUTF8.byteAt(upto));\n      end(n, end, endUTF8, 1+upto, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/UTF32ToUTF8#end(int,int,UTF8Sequence,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void end(int start, int end, UTF8Sequence endUTF8, int upto, boolean doAll) {\n    if (upto == endUTF8.len-1) {\n      // Done recursing\n      //start.addTransition(new Transition(endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto), end));   // type=end\n      utf8.addTransition(start, end, endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]), endUTF8.byteAt(upto));\n    } else {\n      final int startCode;\n      if (endUTF8.numBits(upto) == 5) {\n        // special case -- avoid created unused edges (endUTF8\n        // doesn't accept certain byte sequences) -- there\n        // are other cases we could optimize too:\n        startCode = 194;\n      } else {\n        startCode = endUTF8.byteAt(upto) & (~MASKS[endUTF8.numBits(upto)-1]);\n      }\n      if (doAll && endUTF8.byteAt(upto) != startCode) {\n        all(start, end, startCode, endUTF8.byteAt(upto)-1, endUTF8.len-upto-1);\n      }\n      int n = utf8.createState();\n      //start.addTransition(new Transition(endUTF8.byteAt(upto), n));  // type=end\n      utf8.addTransition(start, n, endUTF8.byteAt(upto));\n      end(n, end, endUTF8, 1+upto, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}