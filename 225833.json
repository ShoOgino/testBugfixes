{"path":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","commits":[{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","pathOld":"/dev/null","sourceNew":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6713d909dc80e8c53878ff98bb5376dc1af95956","date":1373964521,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","sourceNew":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      ++sequenceNum;\n      return true;\n    }\n\n","sourceOld":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","pathOld":"/dev/null","sourceNew":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      ++sequenceNum;\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21fd82f9528d0f0c70205bd925dd0b0dce14fdab","date":1376071243,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","sourceNew":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      if ((token & (1 << 7)) == 0) {\n        final int cleanLength = readCleanLength(in, token);\n        wordNum += cleanLength;\n      } else {\n        allOnesLength = readCleanLength(in, token);\n      }\n      dirtyLength = readDirtyLength(in, token);\n      assert in.length() - in.getPosition() >= dirtyLength : in.getPosition() + \" \" + in.length() + \" \" + dirtyLength;\n      ++sequenceNum;\n      return true;\n    }\n\n","sourceOld":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      ++sequenceNum;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","sourceNew":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      if ((token & (1 << 7)) == 0) {\n        final int cleanLength = readCleanLength(in, token);\n        wordNum += cleanLength;\n      } else {\n        allOnesLength = readCleanLength(in, token);\n      }\n      dirtyLength = readDirtyLength(in, token);\n      assert in.length() - in.getPosition() >= dirtyLength : in.getPosition() + \" \" + in.length() + \" \" + dirtyLength;\n      ++sequenceNum;\n      return true;\n    }\n\n","sourceOld":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      final int cleanLength = (in.getPosition() == 1 ? 0 : 2) + readLength(in, token >>> 4);\n      wordNum += cleanLength;\n      dirtyLength = 1 + readLength(in, token & 0x0F);\n      ++sequenceNum;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","sourceNew":null,"sourceOld":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      if ((token & (1 << 7)) == 0) {\n        final int cleanLength = readCleanLength(in, token);\n        wordNum += cleanLength;\n      } else {\n        allOnesLength = readCleanLength(in, token);\n      }\n      dirtyLength = readDirtyLength(in, token);\n      assert in.length() - in.getPosition() >= dirtyLength : in.getPosition() + \" \" + in.length() + \" \" + dirtyLength;\n      ++sequenceNum;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#readSequence().mjava","sourceNew":null,"sourceOld":"    boolean readSequence() {\n      if (in.eof()) {\n        wordNum = Integer.MAX_VALUE;\n        return false;\n      }\n      final int token = in.readByte() & 0xFF;\n      if ((token & (1 << 7)) == 0) {\n        final int cleanLength = readCleanLength(in, token);\n        wordNum += cleanLength;\n      } else {\n        allOnesLength = readCleanLength(in, token);\n      }\n      dirtyLength = readDirtyLength(in, token);\n      assert in.length() - in.getPosition() >= dirtyLength : in.getPosition() + \" \" + in.length() + \" \" + dirtyLength;\n      ++sequenceNum;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6713d909dc80e8c53878ff98bb5376dc1af95956"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["6713d909dc80e8c53878ff98bb5376dc1af95956"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6713d909dc80e8c53878ff98bb5376dc1af95956":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["6713d909dc80e8c53878ff98bb5376dc1af95956"],"55980207f1977bd1463465de1659b821347e2fa8":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6713d909dc80e8c53878ff98bb5376dc1af95956":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21fd82f9528d0f0c70205bd925dd0b0dce14fdab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}