{"path":"backwards/src/java/org/apache/lucene/queryParser/CharStream#GetSuffix(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/CharStream#GetSuffix(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an array of characters that make up the suffix of length 'len' for\n   * the currently matched token. This is used to build up the matched string\n   * for use in actions in the case of MORE. A simple and inefficient\n   * implementation of this is as follows :\n   *\n   *   {\n   *      String t = GetImage();\n   *      return t.substring(t.length() - len, t.length()).toCharArray();\n   *   }\n   */\n  char[] GetSuffix(int len);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/CharStream#GetSuffix(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/CharStream#GetSuffix(int).mjava","sourceNew":"  /**\n   * Returns an array of characters that make up the suffix of length 'len' for\n   * the currently matched token. This is used to build up the matched string\n   * for use in actions in the case of MORE. A simple and inefficient\n   * implementation of this is as follows :\n   *\n   *   {\n   *      String t = GetImage();\n   *      return t.substring(t.length() - len, t.length()).toCharArray();\n   *   }\n   */\n  char[] GetSuffix(int len);\n\n","sourceOld":"  /**\n   * Returns an array of characters that make up the suffix of length 'len' for\n   * the currently matched token. This is used to build up the matched string\n   * for use in actions in the case of MORE. A simple and inefficient\n   * implementation of this is as follows :\n   *\n   *   {\n   *      String t = GetImage();\n   *      return t.substring(t.length() - len, t.length()).toCharArray();\n   *   }\n   */\n  char[] GetSuffix(int len);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}