{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","commits":[{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(String...).mjava","sourceNew":"  private void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":"  private void checkNotInCores(String... nameCheck) {\n    Collection<String> names = cores.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":"  private void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,List[String],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkNotInCores(CoreContainer cc, List<String> nameCheck, List<String> namesBad) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core that has not failed to load should be in coreDescriptors.\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // failed cores should have had their descriptors removed.\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    // Failed cores should not be in coreDescriptors.\n    for (String name : namesBad) {\n      assertFalse(\"Failed core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n  }\n\n","sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":null,"sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkNotInCores(CoreContainer,String...).mjava","sourceNew":null,"sourceOld":"  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    for (String name : nameCheck) {\n      assertFalse(\"core \" + name + \" was found in the list of cores\", loadedNames.contains(name));\n    }\n    \n    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there\n    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_\n    //\n    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of \n    // the names in nameCheck should be loaded and thus should not be in names.\n    \n    Collection<String> allNames = cc.getAllCoreNames();\n    // Every core, loaded or not should be in the accumulated coredescriptors:\n    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();\n\n    assertEquals(\"There should be as many coreDescriptors as coreNames\", allNames.size(), descriptors.size());\n    for (CoreDescriptor desc : descriptors) {\n      assertTrue(\"Name should have a corresponding descriptor\", allNames.contains(desc.getName()));\n    }\n    \n    // First check that all loaded cores are in allNames.\n    for (String name : loadedNames) {                                                                                        \n      assertTrue(\"Loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n\n    for (String name : nameCheck) {\n      assertTrue(\"Not-currently-loaded core \" + name + \" should have been found in the list of all possible core names\",\n          allNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a837c064b67fa63a9394136e31218b908cdcf783":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","a837c064b67fa63a9394136e31218b908cdcf783"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}