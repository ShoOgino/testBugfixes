{"path":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: {}, password: {}\", username, password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: \"+username+\", password: \"+password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework.MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","sourceNew":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: {}, password: {}\", username, password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        response.sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws Exception {\n      if (expectedUsername == null) {\n        filterChain.doFilter(request, response);\n        return true;\n      }\n      HttpServletRequest httpRequest = (HttpServletRequest)request;\n      String username = httpRequest.getHeader(\"username\");\n      String password = httpRequest.getHeader(\"password\");\n      \n      log.info(\"Username: {}, password: {}\", username, password);\n      if(MockAuthenticationPlugin.expectedUsername.equals(username) && MockAuthenticationPlugin.expectedPassword.equals(password)) {\n        filterChain.doFilter(request, response);\n        return true;\n      } else {\n        ((HttpServletResponse)response).sendError(401, \"Unauthorized request\");\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}