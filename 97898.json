{"path":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#simpleTokenLexer(Token,int).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#simpleTokenLexer(Token,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A simple token lexer\n   * \n   * Simple token are tokens which are not surrounded by encapsulators.\n   * A simple token might contain escaped delimiters (as \\, or \\;). The\n   * token is finished when one of the following conditions become true:\n   * <ul>\n   *   <li>end of line has been reached (TT_EORECORD)</li>\n   *   <li>end of stream has been reached (TT_EOF)</li>\n   *   <li>an unescaped delimiter has been reached (TT_TOKEN)</li>\n   * </ul>\n   *  \n   * @param tkn  the current token\n   * @param c    the current character\n   * @return the filled token\n   * \n   * @throws IOException on stream access error\n   */\n  private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (;;) {\n      if (isEndOfLine(c)) {\n        // end of record\n        tkn.type = TT_EORECORD;\n        tkn.isReady = true;\n        break;\n      } else if (isEndOfFile(c)) {\n        // end of file\n        tkn.type = TT_EOF;\n        tkn.isReady = true;\n        break;\n      } else if (c == strategy.getDelimiter()) {\n        // end of token\n        tkn.type = TT_TOKEN;\n        tkn.isReady = true;\n        break;\n      } else if (c == '\\\\' && strategy.getUnicodeEscapeInterpretation() && in.lookAhead() == 'u') {\n        // interpret unicode escaped chars (like \\u0070 -> p)\n        tkn.content.append((char) unicodeEscapeLexer(c));\n      } else if (c == strategy.getEscape()) {\n        tkn.content.append((char)readEscape(c));\n      } else {\n        tkn.content.append((char) c);\n      }\n      \n      c = in.read();\n    }\n\n    if (strategy.getIgnoreTrailingWhitespaces()) {\n      tkn.content.trimTrailingWhitespace();\n    }\n\n    return tkn;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80931fa1f3b04650bde7b20e61b02063a7093ced"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}