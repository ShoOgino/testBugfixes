{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeHeader(int,int,int[]).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeHeader(int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeHeader(int docBase, int numBufferedDocs, int[] lengths) throws IOException {\n    // save docBase and numBufferedDocs\n    fieldsStream.writeVInt(docBase);\n    fieldsStream.writeVInt(numBufferedDocs);\n\n    // save lengths\n    final int bitsRequired = bitsRequired(lengths, numBufferedDocs);\n    assert bitsRequired <= 31;\n    fieldsStream.writeVInt(bitsRequired);\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(fieldsStream, PackedInts.Format.PACKED, numBufferedDocs, bitsRequired, 1);\n    for (int i = 0; i < numBufferedDocs; ++i) {\n      assert lengths[i] > 0;\n      writer.add(lengths[i]);\n    }\n    assert writer.ord() + 1 == numBufferedDocs;\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c","date":1352305464,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeHeader(int,int,int[],int[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#writeHeader(int,int,int[]).mjava","sourceNew":"  private void writeHeader(int docBase, int numBufferedDocs, int[] numStoredFields, int[] lengths) throws IOException {\n    // save docBase and numBufferedDocs\n    fieldsStream.writeVInt(docBase);\n    fieldsStream.writeVInt(numBufferedDocs);\n\n    // save numStoredFields\n    saveInts(numStoredFields, numBufferedDocs, fieldsStream);\n\n    // save lengths\n    saveInts(lengths, numBufferedDocs, fieldsStream);\n  }\n\n","sourceOld":"  private void writeHeader(int docBase, int numBufferedDocs, int[] lengths) throws IOException {\n    // save docBase and numBufferedDocs\n    fieldsStream.writeVInt(docBase);\n    fieldsStream.writeVInt(numBufferedDocs);\n\n    // save lengths\n    final int bitsRequired = bitsRequired(lengths, numBufferedDocs);\n    assert bitsRequired <= 31;\n    fieldsStream.writeVInt(bitsRequired);\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(fieldsStream, PackedInts.Format.PACKED, numBufferedDocs, bitsRequired, 1);\n    for (int i = 0; i < numBufferedDocs; ++i) {\n      assert lengths[i] > 0;\n      writer.add(lengths[i]);\n    }\n    assert writer.ord() + 1 == numBufferedDocs;\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eba3cb2a268b9fb6f5be011fbaaf698699dcf24c"],"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"]},"commit2Childs":{"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["eba3cb2a268b9fb6f5be011fbaaf698699dcf24c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}