{"path":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","commits":[{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"/dev/null","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(\"partialResults\")));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(\"partialResults\") == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(\"partialResults\")));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(\"partialResults\") == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptiions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\");\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\");\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    SolrInfoMBean filterCacheStats = core.getInfoRegistry().get(\"filterCache\");\n    long fqInserts = (long) filterCacheStats.getStatistics().get(\"inserts\");\n\n    SolrInfoMBean queryCacheStats = core.getInfoRegistry().get(\"queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getStatistics().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getStatistics().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getStatistics().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getStatistics().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getStatistics().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\");\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\");\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\");\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) fromJSONString(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) ObjectBuilder.fromJSON(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) ObjectBuilder.fromJSON(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testCacheAssumptions().mjava","sourceNew":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    @SuppressWarnings({\"rawtypes\"})\n    Map res = (Map) fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","sourceOld":"  // There are lots of assumptions about how/when cache entries should be changed in this method. The\n  // simple case above shows the root problem without the confusion. testFilterSimpleCase should be\n  // removed once it is running and this test should be un-ignored and the assumptions verified.\n  // With all the weirdness, I'm not going to vouch for this test. Feel free to change it.\n  @Test\n  public void testCacheAssumptions() throws Exception {\n    String fq= \"name:d*\";\n    SolrCore core = h.getCore();\n    MetricsMap filterCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.filterCache\")).getGauge();\n    long fqInserts = (long) filterCacheStats.getValue().get(\"inserts\");\n\n    MetricsMap queryCacheStats = (MetricsMap)((SolrMetricManager.GaugeWrapper)core.getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.queryResultCache\")).getGauge();\n    long qrInserts = (long) queryCacheStats.getValue().get(\"inserts\");\n\n    // This gets 0 docs back. Use 10000 instead of 1 for timeAllowed and it gets 100 back and the for loop below\n    // succeeds.\n    String response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n    Map res = (Map) fromJSONString(response);\n    Map body = (Map) (res.get(\"response\"));\n    assertTrue(\"Should have fewer docs than \" + NUM_DOCS, (long) (body.get(\"numFound\")) < NUM_DOCS);\n\n    Map header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should have partial results\", (Boolean) (header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)));\n\n    assertEquals(\"Should NOT have inserted partial results in the cache!\",\n        (long) queryCacheStats.getValue().get(\"inserts\"), qrInserts);\n\n    assertEquals(\"Should NOT have another insert\", fqInserts, (long) filterCacheStats.getValue().get(\"inserts\"));\n\n    // At the end of all this, we should have no hits in the queryResultCache.\n    response = JQ(req(\"q\", \"*:*\", \"fq\", fq, \"indent\", \"true\", \"timeAllowed\", longTimeout));\n\n    // Check that we did insert this one.\n    assertEquals(\"Hits should still be 0\", (long) filterCacheStats.getValue().get(\"hits\"), 0L);\n    assertEquals(\"Inserts should be bumped\", (long) filterCacheStats.getValue().get(\"inserts\"), fqInserts + 1);\n\n    res = (Map) fromJSONString(response);\n    body = (Map) (res.get(\"response\"));\n\n    assertEquals(\"Should have exactly \" + NUM_DOCS, (long) (body.get(\"numFound\")), NUM_DOCS);\n    header = (Map) (res.get(\"responseHeader\"));\n    assertTrue(\"Should NOT have partial results\", header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY) == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["83b038ad0480d5e81e058bf9fafb2dd85399985d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["83b038ad0480d5e81e058bf9fafb2dd85399985d","0158ced21948b6626f733c1c42c1e18d94449789"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"0158ced21948b6626f733c1c42c1e18d94449789":["83b038ad0480d5e81e058bf9fafb2dd85399985d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"43564cbb30b064675027cfb569564e8531096e97":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"816521ebaad5add9cb96bb88c577394e2938c40b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}