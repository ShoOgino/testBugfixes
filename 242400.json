{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":null,"sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}