{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","commits":[{"id":"b2c05e4efde014c90e420f5f7c2966499682635c","date":1419397169,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter as Bits/acceptDocs\n      FixedBitSet acceptDocs = null;//the answer\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) {\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        acceptDocs = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n        //query for their Lucene docIds to put into acceptDocs\n        if (!acceptFieldIds.isEmpty()) {\n          BooleanQuery acceptQuery = new BooleanQuery();\n          for (Integer acceptDocId : acceptFieldIds) {\n            acceptQuery.add(new TermQuery(new Term(\"id\", acceptDocId.toString())), BooleanClause.Occur.SHOULD);\n          }\n          final TopDocs topDocs = indexSearcher.search(acceptQuery, numIndexedShapes);\n\n          for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n            acceptDocs.set(scoreDoc.doc);\n          }\n\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), acceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (acceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"478e85d406c2ea05f4e5028248b9a8e43f300885","date":1421346780,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 10000)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new TermsFilter(terms);\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter as Bits/acceptDocs\n      FixedBitSet acceptDocs = null;//the answer\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) {\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        acceptDocs = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n        //query for their Lucene docIds to put into acceptDocs\n        if (!acceptFieldIds.isEmpty()) {\n          BooleanQuery acceptQuery = new BooleanQuery();\n          for (Integer acceptDocId : acceptFieldIds) {\n            acceptQuery.add(new TermQuery(new Term(\"id\", acceptDocId.toString())), BooleanClause.Occur.SHOULD);\n          }\n          final TopDocs topDocs = indexSearcher.search(acceptQuery, numIndexedShapes);\n\n          for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n            acceptDocs.set(scoreDoc.doc);\n          }\n\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), acceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (acceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"391adf3855f63fe1cc84dd333e44fcd31f43cb02","date":1421356260,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new TermsFilter(terms);\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 10000)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new TermsFilter(terms);\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new QueryWrapperFilter(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new TermsFilter(terms);\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ebe5dbc7d8190347f5bc5e6ddc32a664366d27c","date":1428348376,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new QueryWrapperFilter(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 100)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new QueryWrapperFilter(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter\n      Filter filter = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n          filter = new QueryWrapperFilter(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), filter, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (filter != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/NumberRangeFacetsTest#test().mjava","sourceNew":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @Repeat(iterations = 20)\n  @Test\n  public void test() throws IOException {\n    //generate test data\n    List<Shape> indexedShapes = new ArrayList<>();\n    final int numIndexedShapes = random().nextInt(15);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\"+id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < 10; queryIdx++) {\n      preQueryHavoc();\n\n      // We need to have a facet range window to do the facets between (a start time & end time). We randomly\n      // pick a date, decide the level we want to facet on, and then pick a right end time that is up to 2 thousand\n      // values later.\n      int calFieldFacet = randomCalWindowField - 1;\n      if (calFieldFacet > 1 && rarely()) {\n        calFieldFacet--;\n      }\n      final Calendar leftCal = randomCalendar();\n      leftCal.add(calFieldFacet, -1 * randomInt(1000));\n      Calendar rightCal = (Calendar) leftCal.clone();\n      rightCal.add(calFieldFacet, randomInt(2000));\n      // Pick facet detail level based on cal field.\n      int detailLevel = tree.getTreeLevelForCalendarField(calFieldFacet);\n      if (detailLevel < 0) {//no exact match\n        detailLevel = -1 * detailLevel;\n      }\n\n      //Randomly pick a filter/acceptDocs\n      Bits topAcceptDocs = null;\n      List<Integer> acceptFieldIds = new ArrayList<>();\n      if (usually()) {\n        //get all possible IDs into a list, random shuffle it, then randomly choose how many of the first we use to\n        // replace the list.\n        for (int i = 0; i < indexedShapes.size(); i++) {\n          if (indexedShapes.get(i) == null) { // we deleted this one\n            continue;\n          }\n          acceptFieldIds.add(i);\n        }\n        Collections.shuffle(acceptFieldIds, random());\n        acceptFieldIds = acceptFieldIds.subList(0, randomInt(acceptFieldIds.size()));\n        if (!acceptFieldIds.isEmpty()) {\n          List<Term> terms = new ArrayList<>();\n          for (Integer acceptDocId : acceptFieldIds) {\n            terms.add(new Term(\"id\", acceptDocId.toString()));\n          }\n\n          topAcceptDocs = searchForDocBits(new TermsQuery(terms));\n        }\n      }\n\n      //Lets do it!\n      NumberRangePrefixTree.NRShape facetRange = tree.toRangeShape(tree.toShape(leftCal), tree.toShape(rightCal));\n      Facets facets = ((NumberRangePrefixTreeStrategy) strategy)\n          .calcFacets(indexSearcher.getTopReaderContext(), topAcceptDocs, facetRange, detailLevel);\n\n      //System.out.println(\"Q: \" + queryIdx + \" \" + facets);\n\n      //Verify results. We do it by looping over indexed shapes and reducing the facet counts.\n      Shape facetShapeRounded = facetRange.roundToLevel(detailLevel);\n      for (int indexedShapeId = 0; indexedShapeId < indexedShapes.size(); indexedShapeId++) {\n        if (topAcceptDocs != null && !acceptFieldIds.contains(indexedShapeId)) {\n          continue;// this doc was filtered out via acceptDocs\n        }\n        Shape indexedShape = indexedShapes.get(indexedShapeId);\n        if (indexedShape == null) {//was deleted\n          continue;\n        }\n        Shape indexedShapeRounded = ((NumberRangePrefixTree.NRShape) indexedShape).roundToLevel(detailLevel);\n        if (!indexedShapeRounded.relate(facetShapeRounded).intersects()) { // no intersection at all\n          continue;\n        }\n        // walk the cells\n        final CellIterator cellIterator = tree.getTreeCellIterator(indexedShape, detailLevel);\n        while (cellIterator.hasNext()) {\n          Cell cell = cellIterator.next();\n          if (!cell.getShape().relate(facetShapeRounded).intersects()) {\n            cellIterator.remove();//no intersection; prune\n            continue;\n          }\n          assert cell.getLevel() <= detailLevel;\n\n          if (cell.getLevel() == detailLevel) {\n            //count it\n            UnitNRShape shape = (UnitNRShape) cell.getShape();\n            final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n            final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n            assertNotNull(facetParentVal);\n            int index = shape.getValAtLevel(shape.getLevel());\n            assertNotNull(facetParentVal.childCounts);\n            assert facetParentVal.childCounts[index] > 0;\n            facetParentVal.childCounts[index]--;\n\n          } else if (cell.isLeaf()) {\n            //count it, and remove/prune.\n            if (cell.getLevel() < detailLevel - 1) {\n              assert facets.topLeaves > 0;\n              facets.topLeaves--;\n            } else {\n              UnitNRShape shape = (UnitNRShape) cell.getShape();\n              final UnitNRShape parentShape = shape.getShapeAtLevel(detailLevel - 1);//get parent\n              final Facets.FacetParentVal facetParentVal = facets.parents.get(parentShape);\n              assertNotNull(facetParentVal);\n              assert facetParentVal.parentLeaves > 0;\n              facetParentVal.parentLeaves--;\n            }\n\n            cellIterator.remove();\n          }\n        }\n      }\n      // At this point; all counts should be down to zero.\n      assertTrue(facets.topLeaves == 0);\n      for (Facets.FacetParentVal facetParentVal : facets.parents.values()) {\n        assertTrue(facetParentVal.parentLeaves == 0);\n        if (facetParentVal.childCounts != null) {\n          for (int childCount : facetParentVal.childCounts) {\n            assertTrue(childCount == 0);\n          }\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"478e85d406c2ea05f4e5028248b9a8e43f300885":["b2c05e4efde014c90e420f5f7c2966499682635c"],"8ebe5dbc7d8190347f5bc5e6ddc32a664366d27c":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"391adf3855f63fe1cc84dd333e44fcd31f43cb02":["478e85d406c2ea05f4e5028248b9a8e43f300885"],"672b198fc3dce868916c727917cae58c2906763d":["8ebe5dbc7d8190347f5bc5e6ddc32a664366d27c"],"b2c05e4efde014c90e420f5f7c2966499682635c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["391adf3855f63fe1cc84dd333e44fcd31f43cb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"478e85d406c2ea05f4e5028248b9a8e43f300885":["391adf3855f63fe1cc84dd333e44fcd31f43cb02"],"8ebe5dbc7d8190347f5bc5e6ddc32a664366d27c":["672b198fc3dce868916c727917cae58c2906763d"],"391adf3855f63fe1cc84dd333e44fcd31f43cb02":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"b2c05e4efde014c90e420f5f7c2966499682635c":["478e85d406c2ea05f4e5028248b9a8e43f300885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2c05e4efde014c90e420f5f7c2966499682635c"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["8ebe5dbc7d8190347f5bc5e6ddc32a664366d27c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}