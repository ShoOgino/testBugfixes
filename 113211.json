{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","sourceOld":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","sourceOld":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = compact[i];\n        compact[i] = compact[j];\n        compact[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = compact[i], ord2 = compact[j];\n        assert bytesStart.length > ord1 && bytesStart.length > ord2;\n        return comp.compare(pool.setBytesRef(scratch1, bytesStart[ord1]),\n          pool.setBytesRef(scratch2, bytesStart[ord2]));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = compact[i];\n        assert bytesStart.length > ord;\n        pool.setBytesRef(pivot, bytesStart[ord]);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = compact[j];\n        assert bytesStart.length > ord;\n        return comp.compare(pivot,\n          pool.setBytesRef(scratch2, bytesStart[ord]));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, count - 1);\n    return compact;\n  }\n\n","sourceOld":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = compact[i];\n        compact[i] = compact[j];\n        compact[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = compact[i], ord2 = compact[j];\n        assert bytesStart.length > ord1 && bytesStart.length > ord2;\n        return comp.compare(pool.setBytesRef(scratch1, bytesStart[ord1]),\n          pool.setBytesRef(scratch2, bytesStart[ord2]));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = compact[i];\n        assert bytesStart.length > ord;\n        pool.setBytesRef(pivot, bytesStart[ord]);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = compact[j];\n        assert bytesStart.length > ord;\n        return comp.compare(pivot,\n          pool.setBytesRef(scratch2, bytesStart[ord]));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, count - 1);\n    return compact;\n  }\n\n","sourceOld":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    quickSort(comp, compact, 0, count - 1);\n    return compact;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = compact[i];\n        compact[i] = compact[j];\n        compact[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = compact[i], ord2 = compact[j];\n        assert bytesStart.length > ord1 && bytesStart.length > ord2;\n        return comp.compare(pool.setBytesRef(scratch1, bytesStart[ord1]),\n          pool.setBytesRef(scratch2, bytesStart[ord2]));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = compact[i];\n        assert bytesStart.length > ord;\n        pool.setBytesRef(pivot, bytesStart[ord]);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = compact[j];\n        assert bytesStart.length > ord;\n        return comp.compare(pivot,\n          pool.setBytesRef(scratch2, bytesStart[ord]));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, count - 1);\n    return compact;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = compact[i];\n        compact[i] = compact[j];\n        compact[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = compact[i], ord2 = compact[j];\n        assert bytesStart.length > ord1 && bytesStart.length > ord2;\n        return comp.compare(pool.setBytesRef(scratch1, bytesStart[ord1]),\n          pool.setBytesRef(scratch2, bytesStart[ord2]));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = compact[i];\n        assert bytesStart.length > ord;\n        pool.setBytesRef(pivot, bytesStart[ord]);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = compact[j];\n        assert bytesStart.length > ord;\n        return comp.compare(pivot,\n          pool.setBytesRef(scratch2, bytesStart[ord]));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, count - 1);\n    return compact;\n  }\n\n","sourceOld":"  /**\n   * Returns the values array sorted by the referenced byte values.\n   * <p>\n   * Note: This is a destructive operation. {@link #clear()} must be called in\n   * order to reuse this {@link BytesRefHash} instance.\n   * </p>\n   * \n   * @param comp\n   *          the {@link Comparator} used for sorting\n   */\n  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] compact = compact();\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = compact[i];\n        compact[i] = compact[j];\n        compact[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = compact[i], ord2 = compact[j];\n        assert bytesStart.length > ord1 && bytesStart.length > ord2;\n        return comp.compare(pool.setBytesRef(scratch1, bytesStart[ord1]),\n          pool.setBytesRef(scratch2, bytesStart[ord2]));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = compact[i];\n        assert bytesStart.length > ord;\n        pool.setBytesRef(pivot, bytesStart[ord]);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = compact[j];\n        assert bytesStart.length > ord;\n        return comp.compare(pivot,\n          pool.setBytesRef(scratch2, bytesStart[ord]));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, count - 1);\n    return compact;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["33a8b1f99104f4144f210f5d068411c297cd7163"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","33a8b1f99104f4144f210f5d068411c297cd7163"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}