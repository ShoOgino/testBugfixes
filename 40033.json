{"path":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testBeforeGregorianChangeDate().mjava","commits":[{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testBeforeGregorianChangeDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testBeforeGregorianChangeDate() { // GCD is the year 1582\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"1500-01-01T00:00:00Z\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"-1500-01-01T00:00:00Z\")); // BC\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"1400-01-01T00:00:00Z/YEAR\")); // date math of month or year can cause issues\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"1300\")); // the whole year of 1300\n    assertU(commit());\n\n    //ensure round-trip toString\n    assertQ(req(\"q\", \"id:0\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1500-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='-1500-01-01T00:00:00Z']\");\n    //    note: fixed by SOLR-9080, would instead find \"1399-01-09T00:00:00Z\"\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1400-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1300']\");\n\n    //ensure range syntax works\n    assertQ(req(\"q\", \"dateRange:[1450-01-01T00:00:00Z TO 1499-12-31T23:59:59Z]\"), xpathMatches());// before\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:00Z TO 1500-01-01T00:00:00Z]\"), xpathMatches(0));// spot on\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:01Z TO 1550-01-01T00:00:00Z]\"), xpathMatches());// after\n\n    assertQ(req(\"q\", \"dateRange:[-1500-01-01T00:00:00Z TO -1500-01-01T00:00:00Z]\"), xpathMatches(1));\n\n    // do range queries in the vicinity of docId=3 val:\"1300\"\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1299-12-31T23:59:59Z]\"), xpathMatches());//adjacent\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1300-01-01T00:00:00Z]\"), xpathMatches(3));// expand + 1 sec\n    assertQ(req(\"q\", \"dateRange:1301\"), xpathMatches()); // adjacent\n    assertQ(req(\"q\", \"dateRange:[1300-12-31T23:59:59Z TO 1301]\"), xpathMatches(3)); // expand + 1 sec\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testBeforeGregorianChangeDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testBeforeGregorianChangeDate() { // GCD is the year 1582\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"1500-01-01T00:00:00Z\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"-1500-01-01T00:00:00Z\")); // BC\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"1400-01-01T00:00:00Z/YEAR\")); // date math of month or year can cause issues\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"1300\")); // the whole year of 1300\n    assertU(commit());\n\n    //ensure round-trip toString\n    assertQ(req(\"q\", \"id:0\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1500-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='-1500-01-01T00:00:00Z']\");\n    //    note: fixed by SOLR-9080, would instead find \"1399-01-09T00:00:00Z\"\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1400-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1300']\");\n\n    //ensure range syntax works\n    assertQ(req(\"q\", \"dateRange:[1450-01-01T00:00:00Z TO 1499-12-31T23:59:59Z]\"), xpathMatches());// before\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:00Z TO 1500-01-01T00:00:00Z]\"), xpathMatches(0));// spot on\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:01Z TO 1550-01-01T00:00:00Z]\"), xpathMatches());// after\n\n    assertQ(req(\"q\", \"dateRange:[-1500-01-01T00:00:00Z TO -1500-01-01T00:00:00Z]\"), xpathMatches(1));\n\n    // do range queries in the vicinity of docId=3 val:\"1300\"\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1299-12-31T23:59:59Z]\"), xpathMatches());//adjacent\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1300-01-01T00:00:00Z]\"), xpathMatches(3));// expand + 1 sec\n    assertQ(req(\"q\", \"dateRange:1301\"), xpathMatches()); // adjacent\n    assertQ(req(\"q\", \"dateRange:[1300-12-31T23:59:59Z TO 1301]\"), xpathMatches(3)); // expand + 1 sec\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testBeforeGregorianChangeDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testBeforeGregorianChangeDate() { // GCD is the year 1582\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"1500-01-01T00:00:00Z\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"-1500-01-01T00:00:00Z\")); // BC\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"1400-01-01T00:00:00Z/YEAR\")); // date math of month or year can cause issues\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"1300\")); // the whole year of 1300\n    assertU(commit());\n\n    //ensure round-trip toString\n    assertQ(req(\"q\", \"id:0\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1500-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='-1500-01-01T00:00:00Z']\");\n    //    note: fixed by SOLR-9080, would instead find \"1399-01-09T00:00:00Z\"\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1400-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1300']\");\n\n    //ensure range syntax works\n    assertQ(req(\"q\", \"dateRange:[1450-01-01T00:00:00Z TO 1499-12-31T23:59:59Z]\"), xpathMatches());// before\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:00Z TO 1500-01-01T00:00:00Z]\"), xpathMatches(0));// spot on\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:01Z TO 1550-01-01T00:00:00Z]\"), xpathMatches());// after\n\n    assertQ(req(\"q\", \"dateRange:[-1500-01-01T00:00:00Z TO -1500-01-01T00:00:00Z]\"), xpathMatches(1));\n\n    // do range queries in the vicinity of docId=3 val:\"1300\"\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1299-12-31T23:59:59Z]\"), xpathMatches());//adjacent\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1300-01-01T00:00:00Z]\"), xpathMatches(3));// expand + 1 sec\n    assertQ(req(\"q\", \"dateRange:1301\"), xpathMatches()); // adjacent\n    assertQ(req(\"q\", \"dateRange:[1300-12-31T23:59:59Z TO 1301]\"), xpathMatches(3)); // expand + 1 sec\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testBeforeGregorianChangeDate().mjava","pathOld":"/dev/null","sourceNew":"  public void testBeforeGregorianChangeDate() { // GCD is the year 1582\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"1500-01-01T00:00:00Z\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"-1500-01-01T00:00:00Z\")); // BC\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"1400-01-01T00:00:00Z/YEAR\")); // date math of month or year can cause issues\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"1300\")); // the whole year of 1300\n    assertU(commit());\n\n    //ensure round-trip toString\n    assertQ(req(\"q\", \"id:0\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1500-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='-1500-01-01T00:00:00Z']\");\n    //    note: fixed by SOLR-9080, would instead find \"1399-01-09T00:00:00Z\"\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1400-01-01T00:00:00Z']\");\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='1300']\");\n\n    //ensure range syntax works\n    assertQ(req(\"q\", \"dateRange:[1450-01-01T00:00:00Z TO 1499-12-31T23:59:59Z]\"), xpathMatches());// before\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:00Z TO 1500-01-01T00:00:00Z]\"), xpathMatches(0));// spot on\n    assertQ(req(\"q\", \"dateRange:[1500-01-01T00:00:01Z TO 1550-01-01T00:00:00Z]\"), xpathMatches());// after\n\n    assertQ(req(\"q\", \"dateRange:[-1500-01-01T00:00:00Z TO -1500-01-01T00:00:00Z]\"), xpathMatches(1));\n\n    // do range queries in the vicinity of docId=3 val:\"1300\"\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1299-12-31T23:59:59Z]\"), xpathMatches());//adjacent\n    assertQ(req(\"q\", \"dateRange:[1299 TO 1300-01-01T00:00:00Z]\"), xpathMatches(3));// expand + 1 sec\n    assertQ(req(\"q\", \"dateRange:1301\"), xpathMatches()); // adjacent\n    assertQ(req(\"q\", \"dateRange:[1300-12-31T23:59:59Z TO 1301]\"), xpathMatches(3)); // expand + 1 sec\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}