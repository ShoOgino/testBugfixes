{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedQueries);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n    for (Query query : mostRecentlyUsedQueries) {\n      recomputedRamBytesUsed += ramBytesUsed(query);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"/dev/null","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedQueries);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n    for (Query query : mostRecentlyUsedQueries) {\n      recomputedRamBytesUsed += ramBytesUsed(query);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa","date":1461326984,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      for (Query query : mostRecentlyUsedQueries) {\n        recomputedRamBytesUsed += ramBytesUsed(query);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedQueries);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n    for (Query query : mostRecentlyUsedQueries) {\n      recomputedRamBytesUsed += ramBytesUsed(query);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      for (Query query : mostRecentlyUsedQueries) {\n        recomputedRamBytesUsed += ramBytesUsed(query);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedQueries);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n    for (Query query : mostRecentlyUsedQueries) {\n      recomputedRamBytesUsed += ramBytesUsed(query);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31781f87f2e572b5c28caf2f83400abe6c05fe7","date":1511944192,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      recomputedRamBytesUsed += mostRecentlyUsedQueries.size() * QUERY_DEFAULT_RAM_BYTES_USED;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      for (Query query : mostRecentlyUsedQueries) {\n        recomputedRamBytesUsed += ramBytesUsed(query);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      recomputedRamBytesUsed += mostRecentlyUsedQueries.size() * QUERY_DEFAULT_RAM_BYTES_USED;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  void assertConsistent() {\n    lock.lock();\n    try {\n      if (requiresEviction()) {\n        throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n            + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n        keys.addAll(leafCache.cache.keySet());\n        keys.removeAll(mostRecentlyUsedQueries);\n        if (!keys.isEmpty()) {\n          throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n        }\n      }\n      long recomputedRamBytesUsed =\n            HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n          + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n      for (Query query : mostRecentlyUsedQueries) {\n        recomputedRamBytesUsed += ramBytesUsed(query);\n      }\n      for (LeafCache leafCache : cache.values()) {\n        recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n        for (DocIdSet set : leafCache.cache.values()) {\n          recomputedRamBytesUsed += set.ramBytesUsed();\n        }\n      }\n      if (recomputedRamBytesUsed != ramBytesUsed) {\n        throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n      }\n\n      long recomputedCacheSize = 0;\n      for (LeafCache leafCache : cache.values()) {\n        recomputedCacheSize += leafCache.cache.size();\n      }\n      if (recomputedCacheSize != getCacheSize()) {\n        throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b31781f87f2e572b5c28caf2f83400abe6c05fe7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f7f901826e47f75f810d7aae24b0455d21ea1fe2","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["1aad05eeff7818b0833c02ac6b743aa72054963b","b31781f87f2e572b5c28caf2f83400abe6c05fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}