{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getStr(ZkStateReader.NODE_NAME_PROP) + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getStr(ZkStateReader.NODE_NAME_PROP) + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getStr(ZkStateReader.NODE_NAME_PROP) + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getStr(ZkStateReader.NODE_NAME_PROP) + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (collections.containsKey(collectionName)) {\n        Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkCollectionExpectations(String,List[Integer],List[String]).mjava","sourceNew":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n\n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards;\n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","sourceOld":"  private String checkCollectionExpectations(String collectionName, List<Integer> numShardsNumReplicaList, List<String> nodesAllowedToRunShards) {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader().getClusterState();\n    \n    int expectedSlices = numShardsNumReplicaList.get(0);\n    // The Math.min thing is here, because we expect replication-factor to be reduced to if there are not enough live nodes to spread all shards of a collection over different nodes\n    int expectedShardsPerSlice = numShardsNumReplicaList.get(1);\n    int expectedTotalShards = expectedSlices * expectedShardsPerSlice;\n    \n//      Map<String,DocCollection> collections = clusterState\n//          .getCollectionStates();\n      if (clusterState.hasCollection(collectionName)) {\n        Map<String,Slice> slices = clusterState.getCollection(collectionName).getSlicesMap();\n        // did we find expectedSlices slices/shards?\n      if (slices.size() != expectedSlices) {\n        return \"Found new collection \" + collectionName + \", but mismatch on number of slices. Expected: \" + expectedSlices + \", actual: \" + slices.size();\n      }\n      int totalShards = 0;\n      for (String sliceName : slices.keySet()) {\n        for (Replica replica : slices.get(sliceName).getReplicas()) {\n          if (nodesAllowedToRunShards != null && !nodesAllowedToRunShards.contains(replica.getStr(ZkStateReader.NODE_NAME_PROP))) {\n            return \"Shard \" + replica.getName() + \" created on node \" + replica.getNodeName() + \" not allowed to run shards for the created collection \" + collectionName;\n          }\n        }\n        totalShards += slices.get(sliceName).getReplicas().size();\n      }\n      if (totalShards != expectedTotalShards) {\n        return \"Found new collection \" + collectionName + \" with correct number of slices, but mismatch on number of shards. Expected: \" + expectedTotalShards + \", actual: \" + totalShards; \n        }\n      return null;\n    } else {\n      return \"Could not find new collection \" + collectionName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1cfa38e36fa296bb93d77df7d5556257dffa4535","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["849494cf2f3a96af5c8c84995108ddd8456fcd04","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"bafca15d8e408346a67f4282ad1143b88023893b":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}