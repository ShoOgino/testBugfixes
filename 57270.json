{"path":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase#broadcastNodeReopen(int,long,IndexSearcher).mjava","commits":[{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase#broadcastNodeReopen(int,long,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  // Called by one node once it has reopened, to notify all\n  // other nodes.  This is just a mock (since it goes and\n  // directly updates all other nodes, in RAM)... in a real\n  // env this would hit the wire, sending version &\n  // collection stats to all other nodes:\n  void broadcastNodeReopen(int nodeID, long version, IndexSearcher newSearcher) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"REOPEN: nodeID=\" + nodeID + \" version=\" + version + \" maxDoc=\" + newSearcher.getIndexReader().maxDoc());\n    }\n\n    // Broadcast new collection stats for this node to all\n    // other nodes:\n    for(String field : fieldsToShare) {\n      final CollectionStatistics stats = newSearcher.collectionStatistics(field);\n      for (NodeState node : nodes) {\n        // Don't put my own collection stats into the cache;\n        // we pull locally:\n        if (node.myNodeID != nodeID) {\n          node.collectionStatsCache.put(new FieldAndShardVersion(nodeID, version, field), stats);\n        }\n      }\n    }\n    for (NodeState node : nodes) {\n      node.updateNodeVersion(nodeID, version);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#broadcastNodeReopen(int,long,IndexSearcher).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase#broadcastNodeReopen(int,long,IndexSearcher).mjava","sourceNew":"  // Called by one node once it has reopened, to notify all\n  // other nodes.  This is just a mock (since it goes and\n  // directly updates all other nodes, in RAM)... in a real\n  // env this would hit the wire, sending version &\n  // collection stats to all other nodes:\n  void broadcastNodeReopen(int nodeID, long version, IndexSearcher newSearcher) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"REOPEN: nodeID=\" + nodeID + \" version=\" + version + \" maxDoc=\" + newSearcher.getIndexReader().maxDoc());\n    }\n\n    // Broadcast new collection stats for this node to all\n    // other nodes:\n    for(String field : fieldsToShare) {\n      final CollectionStatistics stats = newSearcher.collectionStatistics(field);\n      for (NodeState node : nodes) {\n        // Don't put my own collection stats into the cache;\n        // we pull locally:\n        if (node.myNodeID != nodeID) {\n          node.collectionStatsCache.put(new FieldAndShardVersion(nodeID, version, field), stats);\n        }\n      }\n    }\n    for (NodeState node : nodes) {\n      node.updateNodeVersion(nodeID, version);\n    }\n  }\n\n","sourceOld":"  // Called by one node once it has reopened, to notify all\n  // other nodes.  This is just a mock (since it goes and\n  // directly updates all other nodes, in RAM)... in a real\n  // env this would hit the wire, sending version &\n  // collection stats to all other nodes:\n  void broadcastNodeReopen(int nodeID, long version, IndexSearcher newSearcher) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"REOPEN: nodeID=\" + nodeID + \" version=\" + version + \" maxDoc=\" + newSearcher.getIndexReader().maxDoc());\n    }\n\n    // Broadcast new collection stats for this node to all\n    // other nodes:\n    for(String field : fieldsToShare) {\n      final CollectionStatistics stats = newSearcher.collectionStatistics(field);\n      for (NodeState node : nodes) {\n        // Don't put my own collection stats into the cache;\n        // we pull locally:\n        if (node.myNodeID != nodeID) {\n          node.collectionStatsCache.put(new FieldAndShardVersion(nodeID, version, field), stats);\n        }\n      }\n    }\n    for (NodeState node : nodes) {\n      node.updateNodeVersion(nodeID, version);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["226aae72c0326f4299c16280195bade4530de537"],"226aae72c0326f4299c16280195bade4530de537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226aae72c0326f4299c16280195bade4530de537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}