{"path":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","commits":[{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime());\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      // nocommit: fix getVersion() usage for atomic readers\n      version = ((CompositeIndexReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      // nocommit: what happens if this is no DirectoryReader?\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      // nocommit: fix getVersion() usage for atomic readers\n      version = ((CompositeIndexReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cd232a36e691d3af7035460733f822fb1a5239a","date":1327962711,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      // nocommit: what happens if this is no DirectoryReader?\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = searcher.getIndexReader().getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager.SearcherTracker#SearcherTracker(IndexSearcher).mjava","sourceNew":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","sourceOld":"    public SearcherTracker(IndexSearcher searcher) {\n      this.searcher = searcher;\n      version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n      searcher.getIndexReader().incRef();\n      // Use nanoTime not currentTimeMillis since it [in\n      // theory] reduces risk from clock shift\n      recordTimeSec = System.nanoTime() / NANOS_PER_SEC;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"226aae72c0326f4299c16280195bade4530de537":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"8cd232a36e691d3af7035460733f822fb1a5239a":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["226aae72c0326f4299c16280195bade4530de537","8cd232a36e691d3af7035460733f822fb1a5239a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["226aae72c0326f4299c16280195bade4530de537"]},"commit2Childs":{"df16fc2e9b615e0138edac46655ae628f5d098ad":["226aae72c0326f4299c16280195bade4530de537"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"893d07555f01912f57b453a320e4d46363a31b50":["8cd232a36e691d3af7035460733f822fb1a5239a"],"8cd232a36e691d3af7035460733f822fb1a5239a":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}