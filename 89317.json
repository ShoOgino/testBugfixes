{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<>(1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ROOT) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<>(1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ROOT) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<>(1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ROOT) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<>(1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = random().nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)random().nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ROOT) : keyStr; \n\n      int val = random().nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}