{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec","date":1279906406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (_TestUtil.getTestCodec().equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (_TestUtil.getTestCodec().equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (TEST_CODEC.equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (_TestUtil.getTestCodec().equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (TEST_CODEC.equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (TEST_CODEC.equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e49d7950c2623fba7129a12bfc1b773bdd38f1b","date":1281317143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    if (TEST_LOCALE.equals(\"random\"))\n      System.out.println(\"NOTE: random locale of testcase '\" + getName() + \"' was: \" + locale);\n    if (TEST_TIMEZONE.equals(\"random\"))\n      System.out.println(\"NOTE: random timezone of testcase '\" + getName() + \"' was: \" + timeZone.getID());\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0016c51275cfe96d99b96ca5e9981bca10486fb","date":1281334276,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    if (TEST_LOCALE.equals(\"random\"))\n      System.out.println(\"NOTE: random locale of testcase '\" + getName() + \"' was: \" + locale);\n    if (TEST_TIMEZONE.equals(\"random\")) // careful to not deliver NPE here in case they forgot super.setUp\n      System.out.println(\"NOTE: random timezone of testcase '\" + getName() + \"' was: \" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    if (TEST_LOCALE.equals(\"random\"))\n      System.out.println(\"NOTE: random locale of testcase '\" + getName() + \"' was: \" + locale);\n    if (TEST_TIMEZONE.equals(\"random\"))\n      System.out.println(\"NOTE: random timezone of testcase '\" + getName() + \"' was: \" + timeZone.getID());\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#reportAdditionalFailureInfo().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    if (TEST_LOCALE.equals(\"random\"))\n      System.out.println(\"NOTE: random locale of testcase '\" + getName() + \"' was: \" + locale);\n    if (TEST_TIMEZONE.equals(\"random\")) // careful to not deliver NPE here in case they forgot super.setUp\n      System.out.println(\"NOTE: random timezone of testcase '\" + getName() + \"' was: \" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    if (TEST_LOCALE.equals(\"random\"))\n      System.out.println(\"NOTE: random locale of testcase '\" + getName() + \"' was: \" + locale);\n    if (TEST_TIMEZONE.equals(\"random\")) // careful to not deliver NPE here in case they forgot super.setUp\n      System.out.println(\"NOTE: random timezone of testcase '\" + getName() + \"' was: \" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca38aecd0204be91049ec782668f642a68d9935","date":1292975343,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#reportAdditionalFailureInfo().mjava","sourceNew":null,"sourceOld":"  // We get here from InterceptTestCaseEvents on the 'failed' event....\n  public void reportAdditionalFailureInfo() {\n    Long staticSeed = staticSeeds.get(getClass());\n    if (staticSeed != null) {\n      System.out.println(\"NOTE: random static seed of testclass '\" + getName() + \"' was: \" + staticSeed);\n    }\n    \n    if (TEST_CODEC.equals(\"random\")) {\n      System.out.println(\"NOTE: random codec of testcase '\" + getName() + \"' was: \" + codec);\n    }\n\n    if (seed != null) {\n      System.out.println(\"NOTE: random seed of testcase '\" + getName() + \"' was: \" + seed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"e0016c51275cfe96d99b96ca5e9981bca10486fb":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"],"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"1ca38aecd0204be91049ec782668f642a68d9935":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"43b04c27924fe393e38e9f0986e32c634f261859":["e0016c51275cfe96d99b96ca5e9981bca10486fb"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["c084e47df29de3330311d69dabf515ceaa989512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","3242a09f703274d3b9283f2064a1a33064b53a1b"],"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["6e49d7950c2623fba7129a12bfc1b773bdd38f1b"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["1ca38aecd0204be91049ec782668f642a68d9935"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"e0016c51275cfe96d99b96ca5e9981bca10486fb":["43b04c27924fe393e38e9f0986e32c634f261859"],"6e49d7950c2623fba7129a12bfc1b773bdd38f1b":["e0016c51275cfe96d99b96ca5e9981bca10486fb"],"1ca38aecd0204be91049ec782668f642a68d9935":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32","236e69f7c6c636bfd65b7a9031c9e6fb15b508ec"],"236e69f7c6c636bfd65b7a9031c9e6fb15b508ec":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ca38aecd0204be91049ec782668f642a68d9935","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}