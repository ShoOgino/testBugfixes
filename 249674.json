{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["ad88b97a762dc20607cd6a0bc4ad24ef5e074fee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad88b97a762dc20607cd6a0bc4ad24ef5e074fee","date":1374240202,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final BlockPackedReader ordinals;\n    synchronized (ordinalInstances) {\n      BlockPackedReader ordsInstance = ordinalInstances.get(field.number);\n      if (ordsInstance == null) {\n        NumericEntry entry = ords.get(field.number);\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        ordsInstance = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordinalInstances.put(field.number, ordsInstance);\n      }\n      ordinals = ordsInstance;\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = (int) binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    NumericEntry entry = ords.get(field.number);\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final BlockPackedReader ordinals = new BlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, true);\n    \n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);\n        } else {\n        return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues)binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"11a746437bc5c0a0b3df0337ed249c387c812871":["0ad01348544f9eb6ee985c300245013a75addfc6"],"ad88b97a762dc20607cd6a0bc4ad24ef5e074fee":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"0ad01348544f9eb6ee985c300245013a75addfc6":["ad88b97a762dc20607cd6a0bc4ad24ef5e074fee"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["ad88b97a762dc20607cd6a0bc4ad24ef5e074fee","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"ad88b97a762dc20607cd6a0bc4ad24ef5e074fee":["0ad01348544f9eb6ee985c300245013a75addfc6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0ad01348544f9eb6ee985c300245013a75addfc6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","11a746437bc5c0a0b3df0337ed249c387c812871"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}