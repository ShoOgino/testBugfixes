{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#checkEntryVersion(String,String,int).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#checkEntryVersion(String,String,int).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#checkEntryVersion(String,String,int).mjava","sourceNew":"    protected boolean checkEntryVersion(String id, String feedId, int version)\n            throws IOException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking entry version for entryid \" + id + \" feedid: \"\n                    + feedId + \" version: \" + version);\n        StorageEntryWrapper wrapper = this.buffer.getEntry(id, feedId);\n\n        if (wrapper != null)\n            return wrapper.getVersion() == version;\n\n        Hits h = storageQuery(id);\n        if (h.length() < 1)\n            return false;\n        Document doc = h.doc(0);\n        String fieldValue = null;\n        try {\n            fieldValue = doc.getField(StorageEntryWrapper.FIELD_VERSION)\n                    .stringValue();\n            int storedVersion = Integer.parseInt(fieldValue);\n        if(LOG.isDebugEnabled())\n            LOG.debug(\"StoredEntry has version \"+storedVersion +\" return compare result\");\n            return storedVersion == version;\n        } catch (Exception e) {\n            LOG.error(\"Entry has no parable Version id or field is not set -- \"\n                    + fieldValue);\n        }\n        return false;\n    }\n\n","sourceOld":"    protected boolean checkEntryVersion(String id, String feedId, int version)\n            throws IOException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking entry version for entryid \" + id + \" feedid: \"\n                    + feedId + \" version: \" + version);\n        StorageEntryWrapper wrapper = this.buffer.getEntry(id, feedId);\n\n        if (wrapper != null)\n            return wrapper.getVersion() == version;\n\n        Hits h = storageQuery(id);\n        if (h.length() < 1)\n            return false;\n        Document doc = h.doc(0);\n        String fieldValue = null;\n        try {\n            fieldValue = doc.getField(StorageEntryWrapper.FIELD_VERSION)\n                    .stringValue();\n            int storedVersion = Integer.parseInt(fieldValue);\n        if(LOG.isDebugEnabled())\n            LOG.debug(\"StoredEntry has version \"+storedVersion +\" return compare result\");\n            return storedVersion == version;\n        } catch (Exception e) {\n            LOG.error(\"Entry has no parable Version id or field is not set -- \"\n                    + fieldValue);\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#checkEntryVersion(String,String,int).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#checkEntryVersion(String,String,int).mjava","sourceNew":"    protected boolean checkEntryVersion(String id, String feedId, int version)\n            throws IOException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking entry version for entryid \" + id + \" feedid: \"\n                    + feedId + \" version: \" + version);\n        StorageEntryWrapper wrapper = this.buffer.getEntry(id, feedId);\n\n        if (wrapper != null)\n            return wrapper.getVersion() == version;\n\n        Hits h = storageQuery(id);\n        if (h.length() < 1)\n            return false;\n        Document doc = h.doc(0);\n        String fieldValue = null;\n        try {\n            fieldValue = doc.getField(StorageEntryWrapper.FIELD_VERSION)\n                    .stringValue();\n            int storedVersion = Integer.parseInt(fieldValue);\n        if(LOG.isDebugEnabled())\n            LOG.debug(\"StoredEntry has version \"+storedVersion +\" return compare result\");\n            return storedVersion == version;\n        } catch (Exception e) {\n            LOG.error(\"Entry has no parable Version id or field is not set -- \"\n                    + fieldValue);\n        }\n        return false;\n    }\n\n","sourceOld":"    protected boolean checkEntryVersion(String id, String feedId, int version)\n            throws IOException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Checking entry version for entryid \" + id + \" feedid: \"\n                    + feedId + \" version: \" + version);\n        StorageEntryWrapper wrapper = this.buffer.getEntry(id, feedId);\n\n        if (wrapper != null)\n            return wrapper.getVersion() == version;\n\n        Hits h = storageQuery(id);\n        if (h.length() < 1)\n            return false;\n        Document doc = h.doc(0);\n        String fieldValue = null;\n        try {\n            fieldValue = doc.getField(StorageEntryWrapper.FIELD_VERSION)\n                    .stringValue();\n            int storedVersion = Integer.parseInt(fieldValue);\n        if(LOG.isDebugEnabled())\n            LOG.debug(\"StoredEntry has version \"+storedVersion +\" return compare result\");\n            return storedVersion == version;\n        } catch (Exception e) {\n            LOG.error(\"Entry has no parable Version id or field is not set -- \"\n                    + fieldValue);\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}