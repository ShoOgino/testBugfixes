{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","commits":[{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(LeafReader,String[],String,Analyzer,Query).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   * classify any documents.\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(LeafReader leafReader, String[] textFieldNames, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8","date":1430636069,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier.\n   * classify any documents.\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public SimpleNaiveBayesClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#SimpleNaiveBayesClassifier(LeafReader,Analyzer,Query,String,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public SimpleNaiveBayesClassifier(LeafReader leafReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.leafReader = leafReader;\n    this.indexSearcher = new IndexSearcher(this.leafReader);\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["134a24d0cb66520908d88384f1a559875704ed25"],"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"134a24d0cb66520908d88384f1a559875704ed25":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["134a24d0cb66520908d88384f1a559875704ed25","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8":["134a24d0cb66520908d88384f1a559875704ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"134a24d0cb66520908d88384f1a559875704ed25":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["5dcf11f5c46a9fb8465d812ea1a1a34c9305dac8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}