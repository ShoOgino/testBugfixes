{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"/dev/null","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"/dev/null","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = MultiSpansWrapper.wrap(searcher.getIndexReader(), q);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testNearSpansAdvanceTo1().mjava","sourceNew":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","sourceOld":"  public void testNearSpansAdvanceTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Spans span = q.createWeight(searcher, false, 1f).getSpans(searcher.getIndexReader().leaves().get(0), SpanWeight.Postings.POSITIONS);\n    assertEquals(1, span.advance(1));\n    assertEquals(0, span.nextStartPosition());\n    assertEquals(s(1,0,4), s(span));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}