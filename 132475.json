{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        MockRAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        MockRAMDirectory d = newDirectory(random);\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        MockRAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory(random);\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        MockRAMDirectory d = newDirectory(random);\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory(random);\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(random, \n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n\n        // verify index term vector fields\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        RAMDirectory d = new MockRAMDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer()));\n        addDocumentWithFields(writer);\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithFields(writer);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n            addDocumentWithDifferentFields(writer);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          addDocumentWithTermVectorFields(writer);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n\n        // verify index term vector fields\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n\n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n\n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n\n        // verify index term vector fields\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\",StringField.TYPE_STORED,\"test1\"));\n        doc.add(new Field(\"text\",TextField.TYPE_STORED,\"test1\"));\n        doc.add(new Field(\"unindexed\",customType3,\"test1\"));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",StringField.TYPE_STORED,\"test1\"));\n          doc.add(new Field(\"text\",TextField.TYPE_STORED, \"test1\"));\n          doc.add(new Field(\"unindexed\",customType3,\"test1\"));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",StringField.TYPE_STORED,\"test1\"));\n          doc.add(new Field(\"text2\",TextField.TYPE_STORED, \"test1\"));\n          doc.add(new Field(\"unindexed2\",customType3,\"test1\"));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",TextField.TYPE_STORED,\"tvnot\"));\n          doc.add(new Field(\"termvector\",customType5,\"termvector\"));\n          doc.add(new Field(\"tvoffset\",customType6,\"tvoffset\"));\n          doc.add(new Field(\"tvposition\",customType7,\"tvposition\"));\n          doc.add(new Field(\"tvpositionoffset\",customType8, \"tvpositionoffset\"));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n        doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n        doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n        doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",\"test1\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n          doc.add(new Field(\"text2\",\"test1\", Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"unindexed2\",\"test1\", Field.Store.YES, Field.Index.NO));\n          doc.add(new Field(\"unstored2\",\"test1\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",\"tvnot\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n          doc.add(new Field(\"termvector\",\"termvector\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n          doc.add(new Field(\"tvoffset\",\"tvoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n          doc.add(new Field(\"tvposition\",\"tvposition\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n          doc.add(newField(\"tvpositionoffset\",\"tvpositionoffset\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\",StringField.TYPE_STORED,\"test1\"));\n        doc.add(new Field(\"text\",TextField.TYPE_STORED,\"test1\"));\n        doc.add(new Field(\"unindexed\",customType3,\"test1\"));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\",StringField.TYPE_STORED,\"test1\"));\n          doc.add(new Field(\"text\",TextField.TYPE_STORED, \"test1\"));\n          doc.add(new Field(\"unindexed\",customType3,\"test1\"));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\",StringField.TYPE_STORED,\"test1\"));\n          doc.add(new Field(\"text2\",TextField.TYPE_STORED, \"test1\"));\n          doc.add(new Field(\"unindexed2\",customType3,\"test1\"));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\",TextField.TYPE_STORED,\"tvnot\"));\n          doc.add(new Field(\"termvector\",customType5,\"termvector\"));\n          doc.add(new Field(\"tvoffset\",customType6,\"tvoffset\"));\n          doc.add(new Field(\"tvposition\",customType7,\"tvposition\"));\n          doc.add(new Field(\"tvpositionoffset\",customType8, \"tvpositionoffset\"));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d, false);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d, false);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        FieldInfos fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        assertEquals(13, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n        assertEquals(11, fieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(fieldNames.contains(\"keyword\"));\n        assertTrue(fieldNames.contains(\"text\"));\n        assertTrue(fieldNames.contains(\"unstored\"));\n        assertTrue(fieldNames.contains(\"keyword2\"));\n        assertTrue(fieldNames.contains(\"text2\"));\n        assertTrue(fieldNames.contains(\"unstored2\"));\n        assertTrue(fieldNames.contains(\"tvnot\"));\n        assertTrue(fieldNames.contains(\"termvector\"));\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.UNINDEXED);\n        assertEquals(2, fieldNames.size());    // the following fields\n        assertTrue(fieldNames.contains(\"unindexed\"));\n        assertTrue(fieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR);\n        assertEquals(1, fieldNames.size());    // 1 field has term vector only\n        assertTrue(fieldNames.contains(\"termvector\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvposition\"));\n        \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvoffset\"));\n                \n        fieldNames = reader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET);\n        assertEquals(1, fieldNames.size());    // 4 fields are indexed with term vectors\n        assertTrue(fieldNames.contains(\"tvpositionoffset\"));\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        DirectoryReader reader = DirectoryReader.open(d);\n        FieldInfos fieldInfos = MultiFields.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = DirectoryReader.open(d);\n        fieldInfos = MultiFields.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        FieldInfos fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        DirectoryReader reader = DirectoryReader.open(d);\n        FieldInfos fieldInfos = MultiFields.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = DirectoryReader.open(d);\n        fieldInfos = MultiFields.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        IndexReader reader = IndexReader.open(d);\n        FieldInfos fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = IndexReader.open(d);\n        fieldInfos = ReaderUtil.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testGetFieldNames().mjava","sourceNew":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        DirectoryReader reader = DirectoryReader.open(d);\n        FieldInfos fieldInfos = MultiFields.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = DirectoryReader.open(d);\n        fieldInfos = MultiFields.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","sourceOld":"    /**\n     * Tests the IndexReader.getFieldNames implementation\n     * @throws Exception on error\n     */\n    public void testGetFieldNames() throws Exception {\n        Directory d = newDirectory();\n        // set up writer\n        IndexWriter writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        );\n\n        Document doc = new Document();\n\n        FieldType customType3 = new FieldType();\n        customType3.setStored(true);\n        \n        doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n        doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n        doc.add(new Field(\"unindexed\", \"test1\", customType3));\n        doc.add(new TextField(\"unstored\",\"test1\"));\n        writer.addDocument(doc);\n\n        writer.close();\n        // set up reader\n        DirectoryReader reader = DirectoryReader.open(d);\n        FieldInfos fieldInfos = MultiFields.getMergedFieldInfos(reader);\n        assertNotNull(fieldInfos.fieldInfo(\"keyword\"));\n        assertNotNull(fieldInfos.fieldInfo(\"text\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unindexed\"));\n        assertNotNull(fieldInfos.fieldInfo(\"unstored\"));\n        reader.close();\n        // add more documents\n        writer = new IndexWriter(\n            d,\n            newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.APPEND).\n                setMergePolicy(newLogMergePolicy())\n        );\n        // want to get some more segments here\n        int mergeFactor = ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor();\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new fields are in some different segments (we hope)\n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"keyword2\", \"test1\", StringField.TYPE_STORED));\n          doc.add(new Field(\"text2\", \"test1\", TextField.TYPE_STORED));\n          doc.add(new Field(\"unindexed2\", \"test1\", customType3));\n          doc.add(new TextField(\"unstored2\",\"test1\"));\n          writer.addDocument(doc);\n        }\n        // new termvector fields\n\n        FieldType customType5 = new FieldType(TextField.TYPE_STORED);\n        customType5.setStoreTermVectors(true);\n        FieldType customType6 = new FieldType(TextField.TYPE_STORED);\n        customType6.setStoreTermVectors(true);\n        customType6.setStoreTermVectorOffsets(true);\n        FieldType customType7 = new FieldType(TextField.TYPE_STORED);\n        customType7.setStoreTermVectors(true);\n        customType7.setStoreTermVectorPositions(true);\n        FieldType customType8 = new FieldType(TextField.TYPE_STORED);\n        customType8.setStoreTermVectors(true);\n        customType8.setStoreTermVectorOffsets(true);\n        customType8.setStoreTermVectorPositions(true);\n        \n        for (int i = 0; i < 5*mergeFactor; i++) {\n          doc = new Document();\n          doc.add(new Field(\"tvnot\", \"tvnot\", TextField.TYPE_STORED));\n          doc.add(new Field(\"termvector\", \"termvector\", customType5));\n          doc.add(new Field(\"tvoffset\", \"tvoffset\", customType6));\n          doc.add(new Field(\"tvposition\", \"tvposition\", customType7));\n          doc.add(new Field(\"tvpositionoffset\", \"tvpositionoffset\", customType8));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n\n        // verify fields again\n        reader = DirectoryReader.open(d);\n        fieldInfos = MultiFields.getMergedFieldInfos(reader);\n\n        Collection<String> allFieldNames = new HashSet<String>();\n        Collection<String> indexedFieldNames = new HashSet<String>();\n        Collection<String> notIndexedFieldNames = new HashSet<String>();\n        Collection<String> tvFieldNames = new HashSet<String>();\n\n        for(FieldInfo fieldInfo : fieldInfos) {\n          final String name = fieldInfo.name;\n          allFieldNames.add(name);\n          if (fieldInfo.isIndexed) {\n            indexedFieldNames.add(name);\n          } else {\n            notIndexedFieldNames.add(name);\n          }\n          if (fieldInfo.storeTermVector) {\n            tvFieldNames.add(name);\n          }\n        }\n\n        assertTrue(allFieldNames.contains(\"keyword\"));\n        assertTrue(allFieldNames.contains(\"text\"));\n        assertTrue(allFieldNames.contains(\"unindexed\"));\n        assertTrue(allFieldNames.contains(\"unstored\"));\n        assertTrue(allFieldNames.contains(\"keyword2\"));\n        assertTrue(allFieldNames.contains(\"text2\"));\n        assertTrue(allFieldNames.contains(\"unindexed2\"));\n        assertTrue(allFieldNames.contains(\"unstored2\"));\n        assertTrue(allFieldNames.contains(\"tvnot\"));\n        assertTrue(allFieldNames.contains(\"termvector\"));\n        assertTrue(allFieldNames.contains(\"tvposition\"));\n        assertTrue(allFieldNames.contains(\"tvoffset\"));\n        assertTrue(allFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only indexed fields were returned\n        assertEquals(11, indexedFieldNames.size());    // 6 original + the 5 termvector fields \n        assertTrue(indexedFieldNames.contains(\"keyword\"));\n        assertTrue(indexedFieldNames.contains(\"text\"));\n        assertTrue(indexedFieldNames.contains(\"unstored\"));\n        assertTrue(indexedFieldNames.contains(\"keyword2\"));\n        assertTrue(indexedFieldNames.contains(\"text2\"));\n        assertTrue(indexedFieldNames.contains(\"unstored2\"));\n        assertTrue(indexedFieldNames.contains(\"tvnot\"));\n        assertTrue(indexedFieldNames.contains(\"termvector\"));\n        assertTrue(indexedFieldNames.contains(\"tvposition\"));\n        assertTrue(indexedFieldNames.contains(\"tvoffset\"));\n        assertTrue(indexedFieldNames.contains(\"tvpositionoffset\"));\n        \n        // verify that only unindexed fields were returned\n        assertEquals(2, notIndexedFieldNames.size());    // the following fields\n        assertTrue(notIndexedFieldNames.contains(\"unindexed\"));\n        assertTrue(notIndexedFieldNames.contains(\"unindexed2\"));\n                \n        // verify index term vector fields  \n        assertEquals(tvFieldNames.toString(), 4, tvFieldNames.size());    // 4 field has term vector only\n        assertTrue(tvFieldNames.contains(\"termvector\"));\n\n        reader.close();\n        d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}