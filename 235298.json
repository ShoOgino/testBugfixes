{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1","872cff1d3a554e0cd64014cd97f88d3002b0f491","ee1513e4ee2237693ff50a460d78dff5246c3d34"],"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        } else {\n          assert scorer instanceof TermScorer;\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","ee1513e4ee2237693ff50a460d78dff5246c3d34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        } else {\n          assert scorer instanceof TermScorer;\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        } else {\n          assert scorer instanceof TermScorer;\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        }\n        if (scorer instanceof TermScorer) {\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        } else {\n          docsAndFreqs[i] = new DocsAndFreqs((MatchOnlyTermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final Scorer scorer = weight.scorer(context, true, false, acceptDocs);\n        if (scorer == null) {\n          return null;\n        } else {\n          assert scorer instanceof TermScorer;\n          docsAndFreqs[i] = new DocsAndFreqs((TermScorer) scorer);\n        }\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"02331260bb246364779cb6f04919ca47900d01bb":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}