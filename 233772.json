{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRangeSplit(int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRangeSplit(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRangeSplit(TrieUtils).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+precisionStep;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      long upper=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true).asQuery();\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, true).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+variant.TRIE_BITS;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L);\n      long upper=(long)(rnd.nextDouble()*10000L);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", tTopDocs.totalHits, upper-lower+1 );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", tTopDocs.totalHits, upper-lower );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery#testRangeSplit(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRangeSplit(int).mjava","sourceNew":"  private void testRangeSplit(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+precisionStep;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      long upper=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), false, true);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=new LongTrieRangeQuery(field, precisionStep, new Long(lower), new Long(upper), true, false);\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRangeSplit(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"ascfield\"+precisionStep;\n    // 50 random tests\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      long upper=(long)(rnd.nextDouble()*noDocs - noDocs/2);\n      if (lower>upper) {\n        long a=lower; lower=upper; upper=a;\n      }\n      // test inclusive range\n      Query tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true).asQuery();\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n      // test exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to exclusive range length\", Math.max(upper-lower-1, 0), tTopDocs.totalHits );\n      // test left exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, true).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, false).asQuery();\n      tTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count of range query must be equal to half exclusive range length\", upper-lower, tTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}