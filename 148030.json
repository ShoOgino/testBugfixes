{"path":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = new String[0];\n    try {\n      p1 = ParseUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery bq = new BooleanQuery(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq.build();\n  }\n\n","sourceOld":"  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    String[] p1 = parseCommaSeparatedList(externalVal, dimension);\n    //TODO: should we assert that p1.length == dimension?\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (int i = 0; i < dimension; i++) {\n      SchemaField sf = subField(field, i, schema);\n      Query tq = sf.getType().getFieldQuery(parser, sf, p1[i]);\n      bq.add(tq, BooleanClause.Occur.MUST);\n    }\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e47768b261c28e7e6032060e8331475c81057953":["c26f00b574427b55127e869b935845554afde1fa","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["c26f00b574427b55127e869b935845554afde1fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"],"08970e5b8411182a29412c177eff67ec1110095b":["e47768b261c28e7e6032060e8331475c81057953"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e47768b261c28e7e6032060e8331475c81057953":["08970e5b8411182a29412c177eff67ec1110095b"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}