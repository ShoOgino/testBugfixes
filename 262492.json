{"path":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","pathOld":"/dev/null","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        Reader r = Ints.getReader(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = r.load();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.ints(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n          \n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = r.load();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.ints(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        Reader r = Ints.getReader(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = r.load();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.ints(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n          \n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = r.load();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.ints(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#testInts().mjava","sourceNew":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  public void testInts() throws IOException {\n    long maxV = 1;\n    final int NUM_VALUES = 1000;\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < 63; rx++, maxV *= 2) {\n      for (int b = 0; b < 2; b++) {\n        Directory dir = newDirectory();\n        boolean useFixedArrays = b == 0;\n        Writer w = Ints.getWriter(dir, \"test\", useFixedArrays);\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = random.nextLong() % (1 + maxV);\n          values[i] = v;\n          w.add(i, v);\n        }\n        final int additionalDocs = 1 + random.nextInt(9);\n        w.finish(NUM_VALUES + additionalDocs);\n\n        DocValues r = Ints.getValues(dir, \"test\", useFixedArrays);\n        for (int iter = 0; iter < 2; iter++) {\n          Source s = getSource(r);\n          for (int i = 0; i < NUM_VALUES; i++) {\n            final long v = s.getInt(i);\n            assertEquals(\"index \" + i + \" b: \" + b, values[i], v);\n          }\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.nextDoc());\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n\n        for (int iter = 0; iter < 2; iter++) {\n          ValuesEnum iEnum = r.getEnum();\n          ValuesAttribute attr = iEnum.addAttribute(ValuesAttribute.class);\n          LongsRef ints = attr.ints();\n          for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(values[i], ints.get());\n          }\n          for (int i = NUM_VALUES; i < NUM_VALUES + additionalDocs; i++) {\n            assertEquals(i, iEnum.advance(i));\n            assertEquals(\"\" + i, 0, ints.get());\n          }\n\n          iEnum.close();\n        }\n        r.close();\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5c559c875836474bafae7243263d93b1b1965db":["39f3757037aa8f710c0cbf9a76a332de735f58b0"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["b5c559c875836474bafae7243263d93b1b1965db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b5c559c875836474bafae7243263d93b1b1965db":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b5c559c875836474bafae7243263d93b1b1965db"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}