{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","commits":[{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb4d0cfb021fa1b0c1e44571968b254f379ac6f","date":1564497726,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List rowlabels =  (List)value2;\n\n      //Convert numeric labels to strings.\n\n      List<String> strLabels = new ArrayList(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List rowlabels =  (List)value2;\n\n      //Convert numeric labels to strings.\n\n      List<String> strLabels = new ArrayList(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List<String> rowlabels =  (List<String>)value2;\n      matrix.setRowLabels(rowlabels);\n      return matrix;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/SetRowLabelsEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      @SuppressWarnings({\"rawtypes\"})\n      List rowlabels =  (List)value2;\n\n      //Convert numeric labels to strings.\n\n      List<String> strLabels = new ArrayList<>(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n    if(!(value1 instanceof Matrix)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting a Matrix\",toExpression(constructingFactory), value1.getClass().getSimpleName()));\n    } else if(!(value2 instanceof List)) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for value, expecting an array of labels.\",toExpression(constructingFactory), value2.getClass().getSimpleName()));\n    } else {\n      Matrix matrix = (Matrix)value1;\n      List rowlabels =  (List)value2;\n\n      //Convert numeric labels to strings.\n\n      List<String> strLabels = new ArrayList(rowlabels.size());\n\n      for(Object o : rowlabels) {\n        strLabels.add(o.toString());\n      }\n\n      matrix.setRowLabels(strLabels);\n      return matrix;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b94236357aaa22b76c10629851fe4e376e0cea82","deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f","f8061ddd97f3352007d927dae445884a6f3d857b"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}