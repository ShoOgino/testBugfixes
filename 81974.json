{"path":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","sourceNew":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","sourceOld":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","sourceNew":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","sourceOld":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","sourceNew":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","sourceOld":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilterFactory#loadRules(String,ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadRules(String,ResourceLoader).mjava","sourceNew":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","sourceOld":"  /**\n   * @return a list of all rules\n   */\n  protected Iterable<String> loadRules( String synonyms, ResourceLoader loader ) {\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return wlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}