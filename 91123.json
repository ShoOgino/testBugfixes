{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","commits":[{"id":"5be9f64a375fac229234302f36485c63d1230840","date":1406639864,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","pathOld":"/dev/null","sourceNew":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"));\n    IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n    int num = TestUtil.nextInt(random(), 50, 2500);\n    byte bytes[] = new byte[num];\n    random().nextBytes(bytes);\n    for (int i = 0; i < bytes.length; i++) {\n      output.writeByte(bytes[i]);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n    // seek to a random spot shouldnt impact slicing.\n    input.seek(TestUtil.nextLong(random(), 0, input.length()));\n    for (int i = 0; i < num; i += 16) {\n      IndexInput slice1 = input.slice(\"slice1\", i, num-i);\n      assertEquals(0, slice1.getFilePointer());\n      assertEquals(num-i, slice1.length());\n      \n      // seek to a random spot shouldnt impact slicing.\n      slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n      for (int j = 0; j < slice1.length(); j += 16) {\n        IndexInput slice2 = slice1.slice(\"slice2\", j, num-i-j);\n        assertEquals(0, slice2.getFilePointer());\n        assertEquals(num-i-j, slice2.length());\n        byte data[] = new byte[num];\n        System.arraycopy(bytes, 0, data, 0, i+j);\n        if (random().nextBoolean()) {\n          // read the bytes for this slice-of-slice\n          slice2.readBytes(data, i+j, num-i-j);\n        } else {\n          // seek to a random spot in between, read some, seek back and read the rest\n          long seek = TestUtil.nextLong(random(), 0, slice2.length());\n          slice2.seek(seek);\n          slice2.readBytes(data, (int)(i+j+seek), (int)(num-i-j-seek));\n          slice2.seek(0);\n          slice2.readBytes(data, i+j, (int)seek);\n        }\n        assertArrayEquals(bytes, data);\n      }\n    }\n    \n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae","date":1429483620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","sourceNew":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"));\n    IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n    final int num;\n    if (TEST_NIGHTLY) {\n      num = TestUtil.nextInt(random(), 250, 2500);\n    } else {\n      num = TestUtil.nextInt(random(), 50, 250);\n    }\n    byte bytes[] = new byte[num];\n    random().nextBytes(bytes);\n    for (int i = 0; i < bytes.length; i++) {\n      output.writeByte(bytes[i]);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n    // seek to a random spot shouldnt impact slicing.\n    input.seek(TestUtil.nextLong(random(), 0, input.length()));\n    for (int i = 0; i < num; i += 16) {\n      IndexInput slice1 = input.slice(\"slice1\", i, num-i);\n      assertEquals(0, slice1.getFilePointer());\n      assertEquals(num-i, slice1.length());\n      \n      // seek to a random spot shouldnt impact slicing.\n      slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n      for (int j = 0; j < slice1.length(); j += 16) {\n        IndexInput slice2 = slice1.slice(\"slice2\", j, num-i-j);\n        assertEquals(0, slice2.getFilePointer());\n        assertEquals(num-i-j, slice2.length());\n        byte data[] = new byte[num];\n        System.arraycopy(bytes, 0, data, 0, i+j);\n        if (random().nextBoolean()) {\n          // read the bytes for this slice-of-slice\n          slice2.readBytes(data, i+j, num-i-j);\n        } else {\n          // seek to a random spot in between, read some, seek back and read the rest\n          long seek = TestUtil.nextLong(random(), 0, slice2.length());\n          slice2.seek(seek);\n          slice2.readBytes(data, (int)(i+j+seek), (int)(num-i-j-seek));\n          slice2.seek(0);\n          slice2.readBytes(data, i+j, (int)seek);\n        }\n        assertArrayEquals(bytes, data);\n      }\n    }\n    \n    input.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"));\n    IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n    int num = TestUtil.nextInt(random(), 50, 2500);\n    byte bytes[] = new byte[num];\n    random().nextBytes(bytes);\n    for (int i = 0; i < bytes.length; i++) {\n      output.writeByte(bytes[i]);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n    // seek to a random spot shouldnt impact slicing.\n    input.seek(TestUtil.nextLong(random(), 0, input.length()));\n    for (int i = 0; i < num; i += 16) {\n      IndexInput slice1 = input.slice(\"slice1\", i, num-i);\n      assertEquals(0, slice1.getFilePointer());\n      assertEquals(num-i, slice1.length());\n      \n      // seek to a random spot shouldnt impact slicing.\n      slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n      for (int j = 0; j < slice1.length(); j += 16) {\n        IndexInput slice2 = slice1.slice(\"slice2\", j, num-i-j);\n        assertEquals(0, slice2.getFilePointer());\n        assertEquals(num-i-j, slice2.length());\n        byte data[] = new byte[num];\n        System.arraycopy(bytes, 0, data, 0, i+j);\n        if (random().nextBoolean()) {\n          // read the bytes for this slice-of-slice\n          slice2.readBytes(data, i+j, num-i-j);\n        } else {\n          // seek to a random spot in between, read some, seek back and read the rest\n          long seek = TestUtil.nextLong(random(), 0, slice2.length());\n          slice2.seek(seek);\n          slice2.readBytes(data, (int)(i+j+seek), (int)(num-i-j-seek));\n          slice2.seek(0);\n          slice2.readBytes(data, i+j, (int)seek);\n        }\n        assertArrayEquals(bytes, data);\n      }\n    }\n    \n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","sourceNew":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"))) {\n      IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n      final int num;\n      if (TEST_NIGHTLY) {\n        num = TestUtil.nextInt(random(), 250, 2500);\n      } else {\n        num = TestUtil.nextInt(random(), 50, 250);\n      }\n      byte bytes[] = new byte[num];\n      random().nextBytes(bytes);\n      for (int i = 0; i < bytes.length; i++) {\n        output.writeByte(bytes[i]);\n      }\n      output.close();\n\n      IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n      // seek to a random spot shouldnt impact slicing.\n      input.seek(TestUtil.nextLong(random(), 0, input.length()));\n      for (int i = 0; i < num; i += 16) {\n        IndexInput slice1 = input.slice(\"slice1\", i, num - i);\n        assertEquals(0, slice1.getFilePointer());\n        assertEquals(num - i, slice1.length());\n\n        // seek to a random spot shouldnt impact slicing.\n        slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n        for (int j = 0; j < slice1.length(); j += 16) {\n          IndexInput slice2 = slice1.slice(\"slice2\", j, num - i - j);\n          assertEquals(0, slice2.getFilePointer());\n          assertEquals(num - i - j, slice2.length());\n          byte data[] = new byte[num];\n          System.arraycopy(bytes, 0, data, 0, i + j);\n          if (random().nextBoolean()) {\n            // read the bytes for this slice-of-slice\n            slice2.readBytes(data, i + j, num - i - j);\n          } else {\n            // seek to a random spot in between, read some, seek back and read the rest\n            long seek = TestUtil.nextLong(random(), 0, slice2.length());\n            slice2.seek(seek);\n            slice2.readBytes(data, (int) (i + j + seek), (int) (num - i - j - seek));\n            slice2.seek(0);\n            slice2.readBytes(data, i + j, (int) seek);\n          }\n          assertArrayEquals(bytes, data);\n        }\n      }\n\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"));\n    IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n    final int num;\n    if (TEST_NIGHTLY) {\n      num = TestUtil.nextInt(random(), 250, 2500);\n    } else {\n      num = TestUtil.nextInt(random(), 50, 250);\n    }\n    byte bytes[] = new byte[num];\n    random().nextBytes(bytes);\n    for (int i = 0; i < bytes.length; i++) {\n      output.writeByte(bytes[i]);\n    }\n    output.close();\n    \n    IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n    // seek to a random spot shouldnt impact slicing.\n    input.seek(TestUtil.nextLong(random(), 0, input.length()));\n    for (int i = 0; i < num; i += 16) {\n      IndexInput slice1 = input.slice(\"slice1\", i, num-i);\n      assertEquals(0, slice1.getFilePointer());\n      assertEquals(num-i, slice1.length());\n      \n      // seek to a random spot shouldnt impact slicing.\n      slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n      for (int j = 0; j < slice1.length(); j += 16) {\n        IndexInput slice2 = slice1.slice(\"slice2\", j, num-i-j);\n        assertEquals(0, slice2.getFilePointer());\n        assertEquals(num-i-j, slice2.length());\n        byte data[] = new byte[num];\n        System.arraycopy(bytes, 0, data, 0, i+j);\n        if (random().nextBoolean()) {\n          // read the bytes for this slice-of-slice\n          slice2.readBytes(data, i+j, num-i-j);\n        } else {\n          // seek to a random spot in between, read some, seek back and read the rest\n          long seek = TestUtil.nextLong(random(), 0, slice2.length());\n          slice2.seek(seek);\n          slice2.readBytes(data, (int)(i+j+seek), (int)(num-i-j-seek));\n          slice2.seek(0);\n          slice2.readBytes(data, i+j, (int)seek);\n        }\n        assertArrayEquals(bytes, data);\n      }\n    }\n    \n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testSliceOfSlice().mjava","sourceNew":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"))) {\n      IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n      final int num;\n      if (TEST_NIGHTLY) {\n        num = TestUtil.nextInt(random(), 250, 2500);\n      } else {\n        num = TestUtil.nextInt(random(), 50, 250);\n      }\n      byte bytes[] = new byte[num];\n      random().nextBytes(bytes);\n      for (int i = 0; i < bytes.length; i++) {\n        output.writeByte(bytes[i]);\n      }\n      output.close();\n\n      IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n      // seek to a random spot should not impact slicing.\n      input.seek(TestUtil.nextLong(random(), 0, input.length()));\n      for (int i = 0; i < num; i += 16) {\n        IndexInput slice1 = input.slice(\"slice1\", i, num - i);\n        assertEquals(0, slice1.getFilePointer());\n        assertEquals(num - i, slice1.length());\n\n        // seek to a random spot shouldnt impact slicing.\n        slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n        for (int j = 0; j < slice1.length(); j += 16) {\n          IndexInput slice2 = slice1.slice(\"slice2\", j, num - i - j);\n          assertEquals(0, slice2.getFilePointer());\n          assertEquals(num - i - j, slice2.length());\n          byte data[] = new byte[num];\n          System.arraycopy(bytes, 0, data, 0, i + j);\n          if (random().nextBoolean()) {\n            // read the bytes for this slice-of-slice\n            slice2.readBytes(data, i + j, num - i - j);\n          } else {\n            // seek to a random spot in between, read some, seek back and read the rest\n            long seek = TestUtil.nextLong(random(), 0, slice2.length());\n            slice2.seek(seek);\n            slice2.readBytes(data, (int) (i + j + seek), (int) (num - i - j - seek));\n            slice2.seek(0);\n            slice2.readBytes(data, i + j, (int) seek);\n          }\n          assertArrayEquals(bytes, data);\n        }\n      }\n\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** try to stress slices of slices */\n  public void testSliceOfSlice() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"sliceOfSlice\"))) {\n      IndexOutput output = dir.createOutput(\"bytes\", newIOContext(random()));\n      final int num;\n      if (TEST_NIGHTLY) {\n        num = TestUtil.nextInt(random(), 250, 2500);\n      } else {\n        num = TestUtil.nextInt(random(), 50, 250);\n      }\n      byte bytes[] = new byte[num];\n      random().nextBytes(bytes);\n      for (int i = 0; i < bytes.length; i++) {\n        output.writeByte(bytes[i]);\n      }\n      output.close();\n\n      IndexInput input = dir.openInput(\"bytes\", newIOContext(random()));\n      // seek to a random spot shouldnt impact slicing.\n      input.seek(TestUtil.nextLong(random(), 0, input.length()));\n      for (int i = 0; i < num; i += 16) {\n        IndexInput slice1 = input.slice(\"slice1\", i, num - i);\n        assertEquals(0, slice1.getFilePointer());\n        assertEquals(num - i, slice1.length());\n\n        // seek to a random spot shouldnt impact slicing.\n        slice1.seek(TestUtil.nextLong(random(), 0, slice1.length()));\n        for (int j = 0; j < slice1.length(); j += 16) {\n          IndexInput slice2 = slice1.slice(\"slice2\", j, num - i - j);\n          assertEquals(0, slice2.getFilePointer());\n          assertEquals(num - i - j, slice2.length());\n          byte data[] = new byte[num];\n          System.arraycopy(bytes, 0, data, 0, i + j);\n          if (random().nextBoolean()) {\n            // read the bytes for this slice-of-slice\n            slice2.readBytes(data, i + j, num - i - j);\n          } else {\n            // seek to a random spot in between, read some, seek back and read the rest\n            long seek = TestUtil.nextLong(random(), 0, slice2.length());\n            slice2.seek(seek);\n            slice2.readBytes(data, (int) (i + j + seek), (int) (num - i - j - seek));\n            slice2.seek(0);\n            slice2.readBytes(data, i + j, (int) seek);\n          }\n          assertArrayEquals(bytes, data);\n        }\n      }\n\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5be9f64a375fac229234302f36485c63d1230840":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["5be9f64a375fac229234302f36485c63d1230840"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"5be9f64a375fac229234302f36485c63d1230840":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5be9f64a375fac229234302f36485c63d1230840"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}