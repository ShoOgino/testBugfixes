{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#executeAll(int,int,List[#-extends-PerReplicaCallable],ExecutorService).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#executeAll(int,int,List[#-extends-PerReplicaCallable],ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  public static List<String> executeAll(int expectedVersion, int maxWaitSecs, List<? extends PerReplicaCallable> concurrentTasks, ExecutorService parallelExecutor) throws InterruptedException {\n    List<Future<Boolean>> results =\n        parallelExecutor.invokeAll(concurrentTasks, maxWaitSecs, TimeUnit.SECONDS);\n\n    // determine whether all replicas have the update\n    List<String> failedList = null; // lazily init'd\n    for (int f = 0; f < results.size(); f++) {\n      Boolean success = false;\n      Future<Boolean> next = results.get(f);\n      if (next.isDone() && !next.isCancelled()) {\n        // looks to have finished, but need to check if it succeeded\n        try {\n          success = next.get();\n        } catch (ExecutionException e) {\n          // shouldn't happen since we checked isCancelled\n        }\n      }\n\n      if (!success) {\n        String coreUrl = concurrentTasks.get(f).coreUrl;\n        log.warn(\"Core \" + coreUrl + \"could not get the expected version \" + expectedVersion);\n        if (failedList == null) failedList = new ArrayList<>();\n        failedList.add(coreUrl);\n      }\n    }\n    return failedList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#executeAll(int,int,List[#-extends-PerReplicaCallable],ExecutorService).mjava","sourceNew":null,"sourceOld":"  public static List<String> executeAll(int expectedVersion, int maxWaitSecs, List<? extends PerReplicaCallable> concurrentTasks, ExecutorService parallelExecutor) throws InterruptedException {\n    List<Future<Boolean>> results =\n        parallelExecutor.invokeAll(concurrentTasks, maxWaitSecs, TimeUnit.SECONDS);\n\n    // determine whether all replicas have the update\n    List<String> failedList = null; // lazily init'd\n    for (int f = 0; f < results.size(); f++) {\n      Boolean success = false;\n      Future<Boolean> next = results.get(f);\n      if (next.isDone() && !next.isCancelled()) {\n        // looks to have finished, but need to check if it succeeded\n        try {\n          success = next.get();\n        } catch (ExecutionException e) {\n          // shouldn't happen since we checked isCancelled\n        }\n      }\n\n      if (!success) {\n        String coreUrl = concurrentTasks.get(f).coreUrl;\n        log.warn(\"Core \" + coreUrl + \"could not get the expected version \" + expectedVersion);\n        if (failedList == null) failedList = new ArrayList<>();\n        failedList.add(coreUrl);\n      }\n    }\n    return failedList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#executeAll(int,int,List[#-extends-PerReplicaCallable],ExecutorService).mjava","sourceNew":null,"sourceOld":"  public static List<String> executeAll(int expectedVersion, int maxWaitSecs, List<? extends PerReplicaCallable> concurrentTasks, ExecutorService parallelExecutor) throws InterruptedException {\n    List<Future<Boolean>> results =\n        parallelExecutor.invokeAll(concurrentTasks, maxWaitSecs, TimeUnit.SECONDS);\n\n    // determine whether all replicas have the update\n    List<String> failedList = null; // lazily init'd\n    for (int f = 0; f < results.size(); f++) {\n      Boolean success = false;\n      Future<Boolean> next = results.get(f);\n      if (next.isDone() && !next.isCancelled()) {\n        // looks to have finished, but need to check if it succeeded\n        try {\n          success = next.get();\n        } catch (ExecutionException e) {\n          // shouldn't happen since we checked isCancelled\n        }\n      }\n\n      if (!success) {\n        String coreUrl = concurrentTasks.get(f).coreUrl;\n        log.warn(\"Core \" + coreUrl + \"could not get the expected version \" + expectedVersion);\n        if (failedList == null) failedList = new ArrayList<>();\n        failedList.add(coreUrl);\n      }\n    }\n    return failedList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}