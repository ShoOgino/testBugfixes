{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","commits":[{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void deleteFilesInAdvance(Directory indexDir, String indexDirPath, long usableDiskSpace, long totalSpaceRequired) throws IOException {\n    long actualSpaceReqd = totalSpaceRequired;\n    List<String> filesTobeDeleted = new ArrayList<>();\n    long clearedSpace = 0;\n    //go through each file to check if this needs to be deleted\n    for (String f : indexDir.listAll()) {\n      for (Map<String, Object> fileInfo : filesToDownload) {\n        if (f.equals(fileInfo.get(NAME))) {\n          String filename = (String) fileInfo.get(NAME);\n          long size = (Long) fileInfo.get(SIZE);\n          CompareResult compareResult = compareFile(indexDir, filename, size, (Long) fileInfo.get(CHECKSUM));\n          if (!compareResult.equal || filesToAlwaysDownloadIfNoChecksums(f, size, compareResult)) {\n            filesTobeDeleted.add(f);\n            clearedSpace += size;\n          } else {\n            /*this file will not be downloaded*/\n            actualSpaceReqd -= size;\n          }\n        }\n      }\n    }\n    if (usableDiskSpace > getApproxTotalSpaceReqd(actualSpaceReqd)) {\n      // after considering the files actually available locally we really don't need to do any delete\n      return;\n    }\n    log.info(\"This disk does not have enough space to download the index from leader/master. So cleaning up the local index. \" +\n        \" This may lead to loss of data/or node if index replication fails in between\");\n    //now we should disable searchers and index writers because this core will not have all the required files\n    this.clearLocalIndexFirst = true;\n    this.solrCore.searchEnabled = false;\n    this.solrCore.indexEnabled = false;\n    solrCore.getDirectoryFactory().doneWithDirectory(indexDir);\n    solrCore.deleteNonSnapshotIndexFiles(indexDirPath);\n    this.solrCore.closeSearcher();\n    assert testWait.getAsBoolean();\n    solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(this.solrCore, false);\n    for (String f : filesTobeDeleted) {\n      try {\n        indexDir.deleteFile(f);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        //no problem , it was deleted by someone else\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","sourceNew":"  private void deleteFilesInAdvance(Directory indexDir, String indexDirPath, long usableDiskSpace, long totalSpaceRequired) throws IOException {\n    long actualSpaceReqd = totalSpaceRequired;\n    List<String> filesTobeDeleted = new ArrayList<>();\n    long clearedSpace = 0;\n    //go through each file to check if this needs to be deleted\n    for (String f : indexDir.listAll()) {\n      for (Map<String, Object> fileInfo : filesToDownload) {\n        if (f.equals(fileInfo.get(NAME))) {\n          String filename = (String) fileInfo.get(NAME);\n          long size = (Long) fileInfo.get(SIZE);\n          CompareResult compareResult = compareFile(indexDir, filename, size, (Long) fileInfo.get(CHECKSUM));\n          if (!compareResult.equal || filesToAlwaysDownloadIfNoChecksums(f, size, compareResult)) {\n            filesTobeDeleted.add(f);\n            clearedSpace += size;\n          } else {\n            /*this file will not be downloaded*/\n            actualSpaceReqd -= size;\n          }\n        }\n      }\n    }\n    if (usableDiskSpace > getApproxTotalSpaceReqd(actualSpaceReqd)) {\n      // after considering the files actually available locally we really don't need to do any delete\n      return;\n    }\n    log.info(\"This disk does not have enough space to download the index from leader/master. So cleaning up the local index. \"\n        + \" This may lead to loss of data/or node if index replication fails in between\");\n    //now we should disable searchers and index writers because this core will not have all the required files\n    this.clearLocalIndexFirst = true;\n    this.solrCore.searchEnabled = false;\n    this.solrCore.indexEnabled = false;\n    solrCore.getDirectoryFactory().doneWithDirectory(indexDir);\n    solrCore.deleteNonSnapshotIndexFiles(indexDirPath);\n    this.solrCore.closeSearcher();\n    assert testWait.getAsBoolean();\n    solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(this.solrCore, false);\n    for (String f : filesTobeDeleted) {\n      try {\n        indexDir.deleteFile(f);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        //no problem , it was deleted by someone else\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteFilesInAdvance(Directory indexDir, String indexDirPath, long usableDiskSpace, long totalSpaceRequired) throws IOException {\n    long actualSpaceReqd = totalSpaceRequired;\n    List<String> filesTobeDeleted = new ArrayList<>();\n    long clearedSpace = 0;\n    //go through each file to check if this needs to be deleted\n    for (String f : indexDir.listAll()) {\n      for (Map<String, Object> fileInfo : filesToDownload) {\n        if (f.equals(fileInfo.get(NAME))) {\n          String filename = (String) fileInfo.get(NAME);\n          long size = (Long) fileInfo.get(SIZE);\n          CompareResult compareResult = compareFile(indexDir, filename, size, (Long) fileInfo.get(CHECKSUM));\n          if (!compareResult.equal || filesToAlwaysDownloadIfNoChecksums(f, size, compareResult)) {\n            filesTobeDeleted.add(f);\n            clearedSpace += size;\n          } else {\n            /*this file will not be downloaded*/\n            actualSpaceReqd -= size;\n          }\n        }\n      }\n    }\n    if (usableDiskSpace > getApproxTotalSpaceReqd(actualSpaceReqd)) {\n      // after considering the files actually available locally we really don't need to do any delete\n      return;\n    }\n    log.info(\"This disk does not have enough space to download the index from leader/master. So cleaning up the local index. \" +\n        \" This may lead to loss of data/or node if index replication fails in between\");\n    //now we should disable searchers and index writers because this core will not have all the required files\n    this.clearLocalIndexFirst = true;\n    this.solrCore.searchEnabled = false;\n    this.solrCore.indexEnabled = false;\n    solrCore.getDirectoryFactory().doneWithDirectory(indexDir);\n    solrCore.deleteNonSnapshotIndexFiles(indexDirPath);\n    this.solrCore.closeSearcher();\n    assert testWait.getAsBoolean();\n    solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(this.solrCore, false);\n    for (String f : filesTobeDeleted) {\n      try {\n        indexDir.deleteFile(f);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        //no problem , it was deleted by someone else\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#deleteFilesInAdvance(Directory,String,long,long).mjava","sourceNew":"  private void deleteFilesInAdvance(Directory indexDir, String indexDirPath, long usableDiskSpace, long totalSpaceRequired) throws IOException {\n    long actualSpaceReqd = totalSpaceRequired;\n    List<String> filesTobeDeleted = new ArrayList<>();\n    long clearedSpace = 0;\n    //go through each file to check if this needs to be deleted\n    for (String f : indexDir.listAll()) {\n      for (Map<String, Object> fileInfo : filesToDownload) {\n        if (f.equals(fileInfo.get(NAME))) {\n          String filename = (String) fileInfo.get(NAME);\n          long size = (Long) fileInfo.get(SIZE);\n          CompareResult compareResult = compareFile(indexDir, filename, size, (Long) fileInfo.get(CHECKSUM));\n          if (!compareResult.equal || filesToAlwaysDownloadIfNoChecksums(f, size, compareResult)) {\n            filesTobeDeleted.add(f);\n            clearedSpace += size;\n          } else {\n            /*this file will not be downloaded*/\n            actualSpaceReqd -= size;\n          }\n        }\n      }\n    }\n    if (usableDiskSpace > getApproxTotalSpaceReqd(actualSpaceReqd)) {\n      // after considering the files actually available locally we really don't need to do any delete\n      return;\n    }\n    log.info(\"This disk does not have enough space to download the index from leader. So cleaning up the local index. \"\n        + \" This may lead to loss of data/or node if index replication fails in between\");\n    //now we should disable searchers and index writers because this core will not have all the required files\n    this.clearLocalIndexFirst = true;\n    this.solrCore.searchEnabled = false;\n    this.solrCore.indexEnabled = false;\n    solrCore.getDirectoryFactory().doneWithDirectory(indexDir);\n    solrCore.deleteNonSnapshotIndexFiles(indexDirPath);\n    this.solrCore.closeSearcher();\n    assert testWait.getAsBoolean();\n    solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(this.solrCore, false);\n    for (String f : filesTobeDeleted) {\n      try {\n        indexDir.deleteFile(f);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        //no problem , it was deleted by someone else\n      }\n    }\n  }\n\n","sourceOld":"  private void deleteFilesInAdvance(Directory indexDir, String indexDirPath, long usableDiskSpace, long totalSpaceRequired) throws IOException {\n    long actualSpaceReqd = totalSpaceRequired;\n    List<String> filesTobeDeleted = new ArrayList<>();\n    long clearedSpace = 0;\n    //go through each file to check if this needs to be deleted\n    for (String f : indexDir.listAll()) {\n      for (Map<String, Object> fileInfo : filesToDownload) {\n        if (f.equals(fileInfo.get(NAME))) {\n          String filename = (String) fileInfo.get(NAME);\n          long size = (Long) fileInfo.get(SIZE);\n          CompareResult compareResult = compareFile(indexDir, filename, size, (Long) fileInfo.get(CHECKSUM));\n          if (!compareResult.equal || filesToAlwaysDownloadIfNoChecksums(f, size, compareResult)) {\n            filesTobeDeleted.add(f);\n            clearedSpace += size;\n          } else {\n            /*this file will not be downloaded*/\n            actualSpaceReqd -= size;\n          }\n        }\n      }\n    }\n    if (usableDiskSpace > getApproxTotalSpaceReqd(actualSpaceReqd)) {\n      // after considering the files actually available locally we really don't need to do any delete\n      return;\n    }\n    log.info(\"This disk does not have enough space to download the index from leader/master. So cleaning up the local index. \"\n        + \" This may lead to loss of data/or node if index replication fails in between\");\n    //now we should disable searchers and index writers because this core will not have all the required files\n    this.clearLocalIndexFirst = true;\n    this.solrCore.searchEnabled = false;\n    this.solrCore.indexEnabled = false;\n    solrCore.getDirectoryFactory().doneWithDirectory(indexDir);\n    solrCore.deleteNonSnapshotIndexFiles(indexDirPath);\n    this.solrCore.closeSearcher();\n    assert testWait.getAsBoolean();\n    solrCore.getUpdateHandler().getSolrCoreState().closeIndexWriter(this.solrCore, false);\n    for (String f : filesTobeDeleted) {\n      try {\n        indexDir.deleteFile(f);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        //no problem , it was deleted by someone else\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}