{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","commits":[{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Extract all child documents from parent that are saved in fields */\n  private void flattenLabelled(List<SolrInputDocument> unwrappedDocs, SolrInputDocument currentDoc, boolean isRoot) {\n    for (SolrInputField field: currentDoc.values()) {\n      Object value = field.getFirstValue();\n      // check if value is a childDocument\n      if (value instanceof SolrInputDocument) {\n        Object val = field.getValue();\n        if (!(val instanceof Collection)) {\n          flattenLabelled(unwrappedDocs, ((SolrInputDocument) val));\n          continue;\n        }\n        Collection<SolrInputDocument> childrenList = ((Collection) val);\n        for (SolrInputDocument child : childrenList) {\n          flattenLabelled(unwrappedDocs, child);\n        }\n      }\n    }\n\n    if (!isRoot) unwrappedDocs.add(currentDoc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Extract all child documents from parent that are saved in fields */\n  private void flattenLabelled(List<SolrInputDocument> unwrappedDocs, SolrInputDocument currentDoc, boolean isRoot) {\n    for (SolrInputField field: currentDoc.values()) {\n      Object value = field.getFirstValue();\n      // check if value is a childDocument\n      if (value instanceof SolrInputDocument) {\n        Object val = field.getValue();\n        if (!(val instanceof Collection)) {\n          flattenLabelled(unwrappedDocs, ((SolrInputDocument) val));\n          continue;\n        }\n        Collection<SolrInputDocument> childrenList = ((Collection) val);\n        for (SolrInputDocument child : childrenList) {\n          flattenLabelled(unwrappedDocs, child);\n        }\n      }\n    }\n\n    if (!isRoot) unwrappedDocs.add(currentDoc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Extract all child documents from parent that are saved in fields */\n  private void flattenLabelled(List<SolrInputDocument> unwrappedDocs, SolrInputDocument currentDoc, boolean isRoot) {\n    for (SolrInputField field: currentDoc.values()) {\n      Object value = field.getFirstValue();\n      // check if value is a childDocument\n      if (value instanceof SolrInputDocument) {\n        Object val = field.getValue();\n        if (!(val instanceof Collection)) {\n          flattenLabelled(unwrappedDocs, ((SolrInputDocument) val));\n          continue;\n        }\n        Collection<SolrInputDocument> childrenList = ((Collection) val);\n        for (SolrInputDocument child : childrenList) {\n          flattenLabelled(unwrappedDocs, child);\n        }\n      }\n    }\n\n    if (!isRoot) unwrappedDocs.add(currentDoc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#flattenLabelled(List[SolrInputDocument],SolrInputDocument,boolean).mjava","sourceNew":"  /** Extract all child documents from parent that are saved in fields */\n  private void flattenLabelled(List<SolrInputDocument> unwrappedDocs, SolrInputDocument currentDoc, boolean isRoot) {\n    for (SolrInputField field: currentDoc.values()) {\n      Object value = field.getFirstValue();\n      // check if value is a childDocument\n      if (value instanceof SolrInputDocument) {\n        Object val = field.getValue();\n        if (!(val instanceof Collection)) {\n          flattenLabelled(unwrappedDocs, ((SolrInputDocument) val));\n          continue;\n        }\n        @SuppressWarnings({\"unchecked\"})\n        Collection<SolrInputDocument> childrenList = ((Collection) val);\n        for (SolrInputDocument child : childrenList) {\n          flattenLabelled(unwrappedDocs, child);\n        }\n      }\n    }\n\n    if (!isRoot) unwrappedDocs.add(currentDoc);\n  }\n\n","sourceOld":"  /** Extract all child documents from parent that are saved in fields */\n  private void flattenLabelled(List<SolrInputDocument> unwrappedDocs, SolrInputDocument currentDoc, boolean isRoot) {\n    for (SolrInputField field: currentDoc.values()) {\n      Object value = field.getFirstValue();\n      // check if value is a childDocument\n      if (value instanceof SolrInputDocument) {\n        Object val = field.getValue();\n        if (!(val instanceof Collection)) {\n          flattenLabelled(unwrappedDocs, ((SolrInputDocument) val));\n          continue;\n        }\n        Collection<SolrInputDocument> childrenList = ((Collection) val);\n        for (SolrInputDocument child : childrenList) {\n          flattenLabelled(unwrappedDocs, child);\n        }\n      }\n    }\n\n    if (!isRoot) unwrappedDocs.add(currentDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","018a36ff4088cb91ab12cbe44f696d81d1fadd77","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}