{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}