{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicIndexReader,Entry,boolean).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicIndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicIndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}