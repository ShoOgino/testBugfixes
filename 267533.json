{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","commits":[{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      Map map = (Map) o;\n      if (map.size() != 1) {\n        throwExp(m, \"nodeset must only have one and only one key\");\n      }\n      String key = (String) map.keySet().iterator().next();\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      List l = (List) o;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      Map map = (Map) o;\n      if (map.size() != 1) {\n        throwExp(m, \"nodeset must only have one and only one key\");\n      }\n      String key = (String) map.keySet().iterator().next();\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      List l = (List) o;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","sourceNew":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      String key = validateObjectInNodeset(m, (Map) o);\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      List l = (List) o;\n      if(l.size()<2) throwExp(m, \"nodeset [] must have atleast 2 items\");\n      if( checkMapArray(l, m)) return true;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      Map map = (Map) o;\n      if (map.size() != 1) {\n        throwExp(m, \"nodeset must only have one and only one key\");\n      }\n      String key = (String) map.keySet().iterator().next();\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      List l = (List) o;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","sourceNew":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      String key = validateObjectInNodeset(m, (Map) o);\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List) o;\n      if(l.size()<2) throwExp(m, \"nodeset [] must have atleast 2 items\");\n      if( checkMapArray(l, m)) return true;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      String key = validateObjectInNodeset(m, (Map) o);\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      List l = (List) o;\n      if(l.size()<2) throwExp(m, \"nodeset [] must have atleast 2 items\");\n      if( checkMapArray(l, m)) return true;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseNodeset(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private boolean parseNodeset(Map<String, Object> m) {\n    if (!m.containsKey(NODESET)) return false;\n    Object o = m.get(NODESET);\n    if (o instanceof Map) {\n      String key = validateObjectInNodeset(m, (Map) o);\n      parseCondition(key, o, m);\n    } else if (o instanceof List) {\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List) o;\n      if(l.size()<2) throwExp(m, \"nodeset [] must have atleast 2 items\");\n      if( checkMapArray(l, m)) return true;\n      for (Object it : l) {\n        if (it instanceof String) continue;\n        else throwExp(m, \"nodeset :[]must have only string values\");\n      }\n      parseCondition(\"node\", o, m);\n    } else {\n      throwExp(m, \"invalid value for nodeset, must be an object or a list of String\");\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"527adea7ce767368d7317339023e18e39702132e":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["a7194afdfe9b45ca331c1cd5001cd9766688688b","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}