{"path":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","commits":[{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if(jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \"+ name ,e1) ;\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\"+handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name,buf.array(),buf.arrayOffset(),buf.limit(), defaultDomain);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4af27a125c34742efbdda444634c211cf362d1e2","date":1419101033,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","sourceNew":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if(jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n          if(buf==null) throw new ClassNotFoundException(\"class not found in loaded jar\"+ name ) ;\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \"+ name ,e1) ;\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\"+handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name,buf.array(),buf.arrayOffset(),buf.limit(), defaultDomain);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if(jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \"+ name ,e1) ;\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\"+handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name,buf.array(),buf.arrayOffset(),buf.limit(), defaultDomain);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9793ccb9bd91c55b6b02e491778569200a781488","date":1423662803,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","sourceNew":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if (jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n          if (buf == null) throw new ClassNotFoundException(\"class not found in loaded jar\" + name);\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \" + name, e1);\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if(jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n          if(buf==null) throw new ClassNotFoundException(\"class not found in loaded jar\"+ name ) ;\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \"+ name ,e1) ;\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\"+handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name,buf.array(),buf.arrayOffset(),buf.limit(), defaultDomain);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if (jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n          if (buf == null) throw new ClassNotFoundException(\"class not found in loaded jar\" + name);\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \" + name, e1);\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers.MemClassLoader#findClass(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n      try {\n        return super.findClass(name);\n      } catch (ClassNotFoundException e) {\n        String path = name.replace('.', '/').concat(\".class\");\n        ByteBuffer buf = null;\n        try {\n          if (jarContent == null) checkJarAvailable();\n          buf = jarContent.jar.getFileContent(path);\n          if (buf == null) throw new ClassNotFoundException(\"class not found in loaded jar\" + name);\n        } catch (IOException e1) {\n          throw new ClassNotFoundException(\"class not found \" + name, e1);\n\n        }\n\n        ProtectionDomain defaultDomain = null;\n\n        //using the default protection domain, with no permissions\n        try {\n          defaultDomain = new ProtectionDomain(new CodeSource(new URL(\"http://localhost/.system/blob/\" + handlerWrapper.lib), (Certificate[]) null),\n              null);\n        } catch (MalformedURLException e1) {\n          //should not happen\n        }\n        return defineClass(name, buf.array(), buf.arrayOffset(), buf.limit(), defaultDomain);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9793ccb9bd91c55b6b02e491778569200a781488","9aea0485ecacb6734c17da2d02569816c23a69c1"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4af27a125c34742efbdda444634c211cf362d1e2":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["9793ccb9bd91c55b6b02e491778569200a781488"],"9793ccb9bd91c55b6b02e491778569200a781488":["4af27a125c34742efbdda444634c211cf362d1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["4af27a125c34742efbdda444634c211cf362d1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"4af27a125c34742efbdda444634c211cf362d1e2":["9793ccb9bd91c55b6b02e491778569200a781488"],"9793ccb9bd91c55b6b02e491778569200a781488":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}