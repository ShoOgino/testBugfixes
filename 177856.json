{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (needsScores) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, needsScores, boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (needsScores) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, needsScores, boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bd96ba16cfe2b279f80294262f9fe3ca36c0653","date":1513621981,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (perReaderTermState == null)\n      throw new IllegalStateException(\"TermQuery must be rewritten before use\");\n    if (perReaderTermState.wasBuiltFor(searcher.getTopReaderContext()) == false)\n      throw new IllegalStateException(\"TermQuery was built against a different IndexReader\");\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, perReaderTermState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f0e950c5ec69488d15ff74a134c53fed3bb6197","date":1513622497,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    if (perReaderTermState == null)\n      throw new IllegalStateException(\"TermQuery must be rewritten before use\");\n    if (perReaderTermState.wasBuiltFor(searcher.getTopReaderContext()) == false)\n      throw new IllegalStateException(\"TermQuery was built against a different IndexReader\");\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, perReaderTermState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStates termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      termState = TermStates.build(context, term, scoreMode.needsScores());\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStates termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      termState = TermStates.build(context, term, scoreMode.needsScores());\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      if (scoreMode.needsScores()) {\n        // make TermQuery single-pass if we don't have a PRTS or if the context\n        // differs!\n        termState = TermContext.build(context, term);\n      } else {\n        // do not compute the term state, this will help save seeks in the terms\n        // dict on segments that have a cache entry for this query\n        termState = null;\n      }\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStates termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      termState = TermStates.build(context, term, scoreMode.needsScores());\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode, boost, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermStates termState;\n    if (perReaderTermState == null\n        || perReaderTermState.wasBuiltFor(context) == false) {\n      termState = TermStates.build(context, term, scoreMode.needsScores());\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n\n    return new TermWeight(searcher, scoreMode.needsScores(), boost, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f0e950c5ec69488d15ff74a134c53fed3bb6197":["2bd96ba16cfe2b279f80294262f9fe3ca36c0653"],"b94236357aaa22b76c10629851fe4e376e0cea82":["2f0e950c5ec69488d15ff74a134c53fed3bb6197","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["2f0e950c5ec69488d15ff74a134c53fed3bb6197"],"2bd96ba16cfe2b279f80294262f9fe3ca36c0653":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"2f0e950c5ec69488d15ff74a134c53fed3bb6197":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"b94236357aaa22b76c10629851fe4e376e0cea82":["622a708571e534680618b3c5e0c28ac539a47776"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2bd96ba16cfe2b279f80294262f9fe3ca36c0653":["2f0e950c5ec69488d15ff74a134c53fed3bb6197"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2bd96ba16cfe2b279f80294262f9fe3ca36c0653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}