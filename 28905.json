{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new ClassicSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new DefaultSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new ClassicSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new ClassicSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new ClassicSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    \n    search.setSimilarity(new ClassicSimilarity());\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    search.search(new BoostQuery(q, 100), new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score(), SCORE_COMP_THRESH);\n      }\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), .1f); // matches document #0\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE), .1f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(1, hits[0].doc);\n    Assert.assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = new BoostQuery(csrq(\"data\", \"A\", \"A\", T, T), 10f); // matches document #0\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery.Builder();\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq.build(), 1000).scoreDocs;\n    Assert.assertEquals(0, hits[0].doc);\n    Assert.assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["c9fb5f46e264daf5ba3860defe623a89d202dd87","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8a0e442f7b61f811680273b25da95994a724466":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}