{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanQuery srq1 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex1)));\n    SpanQuery srq2 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex2)));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n\n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanQuery srq1 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex1)));\n    SpanQuery srq2 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex2)));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n\n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanQuery srq1 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex1)));\n    SpanQuery srq2 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex2)));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n\n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanQuery srq1 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex1)));\n    SpanQuery srq2 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex2)));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n\n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanQuery srq1 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex1)));\n    SpanQuery srq2 = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(newTerm(regex2)));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n\n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}