{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","commits":[{"id":"284866683716f2dec31be6489f8f5d2432074d14","date":1431005603,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","pathOld":"/dev/null","sourceNew":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (FileReader fr = new FileReader(encryptionKey)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d757ce39e75479053df1fc9641acbe360e28376","date":1431020684,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","sourceNew":null,"sourceOld":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (FileReader fr = new FileReader(encryptionKey)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c771b7f862d3df7cfa7208b4f79ac658406d6d15","date":1431023495,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","pathOld":"/dev/null","sourceNew":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e096dd0a4f62652c91292a2bfba8f08c4cdba94","date":1465245662,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","sourceNew":"  private Properties decryptPwd(Context context, Properties initProps) {\n    String encryptionKey = context.replaceTokens(initProps.getProperty(\"encryptKeyFile\"));\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","sourceOld":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Context,Properties).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","sourceNew":"  private Properties decryptPwd(Context context, Properties initProps) {\n    String encryptionKey = context.replaceTokens(initProps.getProperty(\"encryptKeyFile\"));\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","sourceOld":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/JdbcDataSource#decryptPwd(Properties).mjava","sourceNew":null,"sourceOld":"  private Properties decryptPwd(Properties initProps) {\n    String encryptionKey = initProps.getProperty(\"encryptKeyFile\");\n    if (initProps.getProperty(\"password\") != null && encryptionKey != null) {\n      // this means the password is encrypted and use the file to decode it\n      try {\n        try (Reader fr = new InputStreamReader(new FileInputStream(encryptionKey), UTF_8)) {\n          char[] chars = new char[100];//max 100 char password\n          int len = fr.read(chars);\n          if (len < 6)\n            throw new DataImportHandlerException(SEVERE, \"There should be a password of length 6 atleast \" + encryptionKey);\n          Properties props = new Properties();\n          props.putAll(initProps);\n          String password = null;\n          try {\n            password = CryptoKeys.decodeAES(initProps.getProperty(\"password\"), new String(chars, 0, len)).trim();\n          } catch (SolrException se) {\n            throw new DataImportHandlerException(SEVERE, \"Error decoding password\", se.getCause());\n          }\n          props.put(\"password\", password);\n          initProps = props;\n        }\n      } catch (IOException e) {\n        throw new DataImportHandlerException(SEVERE, \"Could not load encryptKeyFile  \" + encryptionKey);\n      }\n    }\n    return initProps;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d757ce39e75479053df1fc9641acbe360e28376":["284866683716f2dec31be6489f8f5d2432074d14"],"284866683716f2dec31be6489f8f5d2432074d14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"191128ac5b85671b1671e2c857437694283b6ebf":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","2e096dd0a4f62652c91292a2bfba8f08c4cdba94"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["9d757ce39e75479053df1fc9641acbe360e28376"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c771b7f862d3df7cfa7208b4f79ac658406d6d15","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"2e096dd0a4f62652c91292a2bfba8f08c4cdba94":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284866683716f2dec31be6489f8f5d2432074d14"],"9d757ce39e75479053df1fc9641acbe360e28376":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"284866683716f2dec31be6489f8f5d2432074d14":["9d757ce39e75479053df1fc9641acbe360e28376"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["2e096dd0a4f62652c91292a2bfba8f08c4cdba94","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}