{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","commits":[{"id":"ef06b0d1cc722b335e220aac1145914fe6362875","date":1381231524,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public TermWeightPayloadIterator(boolean withPayload) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.withPayload = withPayload;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(withPayload) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public TermWeightPayloadIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public TermWeightPayloadIterator(boolean withPayload) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.withPayload = withPayload;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(withPayload) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.DocumentInputIterator#DocumentInputIterator(boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/DocumentDictionary.TermWeightPayloadIterator#TermWeightPayloadIterator(boolean).mjava","sourceNew":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public DocumentInputIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","sourceOld":"    /**\n     * Creates an iterator over term, weight and payload fields from the lucene\n     * index. setting <code>withPayload</code> to false, implies an iterator\n     * over only term and weight.\n     */\n    public TermWeightPayloadIterator(boolean hasPayloads) throws IOException {\n      docCount = reader.maxDoc() - 1;\n      this.hasPayloads = hasPayloads;\n      currentPayload = null;\n      liveDocs = MultiFields.getLiveDocs(reader);\n      List<String> relevantFieldList;\n      if(hasPayloads) {\n        relevantFieldList = Arrays.asList(field, weightField, payloadField);\n      } else {\n        relevantFieldList = Arrays.asList(field, weightField);\n      }\n      this.relevantFields = new HashSet<>(relevantFieldList);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ef06b0d1cc722b335e220aac1145914fe6362875":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["ef06b0d1cc722b335e220aac1145914fe6362875"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef06b0d1cc722b335e220aac1145914fe6362875":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef06b0d1cc722b335e220aac1145914fe6362875"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}