{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","commits":[{"id":"d0f8ba65dfb38d7382b9dce6751c3060db644202","date":1389780711,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\"child query must only match non-parent docs\");\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b","date":1425145569,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\"child query must only match non-parent docs\");\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(\"child query must only match non-parent docs\");\n    indexSearcher.search(conjunctionQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    try {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n    }\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery conjunctionQuery = new BooleanQuery();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    try {\n      indexSearcher.search(conjunctionQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    try {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n    }\n  }\n\n","bugFix":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37efbd78d0e524f5adef66f50e9d435283012a15","date":1474745518,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"Child query must not match same docs with parent filter\"));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"Child query must not match same docs with parent filter\"));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"Child query must not match same docs with parent filter\"));\n  }\n\n","sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"child query must only match non-parent docs\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","date":1485769582,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":null,"sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"Child query must not match same docs with parent filter\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testAdvanceValidationForToParentBjq().mjava","sourceNew":null,"sourceOld":"  public void testAdvanceValidationForToParentBjq() throws Exception {\n    int randomChildNumber = getRandomChildNumber(0);\n    // we need to make advance method meet wrong document, so random child number\n    // in BJQ must be greater than child number in Boolean clause\n    int nextRandomChildNumber = getRandomChildNumber(randomChildNumber);\n    Query parentQueryWithRandomChild = createChildrenQueryWithOneParent(nextRandomChildNumber);\n    ToParentBlockJoinQuery blockJoinQuery = new ToParentBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, ScoreMode.None);\n    // advance() method is used by ConjunctionScorer, so we need to create Boolean conjunction query\n    BooleanQuery.Builder conjunctionQuery = new BooleanQuery.Builder();\n    WildcardQuery childQuery = new WildcardQuery(new Term(\"child\", createFieldValue(randomChildNumber)));\n    conjunctionQuery.add(new BooleanClause(childQuery, BooleanClause.Occur.MUST));\n    conjunctionQuery.add(new BooleanClause(blockJoinQuery, BooleanClause.Occur.MUST));\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(conjunctionQuery.build(), 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(\"Child query must not match same docs with parent filter\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0f8ba65dfb38d7382b9dce6751c3060db644202","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["05fe562aa248790944d43cdd478f512572835ba0","37efbd78d0e524f5adef66f50e9d435283012a15"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"05fe562aa248790944d43cdd478f512572835ba0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37efbd78d0e524f5adef66f50e9d435283012a15":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["05fe562aa248790944d43cdd478f512572835ba0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"05fe562aa248790944d43cdd478f512572835ba0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","37efbd78d0e524f5adef66f50e9d435283012a15","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"37efbd78d0e524f5adef66f50e9d435283012a15":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}