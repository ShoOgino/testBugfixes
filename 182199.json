{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","commits":[{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"/dev/null","sourceNew":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"/dev/null","sourceNew":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"/dev/null","sourceNew":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","sourceNew":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      if (coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION) != null) {\n        withCollectionsMap.put(coll.getName(), (String) coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION));\n      }\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","sourceOld":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","sourceNew":"  protected void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      if (coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION) != null) {\n        withCollectionsMap.put(coll.getName(), (String) coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION));\n      }\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","sourceOld":"  private void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      if (coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION) != null) {\n        withCollectionsMap.put(coll.getName(), (String) coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION));\n      }\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#readReplicaDetails().mjava","sourceNew":"  protected void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      if (coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION) != null) {\n        withCollectionsMap.put(coll.getName(), (String) coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION));\n      }\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<Replica>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<Replica>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<Replica> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add((Replica) replica.clone());\n      });\n    });\n  }\n\n","sourceOld":"  protected void readReplicaDetails() throws IOException {\n    ClusterStateProvider clusterStateProvider = getClusterStateProvider();\n    ClusterState clusterState = clusterStateProvider.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterStateProvider.getClusterState().getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      if (coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION) != null) {\n        withCollectionsMap.put(coll.getName(), (String) coll.getProperties().get(CollectionAdminParams.WITH_COLLECTION));\n      }\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["16a22f8085bb46850c91784e94f7714345011404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"16a22f8085bb46850c91784e94f7714345011404":["27639bb5e041490ce599065875dd2f6d8beef62a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"27639bb5e041490ce599065875dd2f6d8beef62a":["16a22f8085bb46850c91784e94f7714345011404"],"16a22f8085bb46850c91784e94f7714345011404":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}