{"path":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String,String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return new HdfsLockFactory(new Path(lockPath), getConf());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e50357e583524185222c1c691f5c333b34f7cbb2","date":1452268776,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      LOG.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      LOG.warn(\"No lockType configured, assuming 'hdfs'.\");\n      rawLockType = \"hdfs\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"hdfs\":\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      LOG.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '{}'.\", rawLockType);\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_HDFS;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_HDFS:\n        return HdfsLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"140be51d03394488536f4aacedace29f9b318347":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e50357e583524185222c1c691f5c333b34f7cbb2":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e50357e583524185222c1c691f5c333b34f7cbb2"]},"commit2Childs":{"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"e50357e583524185222c1c691f5c333b34f7cbb2":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["e50357e583524185222c1c691f5c333b34f7cbb2"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}