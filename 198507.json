{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","commits":[{"id":"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","date":1487166948,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    System.setProperty(\"solr.tests.metrics.directory\", \"false\");\n    System.setProperty(\"solr.tests.metrics.directoryDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n    // this is variable, depending on the codec and the number of created files\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e037d4cc589a2acd147ea27ffc29b19d595be53f","date":1488209547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","sourceNew":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","sourceOld":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    System.setProperty(\"solr.tests.metrics.directory\", \"false\");\n    System.setProperty(\"solr.tests.metrics.directoryDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n    // this is variable, depending on the codec and the number of created files\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"DIRECTORY\")).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","sourceNew":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    // INDEX.size, INDEX.sizeInBytes\n    assertEquals(2, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","sourceOld":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","sourceNew":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    // INDEX.size, INDEX.sizeInBytes\n    assertEquals(2, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","sourceOld":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexMetricsTest#testIndexNoMetrics().mjava","sourceNew":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    // INDEX.size, INDEX.sizeInBytes\n    assertEquals(2, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","sourceOld":"  @Test\n  public void testIndexNoMetrics() throws Exception {\n    System.setProperty(\"solr.tests.metrics.merge\", \"false\");\n    System.setProperty(\"solr.tests.metrics.mergeDetails\", \"false\");\n    initCore(\"solrconfig-indexmetrics.xml\", \"schema.xml\");\n\n    addDocs();\n\n    MetricRegistry registry = h.getCoreContainer().getMetricManager().registry(h.getCore().getCoreMetricManager().getRegistryName());\n    assertNotNull(registry);\n\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertEquals(0, metrics.entrySet().stream().filter(e -> e.getKey().startsWith(\"INDEX\")).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["e037d4cc589a2acd147ea27ffc29b19d595be53f"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e037d4cc589a2acd147ea27ffc29b19d595be53f","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"e037d4cc589a2acd147ea27ffc29b19d595be53f":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["e037d4cc589a2acd147ea27ffc29b19d595be53f"]},"commit2Childs":{"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["e037d4cc589a2acd147ea27ffc29b19d595be53f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"e037d4cc589a2acd147ea27ffc29b19d595be53f":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}