{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.getEmptyOutput() == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#finish().mjava","sourceNew":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","sourceOld":"  /** Returns final FST.  NOTE: this will return null if\n   *  nothing is accepted by the FST. */\n  public FST<T> finish() throws IOException {\n\n    // minimize nodes in the last word's suffix\n    compilePrevTail(1);\n    //System.out.println(\"finish: inputCount=\" + frontier[0].inputCount);\n    if (frontier[0].inputCount < minSuffixCount1 || frontier[0].inputCount < minSuffixCount2 || frontier[0].numArcs == 0) {\n      if (fst.emptyOutput == null) {\n        return null;\n      } else if (minSuffixCount1 > 0 || minSuffixCount2 > 0) {\n        // empty string got pruned\n        return null;\n      } else {\n        fst.finish(compileNode(frontier[0]).address);\n        //System.out.println(\"compile addr = \" + fst.getStartNode());\n        return fst;\n      }\n    } else {\n      if (minSuffixCount2 != 0) {\n        compileAllTargets(frontier[0]);\n      }\n      //System.out.println(\"NOW: \" + frontier[0].numArcs);\n      fst.finish(compileNode(frontier[0]).address);\n    }\n    \n    return fst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}