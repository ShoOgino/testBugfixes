{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","commits":[{"id":"a6fe6699bcc60bb2640032c2682f07a108b1f757","date":1516148439,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n\n    DistanceEvaluator.DistanceType type = null;\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    if(namedParams.size() > 0) {\n      if (namedParams.size() > 1) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      StreamExpressionNamedParameter namedParameter = namedParams.get(0);\n      String name = namedParameter.getName();\n      if (!name.equalsIgnoreCase(\"distance\")) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      String typeParam = namedParameter.getParameter().toString().trim();\n      type= DistanceEvaluator.DistanceType.valueOf(typeParam);\n    } else {\n      type = DistanceEvaluator.DistanceType.euclidean;\n    }\n\n    if (type.equals(DistanceEvaluator.DistanceType.euclidean)) {\n      distanceMeasure = new EuclideanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.manhattan)) {\n      distanceMeasure = new ManhattanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.canberra)) {\n      distanceMeasure = new CanberraDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.earthMovers)) {\n      distanceMeasure = new EarthMoversDistance();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n\n    DistanceEvaluator.DistanceType type = null;\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    if(namedParams.size() > 0) {\n      if (namedParams.size() > 1) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      StreamExpressionNamedParameter namedParameter = namedParams.get(0);\n      String name = namedParameter.getName();\n      if (!name.equalsIgnoreCase(\"distance\")) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      String typeParam = namedParameter.getParameter().toString().trim();\n      type= DistanceEvaluator.DistanceType.valueOf(typeParam);\n    } else {\n      type = DistanceEvaluator.DistanceType.euclidean;\n    }\n\n    if (type.equals(DistanceEvaluator.DistanceType.euclidean)) {\n      distanceMeasure = new EuclideanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.manhattan)) {\n      distanceMeasure = new ManhattanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.canberra)) {\n      distanceMeasure = new CanberraDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.earthMovers)) {\n      distanceMeasure = new EarthMoversDistance();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d0b4707f3bab526e78877bedeebf53368dbc3d7","date":1524706692,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n  }\n\n","sourceOld":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n\n    DistanceEvaluator.DistanceType type = null;\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    if(namedParams.size() > 0) {\n      if (namedParams.size() > 1) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      StreamExpressionNamedParameter namedParameter = namedParams.get(0);\n      String name = namedParameter.getName();\n      if (!name.equalsIgnoreCase(\"distance\")) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      String typeParam = namedParameter.getParameter().toString().trim();\n      type= DistanceEvaluator.DistanceType.valueOf(typeParam);\n    } else {\n      type = DistanceEvaluator.DistanceType.euclidean;\n    }\n\n    if (type.equals(DistanceEvaluator.DistanceType.euclidean)) {\n      distanceMeasure = new EuclideanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.manhattan)) {\n      distanceMeasure = new ManhattanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.canberra)) {\n      distanceMeasure = new CanberraDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.earthMovers)) {\n      distanceMeasure = new EarthMoversDistance();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960f089602da7f0df48fb0e23de1ecbc791b95f0","date":1524725963,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KnnEvaluator#KnnEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n  }\n\n","sourceOld":"  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n\n    DistanceEvaluator.DistanceType type = null;\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    if(namedParams.size() > 0) {\n      if (namedParams.size() > 1) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      StreamExpressionNamedParameter namedParameter = namedParams.get(0);\n      String name = namedParameter.getName();\n      if (!name.equalsIgnoreCase(\"distance\")) {\n        throw new IOException(\"distance function expects only one named parameter 'distance'.\");\n      }\n\n      String typeParam = namedParameter.getParameter().toString().trim();\n      type= DistanceEvaluator.DistanceType.valueOf(typeParam);\n    } else {\n      type = DistanceEvaluator.DistanceType.euclidean;\n    }\n\n    if (type.equals(DistanceEvaluator.DistanceType.euclidean)) {\n      distanceMeasure = new EuclideanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.manhattan)) {\n      distanceMeasure = new ManhattanDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.canberra)) {\n      distanceMeasure = new CanberraDistance();\n    } else if (type.equals(DistanceEvaluator.DistanceType.earthMovers)) {\n      distanceMeasure = new EarthMoversDistance();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["b94236357aaa22b76c10629851fe4e376e0cea82","5d0b4707f3bab526e78877bedeebf53368dbc3d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["960f089602da7f0df48fb0e23de1ecbc791b95f0"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["5d0b4707f3bab526e78877bedeebf53368dbc3d7","960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["b94236357aaa22b76c10629851fe4e376e0cea82"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6fe6699bcc60bb2640032c2682f07a108b1f757"],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}