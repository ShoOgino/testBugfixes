{"path":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","date":1503307834,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      LongValues minMatchValues = minimumNumberMatch.getValues(context, null);\n      if (minMatchValues.advanceExact(doc) == false) {\n        return Explanation.noMatch(\"minimumNumberMatch has no value on the current document\");\n      }\n      final long minimumNumberMatch = Math.max(1, minMatchValues.longValue());\n      int freq = 0;\n      double score = 0;\n      List<Explanation> subExpls = new ArrayList<>();\n      for (Weight weight : weights) {\n        Explanation subExpl = weight.explain(context, doc);\n        if (subExpl.isMatch()) {\n          freq++;\n          score += subExpl.getValue();\n        }\n        subExpls.add(subExpl);\n      }\n      if (freq >= minimumNumberMatch) {\n        return Explanation.match((float) score, freq + \" matches for \" + minimumNumberMatch + \" required matches, sum of:\", subExpls);\n      } else {\n        return Explanation.noMatch(freq + \" matches for \" + minimumNumberMatch + \" required matches\", subExpls);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8e4fbf51a35a1292b838d83f793794c274932a1","date":1503371298,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      LongValues minMatchValues = minimumNumberMatch.getValues(context, null);\n      if (minMatchValues.advanceExact(doc) == false) {\n        return Explanation.noMatch(\"minimumNumberMatch has no value on the current document\");\n      }\n      final long minimumNumberMatch = Math.max(1, minMatchValues.longValue());\n      int freq = 0;\n      double score = 0;\n      List<Explanation> subExpls = new ArrayList<>();\n      for (Weight weight : weights) {\n        Explanation subExpl = weight.explain(context, doc);\n        if (subExpl.isMatch()) {\n          freq++;\n          score += subExpl.getValue();\n        }\n        subExpls.add(subExpl);\n      }\n      if (freq >= minimumNumberMatch) {\n        return Explanation.match((float) score, freq + \" matches for \" + minimumNumberMatch + \" required matches, sum of:\", subExpls);\n      } else {\n        return Explanation.noMatch(freq + \" matches for \" + minimumNumberMatch + \" required matches\", subExpls);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      LongValues minMatchValues = minimumNumberMatch.getValues(context, null);\n      if (minMatchValues.advanceExact(doc) == false) {\n        return Explanation.noMatch(\"minimumNumberMatch has no value on the current document\");\n      }\n      final long minimumNumberMatch = Math.max(1, minMatchValues.longValue());\n      int freq = 0;\n      double score = 0;\n      List<Explanation> subExpls = new ArrayList<>();\n      for (Weight weight : weights) {\n        Explanation subExpl = weight.explain(context, doc);\n        if (subExpl.isMatch()) {\n          freq++;\n          score += subExpl.getValue();\n        }\n        subExpls.add(subExpl);\n      }\n      if (freq >= minimumNumberMatch) {\n        return Explanation.match((float) score, freq + \" matches for \" + minimumNumberMatch + \" required matches, sum of:\", subExpls);\n      } else {\n        return Explanation.noMatch(freq + \" matches for \" + minimumNumberMatch + \" required matches\", subExpls);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/CoveringQuery.CoveringWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      LongValues minMatchValues = minimumNumberMatch.getValues(context, null);\n      if (minMatchValues.advanceExact(doc) == false) {\n        return Explanation.noMatch(\"minimumNumberMatch has no value on the current document\");\n      }\n      final long minimumNumberMatch = Math.max(1, minMatchValues.longValue());\n      int freq = 0;\n      double score = 0;\n      List<Explanation> subExpls = new ArrayList<>();\n      for (Weight weight : weights) {\n        Explanation subExpl = weight.explain(context, doc);\n        if (subExpl.isMatch()) {\n          freq++;\n          score += subExpl.getValue().doubleValue();\n        }\n        subExpls.add(subExpl);\n      }\n      if (freq >= minimumNumberMatch) {\n        return Explanation.match((float) score, freq + \" matches for \" + minimumNumberMatch + \" required matches, sum of:\", subExpls);\n      } else {\n        return Explanation.noMatch(freq + \" matches for \" + minimumNumberMatch + \" required matches\", subExpls);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      LongValues minMatchValues = minimumNumberMatch.getValues(context, null);\n      if (minMatchValues.advanceExact(doc) == false) {\n        return Explanation.noMatch(\"minimumNumberMatch has no value on the current document\");\n      }\n      final long minimumNumberMatch = Math.max(1, minMatchValues.longValue());\n      int freq = 0;\n      double score = 0;\n      List<Explanation> subExpls = new ArrayList<>();\n      for (Weight weight : weights) {\n        Explanation subExpl = weight.explain(context, doc);\n        if (subExpl.isMatch()) {\n          freq++;\n          score += subExpl.getValue();\n        }\n        subExpls.add(subExpl);\n      }\n      if (freq >= minimumNumberMatch) {\n        return Explanation.match((float) score, freq + \" matches for \" + minimumNumberMatch + \" required matches, sum of:\", subExpls);\n      } else {\n        return Explanation.noMatch(freq + \" matches for \" + minimumNumberMatch + \" required matches\", subExpls);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8e4fbf51a35a1292b838d83f793794c274932a1"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8":["a8e4fbf51a35a1292b838d83f793794c274932a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","7d5484fcfd752ec7a2ff2ed6a860c539fdf92da8","a8e4fbf51a35a1292b838d83f793794c274932a1"],"a8e4fbf51a35a1292b838d83f793794c274932a1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}