{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","commits":[{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(e.getKey(), Hint.SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":null,"sourceOld":"    void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n      if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n        if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n        for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n          if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n          if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5088ce415a50eb8412f4942aeabe293e75c81e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","98f11c416d30e556e0004a9a84960702d12d35b1"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}