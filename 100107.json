{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"/dev/null","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\r\n    boolean required, prohibited;\r\n\r\n    // If this term is introduced by AND, make the preceding term required,\r\n    // unless it's already prohibited\r\n    if (clauses.size() > 0 && conj == CONJ_AND) {\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.MUST);\r\n    }\r\n\r\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\r\n      // If this term is introduced by OR, make the preceding term optional,\r\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\r\n      // notice if the input is a OR b, first term is parsed as required; without\r\n      // this modification a OR b would parsed as +a OR b\r\n      BooleanClause c = clauses.get(clauses.size()-1);\r\n      if (!c.isProhibited())\r\n        c.setOccur(BooleanClause.Occur.SHOULD);\r\n    }\r\n\r\n    // We might have been passed a null query; the term might have been\r\n    // filtered away by the analyzer.\r\n    if (q == null)\r\n      return;\r\n\r\n    if (operator == OR_OPERATOR) {\r\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\r\n      // introduced by NOT or -; make sure not to set both.\r\n      prohibited = (mods == MOD_NOT);\r\n      required = (mods == MOD_REQ);\r\n      if (conj == CONJ_AND && !prohibited) {\r\n        required = true;\r\n      }\r\n    } else {\r\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\r\n      // if not PROHIBITED and not introduced by OR\r\n      prohibited = (mods == MOD_NOT);\r\n      required   = (!prohibited && conj != CONJ_OR);\r\n    }\r\n    if (required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\r\n    else if (!required && !prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\r\n    else if (!required && prohibited)\r\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\r\n    else\r\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}