{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeQuery.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeQuery.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeQuery.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeQuery.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeQuery.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeQuery.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeQuery.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeQuery.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeQuery.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeQuery.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeQuery.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeQuery.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n    boolean lowerInclusive = DOMUtils.getAttribute(e, \"includeLower\", true);\n    boolean upperInclusive = DOMUtils.getAttribute(e, \"includeUpper\", true);\n    int precisionStep = DOMUtils.getAttribute(e, \"precisionStep\", NumericUtils.PRECISION_STEP_DEFAULT);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      Query filter;\n      if (type.equalsIgnoreCase(\"int\")) {\n        filter = NumericRangeQuery.newIntRange(field, precisionStep, Integer\n            .valueOf(lowerTerm), Integer.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        filter = NumericRangeQuery.newLongRange(field, precisionStep, Long\n            .valueOf(lowerTerm), Long.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        filter = NumericRangeQuery.newDoubleRange(field, precisionStep, Double\n            .valueOf(lowerTerm), Double.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        filter = NumericRangeQuery.newFloatRange(field, precisionStep, Float\n            .valueOf(lowerTerm), Float.valueOf(upperTerm), lowerInclusive,\n            upperInclusive);\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n      return filter;\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}