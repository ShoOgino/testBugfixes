{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    byte id[] = StringHelper.randomId();\n    CompoundFileDirectory csw = new CompoundFileDirectory(id, newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(id, newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(id, newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(id, csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":null,"sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    byte id[] = StringHelper.randomId();\n    CompoundFileDirectory csw = new CompoundFileDirectory(id, newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(id, newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(id, newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(id, csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testReadNestedCFP().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    Lucene40CompoundReader csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    Lucene40CompoundReader nested = new Lucene40CompoundReader(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new Lucene40CompoundReader(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}