{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:/\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(src, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(src, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + src.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + src.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:/\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:/\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(src, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(src, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + src.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + src.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + src.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","bugFix":null,"bugIntro":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"157c1f1b022889a372e29bdbbd9479738d3dedb7","date":1467653140,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:/\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","date":1490642105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7b3180545c5d5e137529b5474e018af04e07615","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    \n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in '/'\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() + \"/cpToLocal/\";\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + \"/solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + \"/localnamed/renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","3100fa57deee363537557f82c2b38812a2576acc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37","date":1502038096,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyFile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyFile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyFile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyFile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1101e23841a13358cc2facc363fd887c9200ddfd","date":1502068908,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    log.info(\"EOE Checking file at (var1) \" + locEmpty.toAbsolutePath().toString()); // TODO: remove me EOE\n    log.info(\"EOE Checking file at (var2) \" + locEmpty.toFile().getAbsolutePath()); // TODO: remove me EOE\n    log.info(\"EOE Checking file exists: \" + Boolean.toString(locEmpty.toFile().exists()));\n    log.info(\"EOE Checking isFile: \" + Boolean.toString(locEmpty.toFile().isFile()));\n    log.info(\"EOE Checking isDirectory: \" + Boolean.toString(locEmpty.toFile().isDirectory())); //TODO: remove me EOE to here.\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyFile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyFile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyFile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyFile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","bugFix":null,"bugIntro":["6f896d10632f33e14c708179f4c5d5ec442a1287"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"566112f6115904d848cbf09462ebd8bf1304257b","date":1502103699,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    log.info(\"EOE Checking file at (var1) \" + locEmpty.toAbsolutePath().toString()); // TODO: remove me EOE\n    log.info(\"EOE Checking file at (var2) \" + locEmpty.toFile().getAbsolutePath()); // TODO: remove me EOE\n    log.info(\"EOE Checking file exists: \" + Boolean.toString(locEmpty.toFile().exists()));\n    log.info(\"EOE Checking isFile: \" + Boolean.toString(locEmpty.toFile().isFile()));\n    log.info(\"EOE Checking isDirectory: \" + Boolean.toString(locEmpty.toFile().isDirectory())); //TODO: remove me EOE to here.\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f896d10632f33e14c708179f4c5d5ec442a1287","date":1502125058,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    log.info(\"EOE Checking file at (var1) \" + locEmpty.toAbsolutePath().toString()); // TODO: remove me EOE\n    log.info(\"EOE Checking file at (var2) \" + locEmpty.toFile().getAbsolutePath()); // TODO: remove me EOE\n    log.info(\"EOE Checking file exists: \" + Boolean.toString(locEmpty.toFile().exists()));\n    log.info(\"EOE Checking isFile: \" + Boolean.toString(locEmpty.toFile().isFile()));\n    log.info(\"EOE Checking isDirectory: \" + Boolean.toString(locEmpty.toFile().isDirectory())); //TODO: remove me EOE to here.\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","bugFix":["1101e23841a13358cc2facc363fd887c9200ddfd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    log.info(\"EOE Checking file at (var1) \" + locEmpty.toAbsolutePath().toString()); // TODO: remove me EOE\n    log.info(\"EOE Checking file at (var2) \" + locEmpty.toFile().getAbsolutePath()); // TODO: remove me EOE\n    log.info(\"EOE Checking file exists: \" + Boolean.toString(locEmpty.toFile().exists()));\n    log.info(\"EOE Checking isFile: \" + Boolean.toString(locEmpty.toFile().isFile()));\n    log.info(\"EOE Checking isDirectory: \" + Boolean.toString(locEmpty.toFile().isDirectory())); //TODO: remove me EOE to here.\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testCp().mjava","sourceNew":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    AbstractDistribZkTestBase.copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\", zkAddr);\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","sourceOld":"  @Test\n  public void testCp() throws Exception {\n    // First get something up on ZK\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"cp1\");\n\n    // Now copy it somewhere else on ZK.\n    String[] args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"zk:/cp2\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ZkCpTool cpTool = new SolrCLI.ZkCpTool();\n\n    int res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from zk -> zk should have succeeded.\", 0, res);\n    verifyZnodesMatch(\"/configs/cp1\", \"/cp2\");\n\n\n    // try with zk->local\n    Path tmp = createTempDir(\"tmpNewPlace2\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with zk->local  no file: prefix\n    tmp = createTempDir(\"tmpNewPlace3\");\n    args = new String[]{\n        \"-src\", \"zk:/configs/cp1\",\n        \"-dst\", tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(tmp, \"/configs/cp1\");\n\n\n    // try with local->zk\n    args = new String[]{\n        \"-src\", srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp3\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp3\");\n\n    // try with local->zk, file: specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp4\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp4\");\n\n    // try with recurse not specified\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp5Fail\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse not specified.\", 0 != res);\n\n    // try with recurse = false\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp6Fail\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertTrue(\"Copy should NOT have succeeded, recurse set to false.\", 0 != res);\n\n\n    // NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree\n    // and at least IntelliJ's CWD is in the source tree.\n\n    // copy to local ending in separator\n    //src and cp3 and cp4 are valid\n    String localSlash = tmp.normalize() +  File.separator +\"cpToLocal\" + File.separator;\n    args = new String[]{\n        \"-src\", \"zk:/cp3/schema.xml\",\n        \"-dst\", localSlash,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should nave created intermediate directory locally.\", 0, res);\n    assertTrue(\"File should have been copied to a directory successfully\", Files.exists(Paths.get(localSlash, \"schema.xml\")));\n\n    // copy to ZK ending in '/'.\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/powerup/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to intermediate file should have succeeded.\", 0, res);\n    assertTrue(\"Should have created an intermediate node on ZK\", zkClient.exists(\"/powerup/solrconfig.xml\", true));\n\n    // copy individual file up\n    //src and cp3 are valid\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.normalize().toAbsolutePath().toString() + File.separator + \"solrconfig.xml\",\n        \"-dst\", \"zk:/copyUpFile.xml\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy up to named file should have succeeded.\", 0, res);\n    assertTrue(\"Should NOT have created an intermediate node on ZK\", zkClient.exists(\"/copyUpFile.xml\", true));\n\n    // copy individual file down\n    //src and cp3 are valid\n\n    String localNamed = tmp.normalize().toString() + File.separator + \"localnamed\" + File.separator +  \"renamed.txt\";\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"file:\" + localNamed,\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy to local named file should have succeeded.\", 0, res);\n    Path locPath = Paths.get(localNamed);\n    assertTrue(\"Should have found file: \" + localNamed, Files.exists(locPath));\n    assertTrue(\"Should be an individual file\", Files.isRegularFile(locPath));\n    assertTrue(\"File should have some data\", Files.size(locPath) > 100);\n    boolean foundApache = false;\n    for (String line : Files.readAllLines(locPath, Charset.forName(\"UTF-8\"))) {\n      if (line.contains(\"Apache Software Foundation\")) {\n        foundApache = true;\n        break;\n      }\n    }\n    assertTrue(\"Should have found Apache Software Foundation in the file! \", foundApache);\n\n\n    // Test copy from somwehere in ZK to the root of ZK.\n    args = new String[]{\n        \"-src\", \"zk:/cp4/solrconfig.xml\",\n        \"-dst\", \"zk:/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy from somewhere in ZK to ZK root should have succeeded.\", 0, res);\n    assertTrue(\"Should have found znode /solrconfig.xml: \", zkClient.exists(\"/solrconfig.xml\", true));\n\n    // Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst\n    args = new String[]{\n        \"-src\", \"file:\" + srcPathCheck.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(srcPathCheck, \"/cp7/\" + srcPathCheck.getFileName().toString());\n\n    // Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.\n    tmp = createTempDir(\"dirdata\");\n    Path file = Paths.get(tmp.toAbsolutePath().toString(), \"zknode.data\");\n    List<String> lines = new ArrayList<>();\n    lines.add(\"{Some Arbitrary Data}\");\n    Files.write(file, lines, Charset.forName(\"UTF-8\"));\n    // First, just copy the data up the cp7 since it's a directory.\n    args = new String[]{\n        \"-src\", \"file:\" + file.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    String content = new String(zkClient.getData(\"/cp7/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    tmp = createTempDir(\"cp8\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7\",\n        \"-dst\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Next, copy cp7 down and verify that zknode.data exists for cp7\n    Path zData = Paths.get(tmp.toAbsolutePath().toString(), \"conf/stopwords/zknode.data\");\n    assertTrue(\"znode.data should have been copied down\", zData.toFile().exists());\n\n    // Finally, copy up to cp8 and verify that the data is up there.\n    args = new String[]{\n        \"-src\", \"file:\" + tmp.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp9\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    content = new String(zkClient.getData(\"/cp9/conf/stopwords\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"{Some Arbitrary Data}\"));\n\n    // Copy an individual empty file up and back down and insure it's still a file\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.toAbsolutePath().toString(),\n        \"-dst\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path tmp2 = createTempDir(\"cp9\");\n    Path emptyDest = Paths.get(tmp2.toAbsolutePath().toString(), \"emptyfile\");\n    args = new String[]{\n        \"-src\", \"zk:/cp7/conf/stopwords/emptyfile\",\n        \"-dst\", \"file:\" + emptyDest.toAbsolutePath().toString(),\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    assertTrue(\"Empty files should NOT be copied down as directories\", emptyDest.toFile().isFile());\n\n    // Now with recursive copy\n\n    args = new String[]{\n        \"-src\", \"file:\" + emptyFile.getParent().getParent().toString(),\n        \"-dst\", \"zk:/cp10\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    // Now copy it all back and make sure empty file is still a file when recursively copying.\n    tmp2 = createTempDir(\"cp10\");\n    args = new String[]{\n        \"-src\", \"zk:/cp10\",\n        \"-dst\", \"file:\" + tmp2.toAbsolutePath().toString(),\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n    res = cpTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(cpTool.getOptions()), args));\n    assertEquals(\"Copy should have succeeded.\", 0, res);\n\n    Path locEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", locEmpty.toFile().isFile());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"157c1f1b022889a372e29bdbbd9479738d3dedb7":["3100fa57deee363537557f82c2b38812a2576acc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","157c1f1b022889a372e29bdbbd9479738d3dedb7"],"c7b3180545c5d5e137529b5474e018af04e07615":["157c1f1b022889a372e29bdbbd9479738d3dedb7"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["566112f6115904d848cbf09462ebd8bf1304257b","6f896d10632f33e14c708179f4c5d5ec442a1287"],"f49693fcc05c1186d9b347493efa73a614f5bba7":["c7b3180545c5d5e137529b5474e018af04e07615"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f49693fcc05c1186d9b347493efa73a614f5bba7","6f896d10632f33e14c708179f4c5d5ec442a1287"],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["157c1f1b022889a372e29bdbbd9479738d3dedb7"],"566112f6115904d848cbf09462ebd8bf1304257b":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","1101e23841a13358cc2facc363fd887c9200ddfd"],"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"6f896d10632f33e14c708179f4c5d5ec442a1287":["566112f6115904d848cbf09462ebd8bf1304257b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1101e23841a13358cc2facc363fd887c9200ddfd":["33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37"],"4949836c6e83246ddba8997472e3333f40986c8c":["6f896d10632f33e14c708179f4c5d5ec442a1287"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4949836c6e83246ddba8997472e3333f40986c8c"]},"commit2Childs":{"157c1f1b022889a372e29bdbbd9479738d3dedb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c7b3180545c5d5e137529b5474e018af04e07615","f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c7b3180545c5d5e137529b5474e018af04e07615":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"f49693fcc05c1186d9b347493efa73a614f5bba7":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"566112f6115904d848cbf09462ebd8bf1304257b":["58884af1f68e9d61c217c753fbd6266d86a63b14","6f896d10632f33e14c708179f4c5d5ec442a1287"],"3100fa57deee363537557f82c2b38812a2576acc":["157c1f1b022889a372e29bdbbd9479738d3dedb7"],"6f896d10632f33e14c708179f4c5d5ec442a1287":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4949836c6e83246ddba8997472e3333f40986c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"1101e23841a13358cc2facc363fd887c9200ddfd":["566112f6115904d848cbf09462ebd8bf1304257b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["566112f6115904d848cbf09462ebd8bf1304257b","33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37"],"4949836c6e83246ddba8997472e3333f40986c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37":["1101e23841a13358cc2facc363fd887c9200ddfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}