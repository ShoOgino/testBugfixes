{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return encodedRectangle.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return encodedRectangle.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return encodedRectangle.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":null,"sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return encodedRectangle.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return encodedRectangle.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return encodedRectangle.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}