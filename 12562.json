{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","sourceOld":"    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute external distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","sourceOld":"    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#outsideDistance(PlanetModel,DistanceStyle,double,double,double).mjava","sourceNew":"    /** Compute external distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","sourceOld":"    /** Compute external distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric.\n     */\n    public double outsideDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      final double upperDistance = distanceStyle.computeDistance(planetModel, upperConnectingPlane, x,y,z, lowerConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double lowerDistance = distanceStyle.computeDistance(planetModel, lowerConnectingPlane, x,y,z, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n      final double startDistance = distanceStyle.computeDistance(planetModel, startCutoffPlane, x,y,z, endCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double endDistance = distanceStyle.computeDistance(planetModel, endCutoffPlane, x,y,z, startCutoffPlane, lowerConnectingPlane, upperConnectingPlane);\n      final double ULHCDistance = distanceStyle.computeDistance(ULHC, x,y,z);\n      final double URHCDistance = distanceStyle.computeDistance(URHC, x,y,z);\n      final double LLHCDistance = distanceStyle.computeDistance(LLHC, x,y,z);\n      final double LRHCDistance = distanceStyle.computeDistance(LRHC, x,y,z);\n      return Math.min(\n        Math.min(\n          Math.min(upperDistance,lowerDistance),\n          Math.min(startDistance,endDistance)),\n        Math.min(\n          Math.min(ULHCDistance, URHCDistance),\n          Math.min(LLHCDistance, LRHCDistance)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}