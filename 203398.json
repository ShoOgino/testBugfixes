{"path":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","commits":[{"id":"e08cb336d64c53393bb8a1b09f3af187b885f626","date":1564751020,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":0,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7","date":1583235377,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","sourceNew":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n            \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n            \"secureClientPort=-1\",\n            \"thisIsUnexpected\",\n            \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","sourceOld":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38fb691372ae1411a8a486192885334fd3ae7244","date":1583496514,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","sourceNew":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","sourceOld":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n            \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n            \"secureClientPort=-1\",\n            \"thisIsUnexpected\",\n            \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#testEnsembleStatusMock().mjava","sourceNew":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString(), any())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    ZkDynamicConfig zkDynamicConfig = ZkDynamicConfig.parseLines(\n        \"server.1=zoo1:2780:2783:participant;0.0.0.0:2181\\n\" +\n            \"server.2=zoo2:2781:2784:participant;0.0.0.0:2181\\n\" +\n            \"server.3=zoo3:2782:2785:participant;0.0.0.0:2181\\n\" +\n            \"version=400000003\");\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo4:2181,zoo5:2181,zoo6:2181\", zkDynamicConfig);\n    String expected = \"{\\n\" +\n        \"  \\\"dynamicReconfig\\\":true,\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"role\\\":\\\"participant\\\",\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo4:2181,zoo5:2181,zoo6:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Your ZK connection string (3 hosts) is different from the dynamic ensemble config (3 hosts). Solr does not currently support dynamic reconfiguration and will only be able to connect to the zk hosts in your connection string.\\\",\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","sourceOld":"  @Test\n  public void testEnsembleStatusMock() {\n    assumeWorkingMockito();\n    ZookeeperStatusHandler zkStatusHandler = mock(ZookeeperStatusHandler.class);\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"zk_version\\t3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\",\n        \"zk_avg_latency\\t1\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo1:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\",\n        \"secureClientPort=-1\",\n        \"thisIsUnexpected\",\n        \"membership: \"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo2:2181\", \"ruok\")).thenReturn(Arrays.asList(\"\"));\n\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"ruok\")).thenReturn(Arrays.asList(\"imok\"));\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"mntr\")).thenReturn(\n        Arrays.asList(\"mntr is not executed because it is not in the whitelist.\")); // Actual response from ZK if not whitelisted\n    when(zkStatusHandler.getZkRawResponse(\"zoo3:2181\", \"conf\")).thenReturn(\n        Arrays.asList(\"clientPort=2181\"));\n\n    when(zkStatusHandler.getZkStatus(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.monitorZookeeper(anyString())).thenCallRealMethod();\n    when(zkStatusHandler.validateZkRawResponse(ArgumentMatchers.any(), any(), any())).thenAnswer(Answers.CALLS_REAL_METHODS);\n\n    Map<String, Object> mockStatus = zkStatusHandler.getZkStatus(\"zoo1:2181,zoo2:2181,zoo3:2181\");\n    String expected = \"{\\n\" +\n        \"  \\\"ensembleSize\\\":3,\\n\" +\n        \"  \\\"details\\\":[\\n\" +\n        \"    {\\n\" +\n        \"      \\\"zk_version\\\":\\\"3.5.5-390fe37ea45dee01bf87dc1c042b5e3dcce88653, built on 05/03/2019 12:07 GMT\\\",\\n\" +\n        \"      \\\"zk_avg_latency\\\":\\\"1\\\",\\n\" +\n        \"      \\\"host\\\":\\\"zoo1:2181\\\",\\n\" +\n        \"      \\\"clientPort\\\":\\\"2181\\\",\\n\" +\n        \"      \\\"secureClientPort\\\":\\\"-1\\\",\\n\" +\n        \"      \\\"ok\\\":true},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo2:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false},\\n\" +\n        \"    {\\n\" +\n        \"      \\\"host\\\":\\\"zoo3:2181\\\",\\n\" +\n        \"      \\\"ok\\\":false}],\\n\" +\n        \"  \\\"zkHost\\\":\\\"zoo1:2181,zoo2:2181,zoo3:2181\\\",\\n\" +\n        \"  \\\"errors\\\":[\\n\" +\n        \"    \\\"Unexpected line in 'conf' response from Zookeeper zoo1:2181: thisIsUnexpected\\\",\\n\" +\n        \"    \\\"Empty response from Zookeeper zoo2:2181\\\",\\n\" +\n        \"    \\\"Could not execute mntr towards ZK host zoo3:2181. Add this line to the 'zoo.cfg' configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter 'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\\\"],\\n\" +\n        \"  \\\"status\\\":\\\"yellow\\\"}\";\n    assertEquals(expected, JSONUtil.toJSON(mockStatus));\n  }\n\n","bugFix":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e08cb336d64c53393bb8a1b09f3af187b885f626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["38fb691372ae1411a8a486192885334fd3ae7244"],"38fb691372ae1411a8a486192885334fd3ae7244":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"]},"commit2Childs":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e08cb336d64c53393bb8a1b09f3af187b885f626","8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38fb691372ae1411a8a486192885334fd3ae7244":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["38fb691372ae1411a8a486192885334fd3ae7244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}