{"path":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","commits":[{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"/dev/null","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"/dev/null","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"/dev/null","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(new TermRangeFilter(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}