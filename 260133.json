{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","commits":[{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE\");\n          }\n        }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1b41d7dabb625d2955456a9845f852402dc44da","date":1329796916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE\");\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE\");\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":null,"sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateCloudState(true);\n      CloudState cloudState = zkStateReader.getCloudState();\n      Map<String,Slice> slices = cloudState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase#assertAllActive(String,ZkStateReader).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractDistributedZkTestCase#assertAllActive(String,ZkStateReader).mjava","sourceNew":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","sourceOld":"  protected void assertAllActive(String collection,ZkStateReader zkStateReader)\n      throws KeeperException, InterruptedException {\n\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      Map<String,Slice> slices = clusterState.getSlices(collection);\n      if (slices == null) {\n        throw new IllegalArgumentException(\"Cannot find collection:\" + collection);\n      }\n      for (Map.Entry<String,Slice> entry : slices.entrySet()) {\n        Map<String,ZkNodeProps> shards = entry.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n\n          String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n          if (!state.equals(ZkStateReader.ACTIVE)) {\n            fail(\"Not all shards are ACTIVE - found a shard that is: \" + state);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a1b41d7dabb625d2955456a9845f852402dc44da"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","a1b41d7dabb625d2955456a9845f852402dc44da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a1b41d7dabb625d2955456a9845f852402dc44da","2c30e4c1cee08b3b229a77991882594fe7250b66"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a1b41d7dabb625d2955456a9845f852402dc44da","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a1b41d7dabb625d2955456a9845f852402dc44da":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a1b41d7dabb625d2955456a9845f852402dc44da"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a1b41d7dabb625d2955456a9845f852402dc44da":["3f767f8c99eaedb984df754fe61f21c5de260f94","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}