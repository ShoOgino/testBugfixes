{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"544b7e3275d79a19498e98d3651e99531816a664","date":1347712098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return leader props\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb89814ad85fb3340f275e6b76a0bc319a6cc02b","date":1348100270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return leader props\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return leader props\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return leader props\n   * @throws InterruptedException\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a98541130dbb2dd570f39bd89ced65760cad80","date":1355032328,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = timeoutms / 1000;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(1000);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(1000);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @return leader props\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, boolean failImmediatelyOnExpiration) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (SessionExpiredException e) {\n        if (failImmediatelyOnExpiration) {\n          throw new RuntimeException(\"Session has expired - could not get leader props\", exp);\n        }\n        exp = e;\n        Thread.sleep(500);\n      }  catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"CoreContainer is shutdown\");\n      }\n    }\n    throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["544b7e3275d79a19498e98d3651e99531816a664"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"544b7e3275d79a19498e98d3651e99531816a664":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","f9a98541130dbb2dd570f39bd89ced65760cad80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9a98541130dbb2dd570f39bd89ced65760cad80"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f9a98541130dbb2dd570f39bd89ced65760cad80","407687e67faf6e1f02a211ca078d8e3eed631027"],"cb89814ad85fb3340f275e6b76a0bc319a6cc02b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a6378064655e76cd7b908b1cab4ce425b384b508":["544b7e3275d79a19498e98d3651e99531816a664"],"544b7e3275d79a19498e98d3651e99531816a664":["cb89814ad85fb3340f275e6b76a0bc319a6cc02b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}