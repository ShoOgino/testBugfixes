{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePositions) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm.get());\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.setLength(start + deltaLen);\n      term.grow(term.length());\n      tvf.readBytes(term.bytes(), start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term.get());\n      nextTerm++;\n      return term.get();\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm);\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.length = start + deltaLen;\n      term.grow(term.length);\n      tvf.readBytes(term.bytes, start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term);\n      nextTerm++;\n      return term;\n    }\n\n","bugFix":["e6e919043fa85ee891123768dd655a98edbbf63c","3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm.get());\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.setLength(start + deltaLen);\n      term.grow(term.length());\n      tvf.readBytes(term.bytes(), start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term.get());\n      nextTerm++;\n      return term.get();\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm.get());\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.setLength(start + deltaLen);\n      term.grow(term.length());\n      tvf.readBytes(term.bytes(), start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term.get());\n      nextTerm++;\n      return term.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#next().mjava","sourceNew":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm.get());\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.setLength(start + deltaLen);\n      term.grow(term.length());\n      tvf.readBytes(term.bytes(), start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term.get());\n      nextTerm++;\n      return term.get();\n    }\n\n","sourceOld":"    @Override\n    public BytesRef next() throws IOException {\n      if (nextTerm >= numTerms) {\n        return null;\n      }\n      term.copyBytes(lastTerm.get());\n      final int start = tvf.readVInt();\n      final int deltaLen = tvf.readVInt();\n      term.setLength(start + deltaLen);\n      term.grow(term.length());\n      tvf.readBytes(term.bytes(), start, deltaLen);\n      freq = tvf.readVInt();\n\n      if (storePayloads) {\n        positions = new int[freq];\n        payloadOffsets = new int[freq];\n        int totalPayloadLength = 0;\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          int code = tvf.readVInt();\n          pos += code >>> 1;\n          positions[posUpto] = pos;\n          if ((code & 1) != 0) {\n            // length change\n            lastPayloadLength = tvf.readVInt();\n          }\n          payloadOffsets[posUpto] = totalPayloadLength;\n          totalPayloadLength += lastPayloadLength;\n          assert totalPayloadLength >= 0;\n        }\n        payloadData = new byte[totalPayloadLength];\n        tvf.readBytes(payloadData, 0, payloadData.length);\n      } else if (storePositions /* no payloads */) {\n        // TODO: we could maybe reuse last array, if we can\n        // somehow be careful about consumer never using two\n        // D&PEnums at once...\n        positions = new int[freq];\n        int pos = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          pos += tvf.readVInt();\n          positions[posUpto] = pos;\n        }\n      }\n\n      if (storeOffsets) {\n        startOffsets = new int[freq];\n        endOffsets = new int[freq];\n        int offset = 0;\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          startOffsets[posUpto] = offset + tvf.readVInt();\n          offset = endOffsets[posUpto] = startOffsets[posUpto] + tvf.readVInt();\n        }\n      }\n\n      lastTerm.copyBytes(term.get());\n      nextTerm++;\n      return term.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}