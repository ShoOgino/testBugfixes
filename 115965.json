{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationNameValidation().mjava","commits":[{"id":"5469e1b49cf7f51c02519aff49b848ff8bbbc663","date":1454885560,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationNameValidation().mjava","pathOld":"/dev/null","sourceNew":"  private void testCollectionCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid name\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Identifiers must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationCollectionNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationNameValidation().mjava","sourceNew":"  private void testCollectionCreationCollectionNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid collection\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Collection names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid name\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Identifiers must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationCollectionNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationNameValidation().mjava","sourceNew":"  private void testCollectionCreationCollectionNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid collection\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Collection names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid name\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Identifiers must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06043fcf612d2cd93636c22cd062e0641406b417":["5469e1b49cf7f51c02519aff49b848ff8bbbc663","cbd8af67010775ee4b53c58597a30bbe480707ee"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06043fcf612d2cd93636c22cd062e0641406b417"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5469e1b49cf7f51c02519aff49b848ff8bbbc663"],"06043fcf612d2cd93636c22cd062e0641406b417":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5469e1b49cf7f51c02519aff49b848ff8bbbc663":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}