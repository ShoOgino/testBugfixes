{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new MockTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"), MockTokenizer.WHITESPACE, false);\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","4e194a2c4eac8122ef31a202859dcb1c5344020d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new MockTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"), MockTokenizer.WHITESPACE, false);\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new MockTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"), MockTokenizer.WHITESPACE, false);\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"));\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestASCIIFoldingFilter#testLatin1Accents().mjava","sourceNew":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new MockTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"), MockTokenizer.WHITESPACE, false);\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  // testLain1Accents() is a copy of TestLatin1AccentFilter.testU().\n  public void testLatin1Accents() throws Exception {\n    TokenStream stream = new MockTokenizer(new StringReader\n      (\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ĳ Ð Ñ\"\n      +\" Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ĳ\"\n      +\" ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ ﬁ ﬂ\"), MockTokenizer.WHITESPACE, false);\n    ASCIIFoldingFilter filter = new ASCIIFoldingFilter(stream);\n\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    filter.reset();\n    assertTermEquals(\"Des\", filter, termAtt);\n    assertTermEquals(\"mot\", filter, termAtt);\n    assertTermEquals(\"cles\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"LA\", filter, termAtt);\n    assertTermEquals(\"CHAINE\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"A\", filter, termAtt);\n    assertTermEquals(\"AE\", filter, termAtt);\n    assertTermEquals(\"C\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"E\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"I\", filter, termAtt);\n    assertTermEquals(\"IJ\", filter, termAtt);\n    assertTermEquals(\"D\", filter, termAtt);\n    assertTermEquals(\"N\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"O\", filter, termAtt);\n    assertTermEquals(\"OE\", filter, termAtt);\n    assertTermEquals(\"TH\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"U\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"Y\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"a\", filter, termAtt);\n    assertTermEquals(\"ae\", filter, termAtt);\n    assertTermEquals(\"c\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"e\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"i\", filter, termAtt);\n    assertTermEquals(\"ij\", filter, termAtt);\n    assertTermEquals(\"d\", filter, termAtt);\n    assertTermEquals(\"n\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"o\", filter, termAtt);\n    assertTermEquals(\"oe\", filter, termAtt);\n    assertTermEquals(\"ss\", filter, termAtt);\n    assertTermEquals(\"th\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"u\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"y\", filter, termAtt);\n    assertTermEquals(\"fi\", filter, termAtt);\n    assertTermEquals(\"fl\", filter, termAtt);\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}