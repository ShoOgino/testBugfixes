{"path":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"qt\",\"standard\",\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":["0fe2d0d2a63a5c8d95865963a0af13acf5534e24"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fe2d0d2a63a5c8d95865963a0af13acf5534e24","date":1336094754,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    \n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertU(adoc(\"id\",\"5\"));\n\n    // search - not committed - \"5\" should not be found.\n    assertQ(req(\"qt\",\"standard\",\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now it should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    // now delete it\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    \n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    \n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    \n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    assertU(commit());\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    \n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Long>) metrics.get(delsQName)).getValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Long>) metrics.get(addsName)).getValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Long>) metrics.get(delsIName)).getValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VersionInfo.VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testBasics().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n\n    // get initial metrics\n    Map<String, Metric> metrics = h.getCoreContainer().getMetricManager()\n        .registry(h.getCore().getCoreMetricManager().getRegistryName()).getMetrics();\n\n    String PREFIX = \"UPDATE.updateHandler.\";\n\n    String commitsName = PREFIX + \"commits\";\n    assertTrue(metrics.containsKey(commitsName));\n    String addsName = PREFIX + \"adds\";\n    assertTrue(metrics.containsKey(addsName));\n    String cumulativeAddsName = PREFIX + \"cumulativeAdds\";\n    String delsIName = PREFIX + \"deletesById\";\n    String cumulativeDelsIName = PREFIX + \"cumulativeDeletesById\";\n    String delsQName = PREFIX + \"deletesByQuery\";\n    String cumulativeDelsQName = PREFIX + \"cumulativeDeletesByQuery\";\n    long commits = ((Meter) metrics.get(commitsName)).getCount();\n    long adds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long cumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    long cumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    long cumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n\n\n    assertNull(\"This test requires a schema that has no version field, \" +\n               \"it appears the schema file in use has been edited to violate \" +\n               \"this requirement\",\n               h.getCore().getLatestSchema().getFieldOrNull(VERSION_FIELD));\n\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n\n    // search - not committed - docs should not be found.\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    long newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    long newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new adds\", 2, newAdds - adds);\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n\n    assertU(commit());\n\n    long newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 1, newCommits - commits);\n\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    // adds should be reset to 0 after commit\n    assertEquals(\"new adds after commit\", 0, newAdds);\n    // not so with cumulative ones!\n    assertEquals(\"new cumulative adds after commit\", 2, newCumulativeAdds - cumulativeAdds);\n\n    // now they should be there\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete one\n    assertU(delI(\"5\"));\n\n    long newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    long newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI\", 1, newDelsI);\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n    // delsI should be reset to 0 after commit\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new delsI after commit\", 0, newDelsI);\n    assertEquals(\"new cumulative delsI after commit\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n    // 5 should be gone\n    assertQ(req(\"q\",\"id:5\"), \"//*[@numFound='0']\");\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    // now delete all\n    assertU(delQ(\"*:*\"));\n\n    long newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    long newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ\", 1, newDelsQ);\n    assertEquals(\"new cumulative delsQ\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // not committed yet\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='1']\");\n\n    assertU(commit());\n\n    newDelsQ = ((Gauge<Number>) metrics.get(delsQName)).getValue().longValue();\n    newCumulativeDelsQ = ((Meter) metrics.get(cumulativeDelsQName)).getCount();\n    assertEquals(\"new delsQ after commit\", 0, newDelsQ);\n    assertEquals(\"new cumulative delsQ after commit\", 1, newCumulativeDelsQ - cumulativeDelsQ);\n\n    // 6 should be gone\n    assertQ(req(\"q\",\"id:6\"), \"//*[@numFound='0']\");\n\n    // verify final metrics\n    newCommits = ((Meter) metrics.get(commitsName)).getCount();\n    assertEquals(\"new commits\", 3, newCommits - commits);\n    newAdds = ((Gauge<Number>) metrics.get(addsName)).getValue().longValue();\n    assertEquals(\"new adds\", 0, newAdds);\n    newCumulativeAdds = ((Meter) metrics.get(cumulativeAddsName)).getCount();\n    assertEquals(\"new cumulative adds\", 2, newCumulativeAdds - cumulativeAdds);\n    newDelsI = ((Gauge<Number>) metrics.get(delsIName)).getValue().longValue();\n    assertEquals(\"new delsI\", 0, newDelsI);\n    newCumulativeDelsI = ((Meter) metrics.get(cumulativeDelsIName)).getCount();\n    assertEquals(\"new cumulative delsI\", 1, newCumulativeDelsI - cumulativeDelsI);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"0fe2d0d2a63a5c8d95865963a0af13acf5534e24":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"e98520789adb1d5ad05afb4956eca0944a929688":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"08970e5b8411182a29412c177eff67ec1110095b":["0fe2d0d2a63a5c8d95865963a0af13acf5534e24"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["08970e5b8411182a29412c177eff67ec1110095b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["e98520789adb1d5ad05afb4956eca0944a929688"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["0fe2d0d2a63a5c8d95865963a0af13acf5534e24"],"0fe2d0d2a63a5c8d95865963a0af13acf5534e24":["08970e5b8411182a29412c177eff67ec1110095b"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}