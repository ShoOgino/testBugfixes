{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","commits":[{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b97509e7e2489430edfe784e4411976e3c6c748","date":1434336771,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81819c5a4a660afd353042c67106e682bb877cf1","date":1583169587,"type":3,"author":"msfroh","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitSeconds = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS;\n    indexWriterEvents = IndexWriterEvents.NULL_EVENTS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba192a321314de8edbe20b279eee9c471b16b48b","date":1583706474,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitSeconds = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS;\n    indexWriterEvents = IndexWriterEvents.NULL_EVENTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool();\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitSeconds = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitSeconds = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_SECONDS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_MILLIS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxFullFlushMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxCommitMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_COMMIT_MERGE_WAIT_MILLIS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxFullFlushMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxFullFlushMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxFullFlushMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n    maxFullFlushMergeWaitMillis = IndexWriterConfig.DEFAULT_MAX_FULL_FLUSH_MERGE_WAIT_MILLIS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba192a321314de8edbe20b279eee9c471b16b48b":["81819c5a4a660afd353042c67106e682bb877cf1"],"264935965977b4a9e2f3920420647072c9c49176":["ba192a321314de8edbe20b279eee9c471b16b48b"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["264935965977b4a9e2f3920420647072c9c49176"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["2b97509e7e2489430edfe784e4411976e3c6c748"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"680b6449f09827f58fe987aff279e014c311d966":["3f354ba79a5a3e8491ec2953f14f365a02c058ac","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"2b97509e7e2489430edfe784e4411976e3c6c748":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81819c5a4a660afd353042c67106e682bb877cf1":["28288370235ed02234a64753cdbf0c6ec096304a"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"ba192a321314de8edbe20b279eee9c471b16b48b":["264935965977b4a9e2f3920420647072c9c49176"],"264935965977b4a9e2f3920420647072c9c49176":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["81819c5a4a660afd353042c67106e682bb877cf1"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b97509e7e2489430edfe784e4411976e3c6c748":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2b97509e7e2489430edfe784e4411976e3c6c748"],"81819c5a4a660afd353042c67106e682bb877cf1":["ba192a321314de8edbe20b279eee9c471b16b48b"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}