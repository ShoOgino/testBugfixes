{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","commits":[{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5cd9341c578f132de886964218bbefe52bdcd83","date":1368036656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSeparator);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSepartor);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":["9724f10f3fa18adbeba8d1cbfda62676dae942a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7623716022a9a68898e329e8ffe6c36d168fba7","date":1384524101,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSeparator);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    int idx = shardKey.indexOf(separator);\n    if (idx < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int bitsSepIdx = part1.indexOf(bitsSeparator);\n    if (bitsSepIdx > 0) {\n      int firstBits = getBits(part1, bitsSepIdx);\n      if (firstBits >= 0) {\n        m1 = firstBits==0 ? 0 : (-1 << (32-firstBits));\n        m2 = firstBits==32 ? 0 : (-1 >>> firstBits);\n        part1 = part1.substring(0, bitsSepIdx);\n      }\n    }\n\n    //  If the upper bits are 0xF0000000, the range we want to cover is\n    //  0xF0000000 0xFfffffff\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int upperBits = hash1 & m1;\n    int lowerBound = upperBits;\n    int upperBound = upperBits | m2;\n\n    if (m1 == 0) {\n      // no bits used from first part of key.. the code above will produce 0x000000000->0xffffffff which only works on unsigned space, but we're using signed space.\n      lowerBound = Integer.MIN_VALUE;\n      upperBound = Integer.MAX_VALUE;\n    }\n\n    Range completeRange = new Range(lowerBound, upperBound);\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<Slice>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter#getSearchSlicesSingle(String,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<>(1);\n    for (Slice slice : collection.getActiveSlicesArr()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Slice> getSearchSlicesSingle(String shardKey, SolrParams params, DocCollection collection) {\n    if (shardKey == null) {\n      // search across whole collection\n      // TODO: this may need modification in the future when shard splitting could cause an overlap\n      return collection.getActiveSlices();\n    }\n    String id = shardKey;\n\n    if (shardKey.indexOf(SEPARATOR) < 0) {\n      // shardKey is a simple id, so don't do a range\n      return Collections.singletonList(hashToSlice(Hash.murmurhash3_x86_32(id, 0, id.length(), 0), collection));\n    }\n\n    Range completeRange = new KeyParser(id).getRange();\n\n    List<Slice> targetSlices = new ArrayList<>(1);\n    for (Slice slice : collection.getActiveSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.overlaps(completeRange)) {\n        targetSlices.add(slice);\n      }\n    }\n\n    return targetSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f7623716022a9a68898e329e8ffe6c36d168fba7"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5cd9341c578f132de886964218bbefe52bdcd83":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec5368fa415ebab044b7ae01de50d5b49519b7e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a5cd9341c578f132de886964218bbefe52bdcd83","f7623716022a9a68898e329e8ffe6c36d168fba7"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["a5cd9341c578f132de886964218bbefe52bdcd83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a5cd9341c578f132de886964218bbefe52bdcd83":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f7623716022a9a68898e329e8ffe6c36d168fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eec5368fa415ebab044b7ae01de50d5b49519b7e","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a5cd9341c578f132de886964218bbefe52bdcd83"],"f7623716022a9a68898e329e8ffe6c36d168fba7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}