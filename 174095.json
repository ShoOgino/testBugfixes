{"path":"src/test-deprecated/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"/dev/null","sourceNew":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"987791b536c51a031f8559c7dda5e20562f729f6","date":1118258927,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test-deprecated/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","sourceOld":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":null,"sourceOld":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\t//assertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"987791b536c51a031f8559c7dda5e20562f729f6":["5b5461affe637a07375542c763a4805300802be8"],"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["987791b536c51a031f8559c7dda5e20562f729f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"987791b536c51a031f8559c7dda5e20562f729f6":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"5b5461affe637a07375542c763a4805300802be8":["987791b536c51a031f8559c7dda5e20562f729f6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}