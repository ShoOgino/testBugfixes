{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","commits":[{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicIndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.ShortCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n      String field = entryKey.field;\n      ShortParser parser = (ShortParser) entryKey.custom;\n      if (parser == null) {\n        return wrapper.getShorts(reader, field, FieldCache.DEFAULT_SHORT_PARSER, setDocsWithField);\n      }\n      final int maxDoc = reader.maxDoc();\n      final short[] retArray = new short[maxDoc];\n      Terms terms = reader.terms(field);\n      FixedBitSet docsWithField = null;\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            wrapper.setDocsWithField(reader, field, new Bits.MatchAllBits(maxDoc));\n            setDocsWithField = false;\n          }\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        try {\n          while(true) {\n            final BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            final short termval = parser.parseShort(term);\n            docs = termsEnum.docs(null, docs, false);\n            while (true) {\n              final int docID = docs.nextDoc();\n              if (docID == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n              retArray[docID] = termval;\n              if (setDocsWithField) {\n                if (docsWithField == null) {\n                  // Lazy init\n                  docsWithField = new FixedBitSet(maxDoc);\n                }\n                docsWithField.set(docID);\n              }\n            }\n          }\n        } catch (StopFillCacheException stop) {\n        }\n      }\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, field, docsWithField);\n      }\n      return retArray;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da6d5ac19a80d65b1e864251f155d30960353b7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}