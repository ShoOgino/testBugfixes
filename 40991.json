{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle,BBoxFieldInfo).mjava","commits":[{"id":"ebd6f706eb59fe367493c820daeccd76587ec6bf","date":1340868972,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle,BBoxFieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, bbox.getMaxY(), null, false, false);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.SHOULD);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.SHOULD);\n      Query qNonXDL = this.makeXDL(false, qMinMax, fieldInfo);\n\n      // X Conditions for documents that cross the date line,\n      // both the left and right portions of the document must be disjoint to the query\n      // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n      // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n      // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n      // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n      // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qLeftRight = this.makeQuery(new Query[]{qMinXLeft, qMaxXRight}, BooleanClause.Occur.MUST);\n      Query qXDL = this.makeXDL(true, qLeftRight, fieldInfo);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, 180.0, null, false, false);\n      Query qMaxXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinXRight = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, -180.0, false, false);\n      Query qLeft = this.makeQuery(new Query[]{qMinXLeft, qMaxXLeft}, BooleanClause.Occur.SHOULD);\n      Query qRight = this.makeQuery(new Query[]{qMinXRight, qMaxXRight}, BooleanClause.Occur.SHOULD);\n      Query qLeftRight = this.makeQuery(new Query[]{qLeft, qRight}, BooleanClause.Occur.MUST);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight, fieldInfo);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.SHOULD);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeDisjoint(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, bbox.getMaxY(), null, false, false);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.SHOULD);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.SHOULD);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // both the left and right portions of the document must be disjoint to the query\n      // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n      // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n      // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n      // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n      // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, null, bbox.getMinX(), false, false);\n      Query qLeftRight = this.makeQuery(new Query[]{qMinXLeft, qMaxXRight}, BooleanClause.Occur.MUST);\n      Query qXDL = this.makeXDL(true, qLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, 180.0, null, false, false);\n      Query qMaxXLeft = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinXRight = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, null, -180.0, false, false);\n      Query qLeft = this.makeQuery(new Query[]{qMinXLeft, qMaxXLeft}, BooleanClause.Occur.SHOULD);\n      Query qRight = this.makeQuery(new Query[]{qMinXRight, qMaxXRight}, BooleanClause.Occur.SHOULD);\n      Query qLeftRight = this.makeQuery(new Query[]{qLeft, qRight}, BooleanClause.Occur.MUST);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.SHOULD);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that are disjoint to the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeDisjoint(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // general case\n    // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX() OR docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n\n    // Y conditions\n    // docMinY > queryExtent.getMaxY() OR docMaxY < queryExtent.getMinY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, bbox.getMaxY(), null, false, false);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, null, bbox.getMinY(), false, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.SHOULD);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.SHOULD);\n      Query qNonXDL = this.makeXDL(false, qMinMax, fieldInfo);\n\n      // X Conditions for documents that cross the date line,\n      // both the left and right portions of the document must be disjoint to the query\n      // (docMinXLeft > queryExtent.getMaxX() OR docMaxXLeft < queryExtent.getMinX()) AND\n      // (docMinXRight > queryExtent.getMaxX() OR docMaxXRight < queryExtent.getMinX())\n      // where: docMaxXLeft = 180.0, docMinXRight = -180.0\n      // (docMaxXLeft  < queryExtent.getMinX()) equates to (180.0  < queryExtent.getMinX()) and is ignored\n      // (docMinXRight > queryExtent.getMaxX()) equates to (-180.0 > queryExtent.getMaxX()) and is ignored\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qLeftRight = this.makeQuery(new Query[]{qMinXLeft, qMaxXRight}, BooleanClause.Occur.MUST);\n      Query qXDL = this.makeXDL(true, qLeftRight, fieldInfo);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // X Conditions for documents that do not cross the date line,\n      // the document must be disjoint to both the left and right query portions\n      // (docMinX > queryExtent.getMaxX()Left OR docMaxX < queryExtent.getMinX()) AND (docMinX > queryExtent.getMaxX() OR docMaxX < queryExtent.getMinX()Left)\n      // where: queryExtent.getMaxX()Left = 180.0, queryExtent.getMinX()Left = -180.0\n      Query qMinXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, 180.0, null, false, false);\n      Query qMaxXLeft = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, bbox.getMinX(), false, false);\n      Query qMinXRight = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, bbox.getMaxX(), null, false, false);\n      Query qMaxXRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, null, -180.0, false, false);\n      Query qLeft = this.makeQuery(new Query[]{qMinXLeft, qMaxXLeft}, BooleanClause.Occur.SHOULD);\n      Query qRight = this.makeQuery(new Query[]{qMinXRight, qMaxXRight}, BooleanClause.Occur.SHOULD);\n      Query qLeftRight = this.makeQuery(new Query[]{qLeft, qRight}, BooleanClause.Occur.MUST);\n\n      // No need to search for documents that do not cross the date line\n\n      xConditions = this.makeXDL(false, qLeftRight, fieldInfo);\n    }\n\n    // either X or Y conditions should occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.SHOULD);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}