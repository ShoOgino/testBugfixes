{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      InvertedFieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      InvertedFieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa","date":1335541694,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ede45a461a2dcb573505ed9b6a5182dfebd3688f","date":1353338494,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                1024,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.directory,\n                                                              state.fieldInfos,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a45bec74b98f6fc05f52770cfb425739e6563960","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fc834f3412d287003cc04691da380b69ab983239":["cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa","fc834f3412d287003cc04691da380b69ab983239"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6e5adcbe5a27941451fdb6194bcbff96c8630e14","ede45a461a2dcb573505ed9b6a5182dfebd3688f"],"cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ede45a461a2dcb573505ed9b6a5182dfebd3688f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a45bec74b98f6fc05f52770cfb425739e6563960":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"fc834f3412d287003cc04691da380b69ab983239":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["ede45a461a2dcb573505ed9b6a5182dfebd3688f","d0d1f90e969803cc84174589b5e4a39b7935fecd","d4d69c535930b5cce125cff868d40f6373dc27d4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa":["fc834f3412d287003cc04691da380b69ab983239","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["cc1425e6c8b5e9aeceee642e01d27bb538e3c6aa"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d0d1f90e969803cc84174589b5e4a39b7935fecd","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}