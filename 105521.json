{"path":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","commits":[{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    EnumSet<Occur>[] occurList = new EnumSet[] {EnumSet.of(Occur.MUST), EnumSet.of(Occur.MUST, Occur.SHOULD)};\n    for (EnumSet<Occur> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD);\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    EnumSet<Occur>[] occurList = new EnumSet[] {EnumSet.of(Occur.MUST), EnumSet.of(Occur.MUST, Occur.SHOULD)};\n    for (EnumSet<Occur> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD);\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c5555e75149b469a7756e82bd740777cfb584a","date":1313615559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    EnumSet<Occur>[] occurList = new EnumSet[] {EnumSet.of(Occur.MUST), EnumSet.of(Occur.MUST, Occur.SHOULD)};\n    for (EnumSet<Occur> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD);\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testBooleanQuery().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testBooleanQuery() throws Exception {\n    TermQuery aQuery = new TermQuery(new Term(\"f\", \"a\"));\n    TermQuery dQuery = new TermQuery(new Term(\"f\", \"d\"));\n    TermQuery cQuery = new TermQuery(new Term(\"f\", \"c\"));\n    TermQuery yQuery = new TermQuery(new Term(\"f\", \"y\"));\n\n    BooleanQuery query = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n\n    inner.add(cQuery, Occur.SHOULD);\n    inner.add(yQuery, Occur.MUST_NOT);\n    query.add(inner, Occur.MUST);\n    query.add(aQuery, Occur.MUST);\n    query.add(dQuery, Occur.MUST);\n    Set<String>[] occurList = new Set[] {\n        Collections.singleton(Occur.MUST.toString()), \n        new HashSet<String>(Arrays.asList(Occur.MUST.toString(), Occur.SHOULD.toString()))\n    };\n    for (Set<String> occur : occurList) {\n      CountingCollector c = new CountingCollector(TopScoreDocCollector.create(\n          10, true), occur);\n      s.search(query, null, c);\n      final int maxDocs = s.getIndexReader().maxDoc();\n      assertEquals(maxDocs, c.docCounts.size());\n      boolean includeOptional = occur.contains(Occur.SHOULD.toString());\n      for (int i = 0; i < maxDocs; i++) {\n        Map<Query, Float> doc0 = c.docCounts.get(i);\n        assertEquals(includeOptional ? 5 : 4, doc0.size());\n        assertEquals(1.0F, doc0.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(4.0F, doc0.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(3.0F, doc0.get(cQuery), FLOAT_TOLERANCE);\n\n        Map<Query, Float> doc1 = c.docCounts.get(++i);\n        assertEquals(includeOptional ? 5 : 4, doc1.size());\n        assertEquals(1.0F, doc1.get(aQuery), FLOAT_TOLERANCE);\n        assertEquals(1.0F, doc1.get(dQuery), FLOAT_TOLERANCE);\n        if (includeOptional)\n          assertEquals(1.0F, doc1.get(cQuery), FLOAT_TOLERANCE);\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4946500259641951dbd7f8a61956bf14bef3f60"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["89c5555e75149b469a7756e82bd740777cfb584a"],"89c5555e75149b469a7756e82bd740777cfb584a":["e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4946500259641951dbd7f8a61956bf14bef3f60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"89c5555e75149b469a7756e82bd740777cfb584a":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"e4946500259641951dbd7f8a61956bf14bef3f60":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","89c5555e75149b469a7756e82bd740777cfb584a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}